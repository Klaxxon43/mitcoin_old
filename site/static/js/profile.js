document.addEventListener('DOMContentLoaded', async () => {
    try {
        const user = await fetchUserData();  // üîΩ –ø–æ–ª—É—á–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
        displayUserData(user);
        setupTonWallet();
    } catch (err) {
        console.error(err);
        showStatus('error', '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    }
});

async function fetchUserData() {
    const response = await fetch('/me'); // –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è');
    const data = await response.json();
    if (data.status !== 'success') throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è');
    return data.user;
}

document.addEventListener('DOMContentLoaded', () => {
    if (!window.userData) return;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    displayUserData(window.userData);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON –∫–æ—à–µ–ª—å–∫–∞
    setupTonWallet();
});

function displayUserData(user) {
    const userDataElement = document.getElementById('user-data');
    const name = [user.first_name, user.last_name].filter(Boolean).join(' ') || 
                (user.username ? `@${user.username}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    
    userDataElement.innerHTML = `
        <p><strong>üÜî ID:</strong> ${user.id || user.user_id || 'N/A'}</p>
        <p><strong>üë§ –ò–º—è:</strong> ${name}</p>
        <p><strong>üîó –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> @${user.username || '–Ω–µ_—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</p>
        <p><strong>üåê –Ø–∑—ã–∫:</strong> ${user.language_code || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
    `;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    updateUserBalance(user);
}

async function updateUserBalance(user) {
    const balanceElement = document.getElementById('balance');
    
    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.balance !== undefined) {
        balanceElement.textContent = `${user.balance.toLocaleString('ru-RU')} ‚ÇΩ`;
        return;
    }
    
    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    try {
        const userId = user.id || user.user_id;
        if (!userId) {
            throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const response = await fetch('/get_user_balance', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId })
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        const data = await response.json();
        if (data.status !== 'success') {
            throw new Error(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å');
        }
        
        balanceElement.textContent = `${data.balance.toLocaleString('ru-RU')} ‚ÇΩ`;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        balanceElement.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
        showStatus('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å');
    }
}

function setupTonWallet() {
    const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
        manifestUrl: 'https://mitcoin.ru/tonconnect-manifest.json',
        buttonRootId: 'ton-connect',
        uiOptions: {
            twaReturnUrl: 'https://t.me/mitcoin2bot',
            buttonTheme: 'dark',
            buttonSize: 'medium'
        }
    });

    tonConnectUI.onStatusChange((wallet) => {
        const walletInfo = document.getElementById('wallet-info');
        if (wallet) {
            walletInfo.style.display = 'block';
            updateWalletBalance(wallet.account.address);
        } else {
            walletInfo.style.display = 'none';
        }
    });
}

async function updateWalletBalance(address) {
    try {
        const response = await fetch(`https://tonapi.io/v2/accounts/${address}`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ TonAPI');
        }
        
        const data = await response.json();
        const balance = (parseInt(data.balance) / 1e9).toFixed(2);
        document.getElementById('wallet-balance').textContent = balance;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ TON:', error);
        document.getElementById('wallet-balance').textContent = '–û—à–∏–±–∫–∞';
        showStatus('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å TON –∫–æ—à–µ–ª—å–∫–∞');
    }
}

function showStatus(type, message) {
    const statusElement = document.getElementById('status');
    statusElement.style.display = 'block';
    statusElement.className = `status ${type}`;
    statusElement.textContent = message;
}