// –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const tg = window.Telegram.WebApp;
let tonConnectUI;

function showStatus(type, message) {
  const statusElement = document.getElementById('status');
  statusElement.style.display = 'block';
  statusElement.className = `status ${type}`;
  statusElement.textContent = message;
}

function isTelegramWebApp() {
  try {
    return window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initData;
  } catch (e) {
    return false;
  }
}

function setupNavigation() {
  const menuItems = document.querySelectorAll('.menu-item');
  
  menuItems.forEach(item => {
    item.addEventListener('click', function() {
      const route = this.getAttribute('data-route');
      if (window.location.pathname !== route) {
        window.location.href = route;
      }
    });
  });
}

async function authorize() {
  try {
    const response = await fetch('/auth', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ initData: tg.initData })
    });
    
    if (!response.ok) {
      throw new Error(await response.text());
    }
    
    return await response.json();
  } catch (error) {
    console.error('Auth error:', error);
    showStatus('error', `‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    throw error;
  }
}

async function loadUserData(userId) {
  try {
    const response = await fetch('/get_user_data', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: userId })
    });
    
    if (!response.ok) {
      throw new Error(await response.text());
    }
    
    const data = await response.json();
    if (data.status !== 'success') {
      throw new Error(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    return data.user;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    showStatus('error', `‚ùå ${error.message}`);
    throw error;
  }
}

function updateWelcomeMessage(user) {
  const name = [user.first_name, user.last_name].filter(Boolean).join(' ') || 
              (user.username ? `@${user.username}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
  document.getElementById('welcome-text').textContent = `–ü—Ä–∏–≤–µ—Ç, ${name.trim()}!`;
}

function displayUserData(userData) {
  const name = [userData.first_name, userData.last_name].filter(Boolean).join(' ') || 
              (userData.username ? `@${userData.username}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
  
  document.getElementById('user-data').innerHTML = `
    <p><strong>üÜî ID:</strong> ${userData.user_id}</p>
    <p><strong>üë§ –ò–º—è:</strong> ${name}</p>
    <p><strong>üîó –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> @${userData.username || 'N/A'}</p>
    <p><strong>üåê –Ø–∑—ã–∫:</strong> ${userData.language_code || 'N/A'}</p>
  `;
  
  document.getElementById('balance').textContent = `${userData.balance || 0} ‚ÇΩ`;
  showStatus('success', '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
}

function setupTonWallet() {
  tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
    manifestUrl: 'https://mitcoin.ru/tonconnect%E2%80%91manifest.json',
    buttonRootId: 'ton-connect',
    uiOptions: {
      twaReturnUrl: 'https://t.me/mitcoin2bot'
    }
  });

  tonConnectUI.connectionRestored.then(() => {
    const walletConnectionSource = {
      jsBridgeKey: 'tonconnect'
    };
    
    tonConnectUI.connect(walletConnectionSource).then(() => {
      updateWalletInfo();
    });
  });

  tonConnectUI.onStatusChange((wallet) => {
    if (wallet) {
      updateWalletInfo();
      showStatus('success', 'TON –∫–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } else {
      document.getElementById('wallet-info').style.display = 'none';
      showStatus('info', 'TON –∫–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
    }
  });
}

async function updateWalletInfo() {
  const wallet = tonConnectUI.wallet;
  if (!wallet) {
    document.getElementById('wallet-info').style.display = 'none';
    return;
  }

  try {
    const address = wallet.account.address;
    document.getElementById('wallet-info').style.display = 'block';
    
    const res = await fetch(`https://tonapi.io/v2/accounts/${address}`);
    const json = await res.json();
    document.getElementById('wallet-balance').textContent = (parseInt(json.balance) / 1e9).toFixed(6);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞:', error);
    document.getElementById('wallet-balance').textContent = '–û—à–∏–±–∫–∞';
    showStatus('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞');
  }
}

async function initApp() {
  try {
    if (!isTelegramWebApp()) {
      throw new Error("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Telegram");
    }
    
    document.getElementById('app-content').classList.remove('hidden');
    document.getElementById('telegram-only-message').classList.add('hidden');
    document.getElementById('footer-menu').classList.remove('hidden');
    
    tg.expand();
    setupNavigation();
    
    await authorize();
    
    const user = tg.initDataUnsafe.user;
    if (!user?.id) {
      throw new Error("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    const userData = await loadUserData(user.id);
    window.userData = userData; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    document.getElementById('telegram-only-message').classList.remove('hidden');
    showStatus('error', `‚ùå ${error.message}`);
  }
}