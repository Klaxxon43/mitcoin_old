# main.py
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
import random
import string
import json
import db
import api

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
with open('config.json', 'r') as f:
    config = json.load(f)
    BOT_TOKEN = config['BOT_TOKEN']
    MAINNET_WALLET = config['MAINNET_WALLET']
    TESTNET_WALLET = config['TESTNET_WALLET']
    WORK_MODE = config['WORK_MODE']

WALLET = MAINNET_WALLET if WORK_MODE == "mainnet" else TESTNET_WALLET

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderStates(StatesGroup):
    choosing_air = State()
    entering_amount = State()
    waiting_payment = State()

def generate_unique_code(length=8):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    is_existing = db.check_user(
        message.from_user.id, 
        message.from_user.username, 
        message.from_user.first_name
    )
    
    welcome_text = (
        f"–†–ï–ñ–ò–ú –†–ê–ë–û–¢–´: {WORK_MODE}\n\n"
        f"{'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º' if is_existing else '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å'}, "
        f"{message.from_user.first_name}!\n\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–æ–∑–¥—É—Ö–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /buy"
    )
    
    await message.answer(welcome_text)

@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n/start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")

@dp.message(Command("me"))
async def cmd_me(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    transactions = db.get_user_payments(message.from_user.id)
    
    if not transactions:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        return
    
    response = ["–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"]
    for tx in transactions:
        amount = int(tx['value']) / 1_000_000_000  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –Ω–∞–Ω–æ—Ç–æ–Ω–æ–≤
        response.append(f"{amount} TON - {tx['comment']} (—Å—Ç–∞—Ç—É—Å: {tx['status']})")
    
    await message.answer("\n".join(response))

@dp.message(Command("buy"))
async def cmd_buy(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏"""
    builder = ReplyKeyboardBuilder()
    air_types = [
        ('–ß–∏—Å—Ç—ã–π –≤–æ–∑–¥—É—Ö üå´', 'pure'),
        ('–õ–µ—Å–Ω–æ–π –≤–æ–∑–¥—É—Ö üå≤', 'forest'),
        ('–ú–æ—Ä—Å–∫–æ–π –±—Ä–∏–∑ üåä', 'sea'),
        ('–ó–∞–ø–∞—Ö –∞—Å—Ñ–∞–ª—å—Ç–∞ üõ£', 'asphalt')
    ]
    
    for text, callback_data in air_types:
        builder.add(KeyboardButton(text=text))
    
    builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–∑–¥—É—Ö–∞ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(OrderStates.choosing_air)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(OrderStates.choosing_air)
async def process_air_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–æ–∑–¥—É—Ö–∞"""
    air_mapping = {
        '–ß–∏—Å—Ç—ã–π –≤–æ–∑–¥—É—Ö üå´': 'pure',
        '–õ–µ—Å–Ω–æ–π –≤–æ–∑–¥—É—Ö üå≤': 'forest',
        '–ú–æ—Ä—Å–∫–æ–π –±—Ä–∏–∑ üåä': 'sea',
        '–ó–∞–ø–∞—Ö –∞—Å—Ñ–∞–ª—å—Ç–∞ üõ£': 'asphalt'
    }
    
    if message.text not in air_mapping:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    
    await state.update_data(air_type=message.text, air_code=air_mapping[message.text])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É TON, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5)")
    await state.set_state(OrderStates.entering_amount)

@dp.message(OrderStates.entering_amount)
async def process_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
        
        amount_nano = int(amount * 1_000_000_000)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
        unique_code = generate_unique_code()
        
        data = await state.get_data()
        air_type = data['air_type']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        db.save_pending_payment(
            user_id=message.from_user.id,
            amount=str(amount_nano),
            comment_code=unique_code
        )
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="Ton Wallet",
                url=f"ton://transfer/{WALLET}?amount={amount_nano}&text={unique_code}"
            ),
            InlineKeyboardButton(
                text="Tonkeeper",
                url=f"https://app.tonkeeper.com/transfer/{WALLET}?amount={amount_nano}&text={unique_code}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="Tonhub",
                url=f"https://tonhub.com/transfer/{WALLET}?amount={amount_nano}&text={unique_code}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"check_payment:{unique_code}"
            )
        )

        await message.answer(
            f"üí® –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{air_type}</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>{amount} TON</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n"
            f"<code>{WALLET}</code>\n\n"
            f"–° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º:\n<code>{unique_code}</code>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
            reply_markup=builder.as_markup()
        )

        await state.update_data(amount_nano=str(amount_nano), unique_code=unique_code)
        await state.set_state(OrderStates.waiting_payment)
    except ValueError as e:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5). –û—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(F.data.startswith("check_payment:"), OrderStates.waiting_payment)
async def check_payment(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    unique_code = callback.data.split(":")[1]
    data = await state.get_data()
    
    result = api.find_transaction(
        value=data['amount_nano'],
        comment=unique_code
    )

    if not result:
        await callback.answer(
            "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.",
            show_alert=True
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
    db.update_payment_status(unique_code, "completed")
    
    await callback.message.edit_text(
        "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É {data['air_type']}\n\n"
        "/start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞",
    )
    await state.clear()

if __name__ == '__main__':
    dp.run_polling(bot, skip_updates=True)  