from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from utils.Imports import Bot

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à –±–æ—Ç –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
from datebase.db import DB
app = FastAPI()

# –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
class UserRequest(BaseModel):
    user_id: int

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/get_balance")
async def get_balance(request: UserRequest):
    user_id = request.user_id
    balance = await DB.get_user_balance(user_id)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞

    if balance is None:
        raise HTTPException(status_code=404, detail="User not found")

    return {"user_id": user_id, "balance": balance}

@app.post("/get_user")
async def get_balance(request: UserRequest):
    user_id = request.user_id
    res = await DB.select_user(user_id)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞

    if res is None:
        raise HTTPException(status_code=404, detail="User not found")

    return res



# --- –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —Å–∞–π—Ç–∞ ---
class PaymentData(BaseModel):
    payment_id: str
    order_id: str
    amount: int
    currency: str
    method: str

@app.post("/api/payment-success")
async def handle_payment_success(data: PaymentData, bot: Bot):
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞–ø–∏—Å—å –≤ –ë–î
    text = (
        f"üí≥ –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"üßæ Order ID: {data.order_id}\n"
        f"üí∞ –°—É–º–º–∞: {data.amount / 100:.2f} {data.currency}\n"
        f"üìé –ú–µ—Ç–æ–¥: {data.method}\n"
        f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {data.payment_id}"
    )

    # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_id = 5129878568
    try:
        await bot.send_message(admin_id, text)
    except Exception as e:
        raise HTTPException(status_code=500, detail="Failed to send message")

    return {"status": "ok"}


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

