from handlers.client.client import *

@router.callback_query(F.data == 'checks_menu')
async def checks_menu(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    channels = await DB.all_channels_op()
    not_subscribed = []

    from handlers.client.client import check_subs_op
    if not await check_subs_op(user_id, bot):
        return
    
    if await DB.get_break_status() and user_id not in ADMINS_ID:
        await callback.message.answer('üõ†–ò–¥—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤üõ†\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ')
        return
    
    for channel in channels:
        channel_id = channel[0]
        try:
            chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                not_subscribed.append(channel)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

    if not_subscribed:
        print(f'https://t.me/{channel[0].replace("@", "")}')
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã
        keyboard = InlineKeyboardBuilder()
        for channel in not_subscribed:
            keyboard.add(InlineKeyboardButton(
                text=f"üì¢ {channel[1]}",
                url=f"https://t.me/{channel[0].replace('@', '')}"
            ))
        keyboard.add(InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
            callback_data="op_proverka"
        ))
        keyboard.adjust(1)
        await callback.message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=keyboard.as_markup()
        )
    else:
        add_button = InlineKeyboardButton(text="üë§ –°–∏–Ω–≥–ª-—á–µ–∫ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)", callback_data="single_check")
        add_button1 = InlineKeyboardButton(text="üí∞ –ú–æ–∏ —á–µ–∫–∏", callback_data="my_checks")
        add_button2 = InlineKeyboardButton(text="üë• –ú—É–ª—å—Ç–∏-—á–µ–∫ (–º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π)", callback_data=f"multi_check")
        add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_menu")
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1], [add_button2], [add_button3]])

        await callback.message.edit_text("üí∏ –ß–µ–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å $MICO\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∏–ø —á–µ–∫–∞:</b>", reply_markup=keyboard)

CHECKS_TYPES = {
    1: 'üë§ –°–∏–Ω–≥–ª-–ß–µ–∫',
    2: 'üë• –ú—É–ª—å—Ç–∏-—á–µ–∫'
}

async def generate_tasks_keyboard_checks(checks, checkspage, total_pages):
    builder = InlineKeyboardBuilder()

    # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    for check in checks:
        print(check)
        check_type = CHECKS_TYPES.get(check[3], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        amount = check[4]
        button_text = f"{check_type} | {amount} $MICO"
        # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        builder.row(InlineKeyboardButton(text=button_text, callback_data=f"check_{check[0]}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="checks_menu"))

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = []
    if checkspage > 1:
        pagination.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"checkspage_{checkspage - 1}"))
    pagination.append(InlineKeyboardButton(text=str(checkspage), callback_data="checkscurrent_page"))
    if checkspage < total_pages:
        pagination.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"checkspage_{checkspage + 1}"))

    builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    return builder.as_markup()

# –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
def checkspaginate_tasks(checks, checkspage=1, per_page=5):
    total_pages = (len(checks) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    start_idx = (checkspage - 1) * per_page
    end_idx = start_idx + per_page
    tasks_on_page = checks[start_idx:end_idx]
    return tasks_on_page, total_pages

@router.callback_query(F.data == 'my_checks')
async def my_checks(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    checks = await DB.get_check_by_user_id(user_id)
    print(checks)
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    checkspage = 1
    tasks_on_page, total_pages = paginate_tasks(checks, checkspage)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard_checks(tasks_on_page, checkspage, total_pages)

    await callback.message.edit_text("üí∏ <b>–í–∞—à–∏ —á–µ–∫–∏:</b>", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("checkspage_"))
async def change_page_handler(callback: types.CallbackQuery):
    checkspage = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    checks = await DB.get_check_by_user_id(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    tasks_on_page, total_pages = paginate_tasks(checks, checkspage)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard_checks(tasks_on_page, checkspage, total_pages)

    await callback.message.edit_text("üí∏ –í–∞—à–∏ —á–µ–∫–∏:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("check_"))
async def check_detail_handler(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    check_id = int(callback.data.split('_')[1]) 
    check = await DB.get_check_by_id(check_id)
    
    # –í—ã–Ω–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ check –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    check_id = check[0]  # check_id (INTEGER)
    uid = check[1]  # uid (TEXT)
    user_id = check[2]  # user_id (INTEGER)
    check_type = check[3]  # type (INTEGER)
    check_sum = check[4]  # sum (INTEGER)
    check_amount = check[5]  # amount (INTEGER)
    check_description = check[6]  # description (TEXT)
    locked_for_user = check[7]  # locked_for_user (INTEGER)
    password = check[8]  # password (TEXT)
    OP_id = check[9]  # OP_id (TEXT)
    max_amount = check[10]  # max_amount (INTEGER)
    ref_bonus = check[11]  # ref_bonus (INTEGER)
    ref_fund = check[12]  # ref_fund (INTEGER)
    OP_name = check[13]  # OP_name (TEXT)

    bot_username = (await bot.get_me()).username
    check_link = f'https://t.me/{bot_username}?start=check_{uid}'

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
    check_type_str = CHECKS_TYPES.get(check_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if check_description is None:
        check_description = " "
    if locked_for_user is None:
        locked_for_user = "–Ω–µ—Ç"
    if password is None:
        password = "–Ω–µ—Ç"
    if OP_id is None:
        OP_id = "–Ω–µ—Ç"

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if OP_id and OP_id != "–Ω–µ—Ç":
        try:
            chat = await bot.get_chat(OP_id)
            OP_name = f'<a href="https://t.me/{chat.username}">{chat.title}</a>'
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            OP_name = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    else:
        OP_name = OP_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
    if check_type == 1:  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫
        check_info = f'''
üí∏ <b>–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫ –Ω–∞ —Å—É–º–º—É {check_sum} $MICO</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {check_description}
üìå <b>–ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</b> {locked_for_user}

‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º—É-–ª–∏–±–æ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ - –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ –≤ –æ—Ç–≤–µ—Ç

<span class="tg-spoiler">{check_link}</span>
        '''
    elif check_type == 2:  # –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫
        check_info = f"""
üí∏ <b>–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫ –Ω–∞ —Å—É–º–º—É {check_sum * check_amount} $MICO</b>

<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {max_amount} </b>
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {check_amount} </b>
<b>–°—É–º–º–∞ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {check_sum} $MICO</b>
 
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {check_description}
üîê <b>–ü–∞—Ä–æ–ª—å:</b> {password}
üì£ <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–û–ü):</b> {OP_name}


‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º—É-–ª–∏–±–æ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ - –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ –≤ –æ—Ç–≤–µ—Ç

<span class="tg-spoiler">{check_link}</span>
        """

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–µ–∫–∞
    if check_type == 1:  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫
        add_button = InlineKeyboardButton(
            text="‚úà –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            switch_inline_query=f'\n–ß–ï–ö –ù–ê –°–£–ú–ú–£ {check_sum} $MICO\n{check_description}\n\n{check_link}'
        )
        add_button1 = InlineKeyboardButton(
            text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
            callback_data=f'adddiscription_{check_id}'
        )
        add_button2 = InlineKeyboardButton(
            text="‚õì –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            callback_data=f"pincheckuser_{check_id}"
        )
        add_button3 = InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"checkdelete_{check_id}"
        )
        add_button4 = InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="my_checks"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[add_button], [add_button1], [add_button2], [add_button3], [add_button4]]
        )
    elif check_type == 2:  # –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫
        add_button = InlineKeyboardButton(
            text="‚úà –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            switch_inline_query=f'üí∏ –ß–ï–ö –ù–ê –°–£–ú–ú–£ {check_sum * check_amount} $MICO\n{check_description}\n\n{check_link}'
        )
        add_button1 = InlineKeyboardButton(
            text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
            callback_data=f'adddiscription_{check_id}'
        )
        add_button2 = InlineKeyboardButton(
            text="üì£ –î–æ–±–∞–≤–∏—Ç—å –û–ü",
            callback_data=f"addopcheck_{check_id}"
        )
        add_button3 = InlineKeyboardButton(
            text="üîë –ó–∞–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å",
            callback_data=f"addpasswordcheck_{check_id}"
        )
        add_button4 = InlineKeyboardButton(
            text="üëë –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ $MICO DROPS",
            callback_data=f"sendmitdrops_{check_id}"
        )
        add_button5 = InlineKeyboardButton(
            text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ–∫–∞",
            callback_data=f"addbalancecheck_{check_id}"
        )
        add_button6 = InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"checkdelete_{check_id}"
        )
        add_button7 = InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="my_checks"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [add_button], [add_button1], [add_button2], [add_button3],
                [add_button4], [add_button5], [add_button6], [add_button7]
            ]
        )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(check_info, reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("sendmitdrops_"))
async def sendmitdrops(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    add_button = InlineKeyboardButton(text="üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å", callback_data=f"mitcoindrop_{check_id}")
    add_button1 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1]])
    await callback.message.edit_text('''
<b>–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–π —á–µ–∫ –≤ @mitcoin_drops</b> 

<b>–£—Å–ª–æ–≤–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b>
1) –ß–µ–∫ –±–µ–∑ –ø–∞—Ä–æ–ª—è
2) –û–±—â–∞—è —Å—É–º–º–∞ —á–µ–∫–∞ –±–æ–ª—å—à–µ 50000 $MICO 
    ''', reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("mitcoindrop_"))
async def sendmitdrops1(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    check = await DB.get_check_by_id(check_id)
    type = check[3]
    sum = check[4]
    amount = check[5]
    bot_username = (await bot.get_me()).username
    general_sum = sum*amount
    check_link = f'https://t.me/{bot_username}?start=check_{check[1]}'
    if type == 2 and general_sum >= 50000 and check[8] is None:

        if check[6] is not None:
            description = check[6]
        else:
            description = ''
            
        text = f'''
üí∏ <b>–ß–µ–∫ –Ω–∞ —Å—É–º–º—É {general_sum} MitCoin</b>

{amount} –∞–∫—Ç–∏–≤–∞—Ü–∏–π
{sum} MitCoin –∑–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é

{description}

{check_link}        
        '''
        try:
            add_button = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å", url=check_link)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
            await bot.send_message(chat_id='-1002446297366', text=text, reply_markup=keyboard)
            await callback.message.edit_text('ü•≥ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –≤ @mitcoin_drops',reply_markup=back_menu_kb(user_id))
        except:
            await callback.message.edit_text('–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ–∫–∞ –≤ @mitcoin_drops, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Ç—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É', reply_markup=back_menu_kb(user_id))
    else:
        await callback.message.edit_text(
            '‚ùå –í–∞—à —á–µ–∫ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —É—Å–ª–æ–≤–∏—è–º',
            reply_markup=back_menu_kb(user_id))

@router.callback_query(lambda c: c.data.startswith("addopcheck_"))
async def delete_check_handler(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
    await callback.message.edit_text('üì£ <b>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (–û–ü) –¥–ª—è —á–µ–∫–∞</b>\n\n<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª</i>\n\n<b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</b>', reply_markup=keyboard)
    await state.set_state(checks.check_op)
    await state.update_data(check_id=check_id)

@router.message(checks.check_op)
async def handle_custom_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    check_id = data.get('check_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
    if not message.forward_from_chat or message.forward_from:
        await message.answer('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.')
        return

    channel_id = message.forward_from_chat.id
    channel_name = message.forward_from_chat.title

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(channel_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        bot_member = await bot.get_chat_member(channel_id, bot.id)
        if bot_member.status != 'administrator':
            # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            add_bot_button = InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª",
                url=f"https://t.me/mitcoin2bot?startchannel"
            )
            back_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_bot_button], [back_button]])
            print(channel_id)
            await message.answer(
                '‚ùó –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n'
                '1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n'
                '2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.\n'
                '3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',
                reply_markup=keyboard
            )
            return
        # –ï—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        await DB.update_check(check_id=check_id, OP_id=channel_id, OP_name=channel_name)
        add_button1 = InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"check_{check_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1]])
        await message.answer(f'üì£ –ö–∞–Ω–∞–ª <b>{channel_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –û–ü', reply_markup=keyboard)
        await state.clear()

    except Exception as e:
        print(e)
        print(channel_id)
        await message.answer('‚òπ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª, –ª–∏–±–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
        return

@router.callback_query(lambda c: c.data.startswith("addbalancecheck_"))
async def activation_check_handler(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user["balance"]
    check = await DB.get_check_by_id(check_id)
    sum = check[4]
    available_act = balance // sum
    add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
    await callback.message.edit_text(f'‚ûï –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∫ –≤–∞—à–µ–º—É —á–µ–∫—É, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–π\n\n<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å ({available_act} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ):</b>', reply_markup=keyboard)
    await state.set_state(checks.add_activation)
    await state.update_data(check_id=check_id)

@router.message(checks.add_activation)
async def handle_custom_check_activation(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    user = await DB.select_user(user_id)
    check_id = data.get('check_id')
    balance = user["balance"]
    check = await DB.get_check_by_id(check_id)
    sum = check[4]
    available_act = balance // sum
    try:
        text = int(message.text)
        if text > available_act:
            await message.answer(f'‚ùó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å {available_act} –∞–∫—Ç–∏–≤–∞—Ü–∏–π')
            return
        if text == "None":
            await message.answer('‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return
        new_amount = check[5] + text
        await DB.update_check(check_id=check_id, amount=new_amount)
        new_price = sum*text
        await DB.add_balance(user_id, amount=-new_price)
        add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
        await message.answer(f'ü•≥ <b>–ö —á–µ–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–æ {text} –∞–∫—Ç–∏–≤–∞—Ü–∏–π</b>', reply_markup=keyboard)
        await DB.add_transaction(
            user_id=user_id,
            amount=new_price,
            description="–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∫ —á–µ–∫—É",
            additional_info= None
        ) 
        await state.clear()
    except ValueError:
        await message.answer('‚ùó –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞')

@router.callback_query(lambda c: c.data.startswith("addpasswordcheck_"))
async def delete_check_handler(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
    await callback.message.edit_text('üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —á–µ–∫–∞:</b>', reply_markup=keyboard)
    await state.set_state(checks.check_password)
    await state.update_data(check_id=check_id)

@router.message(checks.check_password)
async def handle_custom_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    check_id = data.get('check_id')
    try:
        text = str(message.text)
        if len(text) > 20:
            await message.answer('‚ùó –ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤...')
            return
        if text == "None":
            await message.answer('‚ùó –ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
            return
        await DB.update_check(check_id=check_id, password=text)
        add_button = InlineKeyboardButton(text="üîô –ö —á–µ–∫—É", callback_data=f"check_{check_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
        await message.answer(f'<i>{text}</i>\n\n–ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫ —á–µ–∫—É', reply_markup=keyboard)
        await state.clear()
    except ValueError:
        await message.answer('‚ùó –ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ...')

@router.callback_query(lambda c: c.data.startswith("adddiscription_"))
async def delete_check_handler(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    await callback.message.edit_text('üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–µ–∫–∞:</b>')
    await state.set_state(checks.check_discription)
    await state.update_data(check_id=check_id)

@router.message(checks.check_discription)
async def handle_custom_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    check_id = data.get('check_id')
    try:
        text = str(message.text)
        if len(text) > 50:
            await message.answer('‚ùó –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤...')
            return
        if text == "None":
            await message.answer('‚ùó –í –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–∏–∫–µ—Ä–æ–≤, –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –¥—Ä—É–≥–æ–≥–æ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞, –¥–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç...')
            return
        await DB.update_check(check_id=check_id, description=text)
        add_button = InlineKeyboardButton(text="üîô –ö —á–µ–∫—É", callback_data=f"check_{check_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
        await message.answer(f'<i>{text}</i>\n\n–û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫ —á–µ–∫—É', reply_markup=keyboard)
        await state.clear()
    except ValueError:
        await message.answer('‚ùó –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —á–µ–∫—É...')

@router.callback_query(lambda c: c.data.startswith("pincheckuser_"))
async def delete_check_handler(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    await callback.message.edit_text('üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –ª–∏–±–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —á–µ–∫</b>')
    await state.set_state(checks.check_lock_user)
    await state.update_data(check_id=check_id)

@router.message(checks.check_lock_user)
async def handle_custom_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    check_id = data.get('check_id')
    try:
        user = str(message.text)

        if user == "None" or len(user) > 20:
            await message.answer('‚ùó –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –ª–∏–±–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            return
        await DB.update_check(check_id=check_id, locked_for_user=user)
        add_button = InlineKeyboardButton(text="üîô –ö —á–µ–∫—É", callback_data=f"check_{check_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
        await message.answer(f'üîê <b>–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —á–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è</b> {user}', reply_markup=keyboard)
        await state.clear()
    except ValueError:
        await message.answer('‚ùó –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ...')

@router.callback_query(lambda c: c.data.startswith("checkdelete_"))
async def delete_check_handler(callback: types.CallbackQuery):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    check = await DB.get_check_by_id(check_id)
    amount = check[5]
    sum = check[4]

    cost = sum*amount

    new_balance = balance + cost

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await DB.delete_check(check_id=check_id, user_id=user_id)
    await DB.update_balance(user_id, balance=new_balance)
    await callback.message.edit_text("üóë")
    await asyncio.sleep(1)
    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –∑–∞–¥–∞–Ω–∏—è–º
    user_id = callback.from_user.id
    checks = await DB.get_check_by_user_id(user_id)
    checkspage = 1
    tasks_on_page, total_pages = paginate_tasks(checks, checkspage)
    keyboard = await generate_tasks_keyboard_checks(tasks_on_page, checkspage, total_pages)

    await callback.message.edit_text("üí∏ <b>–í–∞—à–∏ —á–µ–∫–∏:</b>", reply_markup=keyboard)