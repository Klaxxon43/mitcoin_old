from utils.Imports import *
from handlers.client.client import *
from handlers.client.states import *
from .menu import check_router

@check_router.callback_query(F.data == 'single_check')
async def create_single_check(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    user_balance = await DB.get_user_balance(user_id)

    if user_balance < 1001:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit_menu'))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu'))
        await callback.message.edit_text(
            f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.\n–ë–∞–ª–∞–Ω—Å: {user_balance:.0f} $MICO",
            reply_markup=builder.as_markup())
        return

    max_check = user_balance - (user_balance // 100)

    add_button = InlineKeyboardButton(text=f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ ({max_check} MitCoin)", callback_data=f'checkamount_{max_check}')
    add_button1 = InlineKeyboardButton(text=f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ (1000 MitCoin)", callback_data=f'checkamount_1000')
    add_button2 = InlineKeyboardButton(text="üìä –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data='customcheck_amount')
    add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='checks_menu')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1], [add_button2], [add_button3]])
    await callback.message.edit_text(
        "üí∞ <b>–°–∫–æ–ª—å–∫–æ MitCoin –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?</b>",
        reply_markup=keyboard
    )

@check_router.callback_query(F.data == 'customcheck_amount')
async def custom_check_amount(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üíµ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É MitCoin, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)</b>"
    )
    await state.set_state(checks.single_check_create)

@check_router.message(checks.single_check_create)
async def handle_custom_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    user_balance = await DB.get_user_balance(user_id)

    bot_username = (await bot.get_me()).username
    try:
        sum = int(message.text)
        if sum + (sum // 100) > user_balance:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit_menu'))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu'))
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ –Ω–∞ —ç—Ç—É —Å—É–º–º—É, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ",
                reply_markup=builder.as_markup()
            )
            return

        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞

        await state.clear()
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞
        uid = str(uuid.uuid4())
        await DB.update_balance(user_id, balance=user_balance - (sum + sum//100))
        await DB.create_check(uid=uid, user_id=user_id, type=1, sum=sum, amount=1, ref_bonus=None, ref_fund=None)
        check = await DB.get_check_by_uid(uid)
        check_id = check[0]
        check_link = f"https://t.me/{bot_username}?start=check_{uid}"
        add_button1 = InlineKeyboardButton(text="‚úà –û—Ç–ø—Ä–∞–≤–∏—Ç—å", switch_inline_query=check_link)
        add_button2 = InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data=f'check_{check_id}')
        add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='checks_menu')
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2], [add_button3]])
        await message.answer(f'''
üí∏ <b>–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫ –Ω–∞ —Å—É–º–º—É {sum} MitCoin</b>

‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º—É-–ª–∏–±–æ —ç—Ç—É —Å—Å—ã–ª–∫—É –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –æ—Ç–≤–µ—Ç
<i>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</i>

<span class="tg-spoiler">{check_link}</span>
        ''', reply_markup=keyboard)

        await DB.add_transaction(
            user_id=user_id,
            amount=sum + sum//100,
            description="—Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω–≥–ª —á–µ–∫–∞",
            additional_info= None
        )

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

@check_router.callback_query(F.data.startswith('checkamount_'))
async def handle_check_amount(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    sum = int(callback.data.split('_')[1])
    bot_username = (await bot.get_me()).username
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    user_balance = await DB.get_user_balance(user_id)

    if sum + (sum//100) > user_balance:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit_menu'))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu'))
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ –Ω–∞ —ç—Ç—É —Å—É–º–º—É.",
            reply_markup=builder.as_markup()
        )
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞
    uid = str(uuid.uuid4())
    await DB.update_balance(user_id, balance=user_balance - (sum + (sum // 100)))
    await DB.create_check(uid=uid, user_id=user_id, type=1, sum=sum, amount=1, ref_bonus=0, ref_fund=0) 

    check = await DB.get_check_by_uid(uid)
    check_id = check[0]
    check_link = f"https://t.me/{bot_username}?start=check_{uid}"
    add_button1 = InlineKeyboardButton(text="‚úà –û—Ç–ø—Ä–∞–≤–∏—Ç—å", switch_inline_query=check_link)
    add_button2 = InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data=f'check_{check_id}')
    add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='checks_menu')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2], [add_button3]])
    await callback.message.edit_text(f'''
üí∏ <b>–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫ –Ω–∞ —Å—É–º–º—É {sum} MitCoin</b>

<i>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</i>
‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º—É-–ª–∏–±–æ —ç—Ç—É —Å—Å—ã–ª–∫—É –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –æ—Ç–≤–µ—Ç

<span class="tg-spoiler">{check_link}</span>
    ''', reply_markup=keyboard)
    await DB.add_transaction(
        user_id=user_id,
        amount=sum+ (sum//100), 
        description="—Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω–≥–ª —á–µ–∫–∞",
        additional_info= None
    )