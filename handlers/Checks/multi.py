from untils.Imports import *
from handlers.client.client import *
from .menu import check_router

@check_router.callback_query(F.data == 'multi_check')
async def create_multi_check(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_balance = await DB.get_user_balance(user_id)

    if user_balance < 1010:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit_menu'))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu'))
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º—É–ª—å—Ç–∏-—á–µ–∫–∞.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            reply_markup=builder.as_markup()
        )
        return

    await callback.message.edit_text(
        f"üìã <b>–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)</b>\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ (1000 MitCoin) –¥–ª—è –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ - {int((user_balance/1000) - ((user_balance/1000)/100))}", reply_markup=cancel_all_kb()
    )
    await state.set_state(checks.multi_check_quantity)
    await state.update_data(balance=user_balance)

@check_router.message(checks.multi_check_quantity)
async def handle_multi_check_quantity(message: types.Message, state: FSMContext):
    data = await state.get_data()
    balance = data.get('balance')
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0</b>, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=cancel_all_kb())
            return
        if quantity > balance // 1000:
            await message.answer(f"‚ùå <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MitCoin –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è {quantity} –∞–∫—Ç–∏–≤–∞—Ü–∏–π —á–µ–∫–∞.</b>\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", reply_markup=cancel_all_kb())
            return

        await message.answer(f"üíµ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É MitCoin –∑–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)</b>\n\n<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ - {int(balance//quantity - ((balance//quantity)//100))} MitCoin</i>", reply_markup=cancel_all_kb())
        await state.set_state(checks.multi_check_amount)
        await state.update_data(quantity=quantity)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π", reply_markup=cancel_all_kb())

@check_router.message(checks.multi_check_amount)
async def handle_multi_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    user_balance = await DB.get_user_balance(user_id)

    try:
        data = await state.get_data()
        quantity = data.get('quantity')

        amount_per_check = int(message.text)
        total_amount = quantity * amount_per_check

        if amount_per_check < 1000:
            await message.answer("‚ùå –°—É–º–º–∞ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1000 MitCoin –∏–ª–∏ –±–æ–ª—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_all_kb())
            return

        if total_amount > user_balance:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit_menu'))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu'))
            await message.answer(
                f"‚ùå <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ –Ω–∞ {quantity} –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏ —Å—É–º–º—ã –≤ {amount_per_check} MitCoin –∑–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é</b>\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance}\n–û–±—â–∞—è —Å—É–º–º–∞ —á–µ–∫–∞ - {total_amount} ",
                reply_markup=builder.as_markup()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —á–µ–∫–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(amount_per_check=amount_per_check, total_amount=total_amount)

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–î–∞", callback_data='enable_referral'))
        builder.add(InlineKeyboardButton(text="–ù–µ—Ç", callback_data='disable_referral'))
        await message.answer("üîó <b>–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–∫–∞?</b>", reply_markup=builder.as_markup())

    except ValueError:
        await message.answer("‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∑–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞</b>")

@check_router.callback_query(F.data == 'enable_referral')
async def enable_referral(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="25%", callback_data='referral_percent_25'))
    builder.add(InlineKeyboardButton(text="50%", callback_data='referral_percent_50'))
    builder.add(InlineKeyboardButton(text="75%", callback_data='referral_percent_75'))
    builder.add(InlineKeyboardButton(text="100%", callback_data='referral_percent_100'))
    await callback.message.edit_text("üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É–º–º—ã —á–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>", reply_markup=builder.as_markup())

@check_router.callback_query(F.data.startswith('referral_percent_'))
async def set_referral_percent(callback: types.CallbackQuery, state: FSMContext):
    percent = int(callback.data.split('_')[-1])
    await state.update_data(referral_percent=percent)

    await callback.message.answer(
        "üìä <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º:</b>",
        reply_markup=cancel_all_kb()
    )
    await state.set_state(checks.set_ref_fund)

@check_router.message(checks.set_ref_fund)
async def handle_set_ref_fund(message: types.Message, state: FSMContext, bot: Bot):
    try:
        ref_fund = int(message.text)
        if ref_fund < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_all_kb())
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —á–µ–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        quantity = data.get('quantity')
        amount_per_check = data.get('amount_per_check')
        total_amount = data.get('total_amount') 
        referral_percent = data.get('referral_percent')
        print(total_amount)
        total_amount = total_amount//quantity 
        print(total_amount)
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è
        total_deduction = total_amount * quantity + ( total_amount * (referral_percent / 100) * ref_fund ) 
        print(total_deduction) 
        print(f'{total_amount} * {quantity} + ( {total_amount} * ({referral_percent / 100}) * {ref_fund} ) = {total_deduction}')
        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞
        user_id = message.from_user.id
        user_balance = await DB.get_user_balance(user_id)
        if user_balance < total_deduction:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ —Å —É—á—ë—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞.", reply_markup=cancel_all_kb())
            return

        await DB.update_balance(user_id, balance=user_balance - total_deduction)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞
        uid = str(uuid.uuid4()) 
        await DB.create_check(
            uid=uid,
            user_id=user_id,
            type=2,
            sum=amount_per_check,
            amount=quantity,
            ref_bonus=referral_percent,
            ref_fund=ref_fund
        )

        check = await DB.get_check_by_uid(uid)
        check_id = check[0]
        bot_username = (await bot.get_me()).username
        check_link = f"https://t.me/{bot_username}?start=check_{uid}"

        add_button1 = InlineKeyboardButton(text="‚úà –û—Ç–ø—Ä–∞–≤–∏—Ç—å", switch_inline_query=check_link)
        add_button2 = InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data=f'check_{check_id}')
        add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='checks_menu')

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2], [add_button3]])
        await message.answer(
            f'''
üí∏ <b>–í–∞—à –º—É–ª—å—Ç–∏-—á–µ–∫ —Å–æ–∑–¥–∞–Ω:</b>

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {quantity}
–°—É–º–º–∞ –∑–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é: {amount_per_check} MitCoin
–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥: {ref_fund} –∞–∫—Ç–∏–≤–∞—Ü–∏–π

üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —á–µ–∫–∞: {total_amount} MitCoin
üíº –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {referral_percent}%

‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º—É-–ª–∏–±–æ —ç—Ç—É —Å—Å—ã–ª–∫—É –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –æ—Ç–≤–µ—Ç
<i>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</i>

<span class="tg-spoiler">{check_link}</span>
''',
            reply_markup=keyboard
        )
        await DB.add_transaction(
            user_id=user_id,
            amount=total_deduction,
            description="—Å–æ–∑–¥–∞–Ω–∏–µ —Å—É–ª—å—Ç–∏ —á–µ–∫–∞",
            additional_info= None
        )

        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=cancel_all_kb())

@check_router.callback_query(F.data == 'disable_referral')
async def disable_referral(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —á–µ–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    quantity = data.get('quantity')
    amount_per_check = data.get('amount_per_check')
    total_amount = quantity * amount_per_check
    print(f'{quantity} * {amount_per_check}')

    # –°–æ–∑–¥–∞–µ–º —á–µ–∫ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞
    uid = str(uuid.uuid4())
    await DB.create_check(
        uid=uid,
        user_id=callback.from_user.id,
        type=2,
        sum=amount_per_check,
        amount=quantity,
        ref_bonus=None,
        ref_fund=None
    )
    await DB.update_balance(callback.from_user.id, balance=await DB.get_user_balance(callback.from_user.id) - total_amount)

    bot_username = (await bot.get_me()).username
    check_link = f"https://t.me/{bot_username}?start=check_{uid}"
    add_button1 = InlineKeyboardButton(text="‚úà –û—Ç–ø—Ä–∞–≤–∏—Ç—å", switch_inline_query=check_link)
    add_button2 = InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data=f'check_{uid}')
    add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='checks_menu')

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2], [add_button3]])
    await callback.message.answer(
            f'''
üí∏ <b>–í–∞—à –º—É–ª—å—Ç–∏-—á–µ–∫ —Å–æ–∑–¥–∞–Ω:</b>

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {quantity}
–°—É–º–º–∞ –∑–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é: {amount_per_check} MitCoin
–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —á–µ–∫–∞: {total_amount} MitCoin
üíº –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º—É-–ª–∏–±–æ —ç—Ç—É —Å—Å—ã–ª–∫—É –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –æ—Ç–≤–µ—Ç
<i>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</i>

<span class="tg-spoiler">{check_link}</span>
''',        reply_markup=keyboard  # Pass the keyboard object directly, without calling it
    )
    await DB.add_transaction(
        user_id=callback.from_user.id,
        amount=total_amount,
        description="—Å–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏ —á–µ–∫–∞",
        additional_info= None
    )
    await state.clear()

@check_router.callback_query(F.data.startswith('refill_ref_fund_'))
async def refill_ref_fund(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞.
    """
    check_id = int(callback.data.split('_')[-1])  # –ü–æ–ª—É—á–∞–µ–º ID —á–µ–∫–∞ –∏–∑ callback_data
    await state.update_data(check_id=check_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–µ–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    await callback.message.answer(
        "üíµ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞:</b>",
        reply_markup=cancel_all_kb()
    )
    await state.set_state(checks.refill_ref_fund)

@check_router.message(checks.refill_ref_fund)
async def handle_refill_ref_fund(message: types.Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥.
    """
    try:
        ref_fund = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        if ref_fund <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", reply_markup=cancel_all_kb())
            return

        data = await state.get_data()
        check_id = data.get('check_id')  # –ü–æ–ª—É—á–∞–µ–º ID —á–µ–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥
        check = await DB.get_check_by_id(check_id)
        current_ref_fund = check[12]  # ref_fund –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 12-–π –∫–æ–ª–æ–Ω–∫–µ

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥
        new_ref_fund = current_ref_fund + ref_fund
        check_summa = check[4]
        total_amount = ref_fund * check_summa  
        balance = await DB.get_user_balance(message.from_user.id)
        await DB.add_balance(message.from_user.id, balance - total_amount)
        await DB.update_check2(check_id, ref_fund=new_ref_fund) 
        user_id = message.from_user.id
        

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
        await message.answer(
            f"‚úÖ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {ref_fund} –∞–∫—Ç–∏–≤–∞—Ü–∏–π.</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ {new_ref_fund} –∞–∫—Ç–∏–≤–∞—Ü–∏–π.",
            reply_markup=back_menu_kb(user_id)
        )

        await DB.add_transaction(
            user_id=message.from_user.id,
            amount=total_amount, 
            description="–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ñ —Ñ–æ–Ω–¥–∞",
            additional_info= None
        )


        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=cancel_all_kb())