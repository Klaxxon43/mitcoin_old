# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os, asyncio, logging, random, uuid, sys, traceback, time, emoji, math
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple
import pytz, requests
from aiocryptopay import AioCryptoPay, Networks
from cachetools import TTLCache

# Aiogram –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from aiogram import Bot, F, types, Router, Dispatcher
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import (
    InlineQueryResultArticle, InputTextMessageContent,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, InputMediaPhoto, ChatMemberUpdated,
    ContentType, LabeledPrice, PreCheckoutQuery,
    BufferedInputFile, Chat
)

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from datebase.db import DB, Promo
from untils.kb import (
    menu_kb, back_menu_kb, profile_kb, pr_menu_kb,
    pr_menu_canc, work_menu_kb, back_work_menu_kb,
    back_profile_kb, select_deposit_menu_kb,
    back_dep_kb, cancel_all_kb
)
from config import CRYPTOBOT_TOKEN, ADMINS_ID, BotsAPI
from threading import Lock


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bots = Router()

task_cache = {}
task_cache_chat = {}

CHECK_CHAT_ID = -4792065005  # ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π
DB_CHAT_ID = -4683486408
INFO_ID = -4784146602
TASKS_CHAT_ID = -1002291978719
REPORT_CHAT_ID = -1002291978719

MOSCOW_TZ = pytz.timezone("Europe/Moscow")

# –î–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
PREMIUM_SERVICES = {
    "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏": 31388,
    "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏+": 32281,
    "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": 31621,
    "–û–ø—Ä–æ—Å—ã": 787,
    "–ë–æ—Ç—ã": 26716
}

REACTION_SERVICES = {
    "üî•": 31910,
    "üëç ‚ù§Ô∏è üî• üéâ": 31163,
    "ü§©": 32038,
    "üëç": 32023,
    "üí© ü§°": 722,
    "ü§Æ üò≠": 734,
    "üëé üíî": 27497,
    "ü§¨": 32053
}

SERVICE_DESCRIPTIONS = {
    31388: """
üìå –£—Å–ª—É–≥–∞ #31388
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ [–ö–∞–Ω–∞–ª/–ì—Ä—É–ø–ø–∞ | –î–µ—à–µ–≤—ã–µ
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 60 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 10 - 50000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò:https://t.me/***–°—Ç–∞—Ä—Ç: 0-1 —á–∞—Å. –°–∫–æ—Ä–æ—Å—Ç—å: 3000-4000 –≤ –¥–µ–Ω—å. –°–ø–∏—Å–∞–Ω–∏—è: –í–æ–∑–º–æ–∂–Ω—ã. –ú—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–ø–∞–¥–µ—Ç –Ω–∏–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ.
–ù–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –ø—É—Å—Ç—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑-–∑–∞ —Ä–∏—Å–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–Ω–∞.
""",
    32281: """
üìå –£—Å–ª—É–≥–∞ #32281
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ [–ö–∞–Ω–∞–ª/–ì—Ä—É–ø–ø–∞ | –ë–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 150 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 1 - 50000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò: https://t.me/***
–°—Ç–∞—Ä—Ç: 0-1 —á–∞—Å
–°–∫–æ—Ä–æ—Å—Ç—å: 50 —Ç—ã—Å—è—á –≤ –¥–µ–Ω—å
–ö–∞—á–µ—Å—Ç–≤–æ: –í—ã—Å–æ–∫–æ–µ
–ì–ï–û: –ú–∏–∫—Å
–°–ø–∏—Å–∞–Ω–∏—è: –ù–µ—Ç
–ó–∞–∫–∞–∑—ã –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã
–î–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.–ú—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–ø–∞–¥–µ—Ç –Ω–∏–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ.
–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –º–æ–≥—É –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–æ 3 —á–∞—Å–æ–≤
""",
    31621: """
üìå –£—Å–ª—É–≥–∞ #31621
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –ü—Ä–æ—Å–º–æ—Ç—Ä—ã [–ü–æ—Å—Ç]
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 5 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 10 - 10000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò: https://t.me/***/123
–°—Ç–∞—Ä—Ç: 0-1 —á–∞—Å
–°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 10 —Ç—ã—Å—è—á –≤ –¥–µ–Ω—å
–ì–ï–û: –ú–∏–∫—Å
–°–ø–∏—Å–∞–Ω–∏—è: –ù–µ—Ç
""",
    787: """
üìå –£—Å–ª—É–≥–∞ #787
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –ù–∞–∫—Ä—É—Ç–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ [–ö–∞–Ω–∞–ª]
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 50 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 1 - 10000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò: https://t.me/***
–°—Ç–∞—Ä—Ç: 0-1 —á–∞—Å
–°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 100 —Ç—ã—Å—è—á –≤ –¥–µ–Ω—å
–°–ø–∏—Å–∞–Ω–∏—è: –ù–µ—Ç
–ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç
–ì–ï–û: –ú–∏–∫—Å
–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤. –ï—Å–ª–∏, —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –Ω–∞ –æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç –≤ –ª—é–±–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ —É–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª.
""",
    26716: """
üìå –£—Å–ª—É–≥–∞ #26716
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –ë–æ—Ç –°—Ç–∞—Ä—Ç [–ë—ã—Å—Ç—Ä—ã–µ]
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 100 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 100 - 1000000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò: https://t.me/name_bot
–°—Ç–∞—Ä—Ç: 0-1 —á–∞—Å
–°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 10000 –≤ –¥–µ–Ω—å
–°–ø–∏—Å–∞–Ω–∏—è: –í–æ–∑–º–æ–∂–Ω–æ
–ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç
–°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /Start.
""",
    # –†–µ–∞–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ–ø–∏—Å–∞–Ω–∏—è
    31910: """
üìå –£—Å–ª—É–≥–∞ #31910
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –†–µ–∞–∫—Ü–∏–∏ [üî• | 1 –ü–æ—Å—Ç]
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 1 - 100000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò: https://t.me/***
–°—Ç–∞—Ä—Ç: 0-2 —á–∞—Å–∞
–°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 10000 –≤ –¥–µ–Ω—å
–ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç
–°–ø–∏—Å–∞–Ω–∏—è: –í–æ–∑–º–æ–∂–Ω—ã
–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º
–†–µ–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.
"""
}

# –î–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —à–∞–±–ª–æ–Ω, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏ ID
for reaction_id in [31163, 32038, 32023, 722, 734, 27497, 32053]:
    SERVICE_DESCRIPTIONS[reaction_id] = SERVICE_DESCRIPTIONS[31910].replace("üî•", list(REACTION_SERVICES.keys())[list(REACTION_SERVICES.values()).index(reaction_id)])


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
SERVICES_CACHE = {
    'premium': None,
    'reactions': None,
    'last_updated': None
}

async def update_services_cache():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    global SERVICES_CACHE
    
    premium_services = {}
    reaction_services = {}
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for service_id in PREMIUM_SERVICES.values():
            tasks.append(BotsAPI.get_service(service_id))
        for service_id in REACTION_SERVICES.values():
            tasks.append(BotsAPI.get_service(service_id))
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, service_id in enumerate(list(PREMIUM_SERVICES.values()) + list(REACTION_SERVICES.values())):
            if i < len(results) and not isinstance(results[i], Exception):
                service = results[i]
                if service_id in PREMIUM_SERVICES.values():
                    premium_services[service_id] = service
                else:
                    reaction_services[service_id] = service
    
        SERVICES_CACHE = {
            'premium': premium_services,
            'reactions': reaction_services,
            'last_updated': time.time()
        }
    except Exception as e:
        logger.error(f"Error updating services cache: {e}")

@bots.callback_query(F.data == "bots_menu")
async def show_bots_menu(callback: types.CallbackQuery, state: FSMContext):
    # –°–Ω–∞—á–∞–ª–∞ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É—Å–ª—É–≥ (–∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –µ—Å—Ç—å)
    if SERVICES_CACHE['premium']:
        for service_name, service_id in PREMIUM_SERVICES.items():
            if service_id in SERVICES_CACHE['premium']:
                builder.button(text=service_name, callback_data=f"bots_srv_{service_id}")
    else:
        # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        for service_name in PREMIUM_SERVICES:
            builder.button(text=service_name, callback_data=f"bots_srv_{PREMIUM_SERVICES[service_name]}")
    
    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
    builder.button(text="–†–µ–∞–∫—Ü–∏–∏", callback_data="bots_reactions")
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='back_menu')
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üõí <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:</b>",
        reply_markup=builder.as_markup()
    )
    
    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    need_update = (
        SERVICES_CACHE['last_updated'] is None or 
        (time.time() - SERVICES_CACHE['last_updated']) > 300
    )
    
    if need_update:
        asyncio.create_task(update_services_cache())

@bots.callback_query(F.data == "bots_reactions")
async def show_reactions_menu(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if SERVICES_CACHE['reactions']:
        for emoji_text, service_id in REACTION_SERVICES.items():
            if service_id in SERVICES_CACHE['reactions']:
                builder.button(text=emoji_text, callback_data=f"bots_srv_{service_id}")
    else:
        for emoji_text in REACTION_SERVICES:
            builder.button(text=emoji_text, callback_data=f"bots_srv_{REACTION_SERVICES[emoji_text]}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="bots_back_to_main")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "üé≠ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–π:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@bots.callback_query(F.data.startswith("bots_srv_"))
async def show_service_details(callback: types.CallbackQuery):
    service_id = int(callback.data.replace("bots_srv_", ""))
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
    service = None
    if service_id in PREMIUM_SERVICES.values() and SERVICES_CACHE['premium']:
        service = SERVICES_CACHE['premium'].get(service_id)
    elif service_id in REACTION_SERVICES.values() and SERVICES_CACHE['reactions']:
        service = SERVICES_CACHE['reactions'].get(service_id)
    
    # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ API
    if not service:
        try:
            service = await BotsAPI.get_service(service_id)
        except Exception as e:
            logger.error(f"Error getting service {service_id}: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥–∏")
            return
    
    if not service:
        await callback.answer("‚ö†Ô∏è –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    description = SERVICE_DESCRIPTIONS.get(service_id, f"""
üìå –£—Å–ª—É–≥–∞ #{service['service']}
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {service['name']}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {service['rate']} –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
üìä –õ–∏–º–∏—Ç—ã: {service['min']} - {service['max']}
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {'–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ' if not service['dripfeed'] else '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ'}
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: {'–ï—Å—Ç—å' if service['refill'] else '–ù–µ—Ç'}
""")
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{service_id}")
    
    if service_id in REACTION_SERVICES.values():
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="bots_reactions")
    else:
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="bots_back_to_main")
    
    builder.adjust(2)
    
    await callback.message.edit_text(
        description,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bots.callback_query(F.data == "bots_back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    await show_bots_menu(callback, None)
    await callback.answer()

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderStates(StatesGroup):
    AWAITING_LINK = State()
    AWAITING_QUANTITY = State()
    VIEW_ORDERS = State()

# –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏
@bots.callback_query(F.data.startswith("buy_"))
async def start_order_process(callback: types.CallbackQuery, state: FSMContext):
    service_id = int(callback.data.replace("buy_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
    service = await BotsAPI.get_service(service_id)
    if not service:
        await callback.answer("‚ö†Ô∏è –£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    await state.update_data(
        service_id=service_id,
        service_name=service['name'],
        min_quantity=int(service['min']),
        max_quantity=int(service['max']),
        rate=float(service['rate'])
    )
    
    await callback.message.edit_text(
        "üîó <b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª/–ø–æ—Å—Ç:</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –î–ª—è –∫–∞–Ω–∞–ª–∞: https://t.me/channel_name\n"
        "‚Ä¢ –î–ª—è –ø–æ—Å—Ç–∞: https://t.me/channel_name/123",
        parse_mode="HTML"
    )
    
    await state.set_state(OrderStates.AWAITING_LINK)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
@bots.message(OrderStates.AWAITING_LINK)
async def process_link(message: types.Message, state: FSMContext):
    link = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    if not link.startswith(('https://t.me/', 't.me/')):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/...")
        return
    
    await state.update_data(link=link)
    
    data = await state.get_data()
    await message.answer(
        f"üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>\n\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: {data['min_quantity']}\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {data['max_quantity']}\n"
        f"‚Ä¢ –¶–µ–Ω–∞ –∑–∞ 1000: {data['rate']} —Ä—É–±.",
        parse_mode="HTML"
    )
    
    await state.set_state(OrderStates.AWAITING_QUANTITY)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@bots.message(OrderStates.AWAITING_QUANTITY)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    data = await state.get_data()
    
    if quantity < data['min_quantity'] or quantity > data['max_quantity']:
        await message.answer(
            f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {data['min_quantity']} –¥–æ {data['max_quantity']}"
        )
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    cost = round(quantity * data['rate'] / 1000, 2)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
    builder.adjust(2)
    
    await state.update_data(quantity=quantity, cost=cost)
    
    await message.answer(
        f"üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:</b>\n\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {data['service_name']}\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∞: {data['link']}\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} —Ä—É–±.\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑ –Ω–∞—á–Ω–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
@bots.callback_query(F.data == "cancel_order", OrderStates.AWAITING_QUANTITY)
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders
@bots.message(Command("orders"))
async def show_orders(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_orders = await DB.get_user_orders(message.from_user.id)
    
    if not user_orders:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return
    
    builder = InlineKeyboardBuilder()
    for order in user_orders[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ–∫–∞–∑ 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
        builder.button(
            text=f"–ó–∞–∫–∞–∑ #{order['order_id']} - {order['status']}",
            callback_data=f"view_order_{order['order_id']}"
        )
    
    builder.adjust(1)
    await message.answer(
        "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(OrderStates.VIEW_ORDERS)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞
@bots.callback_query(F.data.startswith("view_order_"), OrderStates.VIEW_ORDERS)
async def view_order(callback: types.CallbackQuery):
    order_id = int(callback.data.replace("view_order_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
    order = await DB.get_order(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ API
    status_data = await BotsAPI.get_order_status(order_id)
    
    if status_data and isinstance(status_data, dict) and 'status' in status_data:
        current_status = status_data['status']
        remains = status_data.get('remains', 'N/A')
        charge = status_data.get('charge', 'N/A')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await DB.update_order_status(order_id, current_status)
    else:
        current_status = order['status']
        remains = 'N/A'
        charge = 'N/A'
    
    service = await BotsAPI.get_service(order['service_id'])
    service_name = service['name'] if service else f"–£—Å–ª—É–≥–∞ #{order['service_id']}"
    
    text = (
        f"üìÑ <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {service_name}\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∞: {order['link']}\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order['cost']} —Ä—É–±.\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {current_status.upper()}\n"
        f"–î–∞—Ç–∞: {order['created_at']}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"refresh_order_{order_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_orders")
    builder.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
@bots.callback_query(F.data.startswith("refresh_order_"))
async def refresh_order_status(callback: types.CallbackQuery):
    order_id = int(callback.data.replace("refresh_order_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    status_data = await BotsAPI.get_order_status(order_id)
    
    if not status_data or 'status' not in status_data:
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await DB.update_order_status(order_id, status_data['status'])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order = await DB.get_order(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    service = await BotsAPI.get_service(order['service_id'])
    service_name = service['name'] if service else f"–£—Å–ª—É–≥–∞ #{order['service_id']}"
    
    text = (
        f"üìÑ <b>–ó–∞–∫–∞–∑ #{order_id}</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)\n\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {service_name}\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∞: {order['link']}\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order['cost']} —Ä—É–±.\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_data['status'].upper()}\n"
        f"–î–∞—Ç–∞: {order['created_at']}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"refresh_order_{order_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_orders")
    builder.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
@bots.callback_query(F.data == "back_to_orders")
async def back_to_orders_list(callback: types.CallbackQuery, state: FSMContext):
    await show_orders(callback.message, state)
    await callback.answer()

# –û–±–Ω–æ–≤–∏–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
@bots.callback_query(F.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ API
    order_result = await BotsAPI.create_order(
        service_id=data['service_id'],
        link=data['link'],
        quantity=data['quantity']
    )
    
    if not order_result or 'order' not in order_result:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    order_id = order_result['order']
    await DB.add_order(
        user_id=callback.from_user.id,
        order_id=order_id,
        service_id=data['service_id'],
        link=data['link'],
        quantity=data['quantity'],
        cost=data['cost'],
        status='pending'  # –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    service = await BotsAPI.get_service(data['service_id'])
    service_name = service['name'] if service else f"–£—Å–ª—É–≥–∞ #{data['service_id']}"
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {service_name}\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∞: {data['link']}\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['cost']} —Ä—É–±.\n\n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /orders",
        parse_mode="HTML"
    )
    
    await state.clear()
    await callback.answer()
    