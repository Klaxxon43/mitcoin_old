from utils.Imports import *
from threading import Lock
import string

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bots = Router()

task_cache = {}
task_cache_chat = {}

PRICE_MARKUP = 3  # 30% –Ω–∞—Ü–µ–Ω–∫–∞


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def generate_unique_code(length=8):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

async def check_ton_payment(expected_amount_nano: str, comment: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–µ—Ç–∏ TON —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
    print(f"\nüîç Starting TON payment check for amount: {expected_amount_nano}, comment: '{comment}'")
    
    try:
        response = requests.get(
            f"{TON_API_BASE}getTransactions",
            params={
                'address': TON_WALLET,
                'limit': 100,
                'api_key': TON_API_TOKEN,
                'archival': True
            },
            timeout=10
        )
        
        data = response.json()
        if not data.get('ok', False):
            return False

        expected = int(expected_amount_nano)
        tolerance = 1000000  # –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ¬±0.001 TON (1,000,000 –Ω–∞–Ω–æ—Ç–æ–Ω–æ–≤)
        
        for tx in data.get('result', []):
            in_msg = tx.get('in_msg', {})
            tx_value = int(in_msg.get('value', 0))
            tx_comment = in_msg.get('message', '').strip()
            
            print(f"Checking: {tx_value} vs {expected} (¬±{tolerance}), comment: '{tx_comment}'")
            
            if (abs(tx_value - expected) <= tolerance and 
                tx_comment == comment.strip()):
                return True

        return False
    except Exception as e:
        print(f"TON payment check error: {e}")
        return False

PREMIUM_SERVICES = {
    "‚ûï –ü–æ–¥–ø–∏—Å—á–∏–∫–∏": 31388,
    "‚ûï –ü–æ–¥–ø–∏—Å—á–∏–∫–∏+": 32281,
    "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã": 31621,
    "üìä –û–ø—Ä–æ—Å—ã": 787,
    "ü§ñ –ë–æ—Ç—ã": 26716
} 

REACTION_SERVICES = {
    "üî•": 31910,
    "üëç ‚ù§Ô∏è üî• üéâ": 31163,
    "ü§©": 32038,
    "üëç": 32023,
    "üí© ü§°": 722,
    "ü§Æ üò≠": 734,
    "üëé üíî": 27497,
    "ü§¨": 32053
}

SERVICE_DESCRIPTIONS = {
    31388: """
üìå –£—Å–ª—É–≥–∞ #31388
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ [–ö–∞–Ω–∞–ª/–ì—Ä—É–ø–ø–∞ | –î–µ—à–µ–≤—ã–µ
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 60 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 10 - 50000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò:https://t.me/***–°—Ç–∞—Ä—Ç: 0-1 —á–∞—Å. –°–∫–æ—Ä–æ—Å—Ç—å: 3000-4000 –≤ –¥–µ–Ω—å. –°–ø–∏—Å–∞–Ω–∏—è: –í–æ–∑–º–æ–∂–Ω—ã. –ú—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–ø–∞–¥–µ—Ç –Ω–∏–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ.
–ù–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –ø—É—Å—Ç—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑-–∑–∞ —Ä–∏—Å–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–Ω–∞.
""",
    32281: """
üìå –£—Å–ª—É–≥–∞ #32281
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ [–ö–∞–Ω–∞–ª/–ì—Ä—É–ø–ø–∞ | –ë–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 150 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 1 - 50000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò: https://t.me/***
–°—Ç–∞—Ä—Ç: 0-1 —á–∞—Å
–°–∫–æ—Ä–æ—Å—Ç—å: 50 —Ç—ã—Å—è—á –≤ –¥–µ–Ω—å
–ö–∞—á–µ—Å—Ç–≤–æ: –í—ã—Å–æ–∫–æ–µ
–ì–ï–û: –ú–∏–∫—Å
–°–ø–∏—Å–∞–Ω–∏—è: –ù–µ—Ç
–ó–∞–∫–∞–∑—ã –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã
–î–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.–ú—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–ø–∞–¥–µ—Ç –Ω–∏–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ.
–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –º–æ–≥—É –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–æ 3 —á–∞—Å–æ–≤
""",
    31621: """
üìå –£—Å–ª—É–≥–∞ #31621
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –ü—Ä–æ—Å–º–æ—Ç—Ä—ã [–ü–æ—Å—Ç]
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 5 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 10 - 10000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò: https://t.me/***/123
–°—Ç–∞—Ä—Ç: 0-1 —á–∞—Å
–°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 10 —Ç—ã—Å—è—á –≤ –¥–µ–Ω—å
–ì–ï–û: –ú–∏–∫—Å
–°–ø–∏—Å–∞–Ω–∏—è: –ù–µ—Ç
""",
    787: """
üìå –£—Å–ª—É–≥–∞ #787
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –ù–∞–∫—Ä—É—Ç–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ [–ö–∞–Ω–∞–ª]
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 50 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 1 - 10000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò: https://t.me/***
–°—Ç–∞—Ä—Ç: 0-1 —á–∞—Å
–°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 100 —Ç—ã—Å—è—á –≤ –¥–µ–Ω—å
–°–ø–∏—Å–∞–Ω–∏—è: –ù–µ—Ç
–ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç
–ì–ï–û: –ú–∏–∫—Å
–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤. –ï—Å–ª–∏, —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –Ω–∞ –æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç –≤ –ª—é–±–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ —É–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª.
""",
    26716: """
üìå –£—Å–ª—É–≥–∞ #26716
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –ë–æ—Ç –°—Ç–∞—Ä—Ç [–ë—ã—Å—Ç—Ä—ã–µ]
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 100 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 100 - 1000000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò: https://t.me/name_bot
–°—Ç–∞—Ä—Ç: 0-1 —á–∞—Å
–°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 10000 –≤ –¥–µ–Ω—å
–°–ø–∏—Å–∞–Ω–∏—è: –í–æ–∑–º–æ–∂–Ω–æ
–ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç
–°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /Start.
""",
    # –†–µ–∞–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ–ø–∏—Å–∞–Ω–∏—è
    31910: """
üìå –£—Å–ª—É–≥–∞ #31910
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: TG –†–µ–∞–∫—Ü–∏–∏ [üî• | 1 –ü–æ—Å—Ç]
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10 —Ä—É–±–ª–µ–π –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: 1 - 100000
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–ü–†–ò–ú–ï–† –°–°–´–õ–ö–ò: https://t.me/***
–°—Ç–∞—Ä—Ç: 0-2 —á–∞—Å–∞
–°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 10000 –≤ –¥–µ–Ω—å
–ì–∞—Ä–∞–Ω—Ç–∏—è: –ù–µ—Ç
–°–ø–∏—Å–∞–Ω–∏—è: –í–æ–∑–º–æ–∂–Ω—ã
–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º
–†–µ–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.
"""
}

# –î–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —à–∞–±–ª–æ–Ω, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏ ID
for reaction_id in [31163, 32038, 32023, 722, 734, 27497, 32053]:
    SERVICE_DESCRIPTIONS[reaction_id] = SERVICE_DESCRIPTIONS[31910].replace("üî•", list(REACTION_SERVICES.keys())[list(REACTION_SERVICES.values()).index(reaction_id)])


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
SERVICES_CACHE = {
    'premium': None,
    'reactions': None,
    'last_updated': None
}

async def update_services_cache():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    global SERVICES_CACHE
    
    premium_services = {}
    reaction_services = {}
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for service_id in PREMIUM_SERVICES.values():
            tasks.append(BotsAPI.get_service(service_id))
        for service_id in REACTION_SERVICES.values():
            tasks.append(BotsAPI.get_service(service_id))
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, service_id in enumerate(list(PREMIUM_SERVICES.values()) + list(REACTION_SERVICES.values())):
            if i < len(results) and not isinstance(results[i], Exception):
                service = results[i]
                if service_id in PREMIUM_SERVICES.values():
                    premium_services[service_id] = service
                else:
                    reaction_services[service_id] = service
    
        SERVICES_CACHE = {
            'premium': premium_services,
            'reactions': reaction_services,
            'last_updated': time.time()
        }
    except Exception as e:
        logger.error(f"Error updating services cache: {e}")

@bots.callback_query(F.data == "bots_menu")
async def show_bots_menu(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    from handlers.client.client import check_subs_op
    if not await check_subs_op(user_id, bot):
        return
    
    if await DB.get_break_status() and user_id not in ADMINS_ID:
        await callback.message.answer('üõ†–ò–¥—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤üõ†\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ')
        return
    
    # –°–Ω–∞—á–∞–ª–∞ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É—Å–ª—É–≥ (–∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –µ—Å—Ç—å)
    if SERVICES_CACHE['premium']:
        for service_name, service_id in PREMIUM_SERVICES.items():
            if service_id in SERVICES_CACHE['premium']:
                builder.button(text=service_name, callback_data=f"bots_srv_{service_id}")
    else:
        # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        for service_name in PREMIUM_SERVICES:
            builder.button(text=service_name, callback_data=f"bots_srv_{PREMIUM_SERVICES[service_name]}")
    
    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
    builder.button(text="‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏", callback_data="bots_reactions")
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='pr_menu')
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üõí <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:</b>",
        reply_markup=builder.as_markup()
    )
    
    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    need_update = (
        SERVICES_CACHE['last_updated'] is None or 
        (time.time() - SERVICES_CACHE['last_updated']) > 300
    )
    
    if need_update:
        asyncio.create_task(update_services_cache())

@bots.callback_query(F.data == "bots_reactions")
async def show_reactions_menu(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if SERVICES_CACHE['reactions']:
        for emoji_text, service_id in REACTION_SERVICES.items():
            if service_id in SERVICES_CACHE['reactions']:
                builder.button(text=emoji_text, callback_data=f"bots_srv_{service_id}")
    else:
        for emoji_text in REACTION_SERVICES:
            builder.button(text=emoji_text, callback_data=f"bots_srv_{REACTION_SERVICES[emoji_text]}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="bots_back_to_main")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "üé≠ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–π:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


# –î–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderStates(StatesGroup):
    AWAITING_LINK = State()
    AWAITING_QUANTITY = State()
    VIEW_ORDERS = State()
    PAYMENT_METHOD = State()
    AWAITING_PAYMENT = State()

@bots.callback_query(F.data.startswith("bots_srv_"))
async def show_service_details(callback: types.CallbackQuery):
    service_id = int(callback.data.replace("bots_srv_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
    service = await BotsAPI.get_service(service_id)
    if not service:
        await callback.answer("‚ö†Ô∏è –£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ SERVICE_DESCRIPTIONS
    service_description = SERVICE_DESCRIPTIONS.get(service_id, "")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    price_line = next((line for line in service_description.split('\n') if line.startswith('üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:')), None)
    marked_up_price = float(price_line.split(': ')[1].split(' —Ä—É–±')[0]) if price_line else float(service['rate']) * PRICE_MARKUP
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ SERVICE_DESCRIPTIONS –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
    if service_description:
        description = service_description
    else:
        description = f"""
üìå –£—Å–ª—É–≥–∞ #{service['service']}
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {service['name']}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {marked_up_price:.2f} —Ä—É–±. –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü
üìä –õ–∏–º–∏—Ç—ã: {service['min']} - {service['max']}
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {'–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ' if not service['dripfeed'] else '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ'}
üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: {'–ï—Å—Ç—å' if service['refill'] else '–ù–µ—Ç'}
""".strip()
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{service_id}")
    
    if service_id in REACTION_SERVICES.values():
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="bots_reactions")
    else:
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="bots_back_to_main")
    
    builder.adjust(2)
    
    await callback.message.edit_text(
        description,
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@bots.callback_query(F.data.startswith("buy_"))
async def start_order_process(callback: types.CallbackQuery, state: FSMContext):
    service_id = int(callback.data.replace("buy_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
    service = await BotsAPI.get_service(service_id)
    if not service:
        await callback.answer("‚ö†Ô∏è –£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ SERVICE_DESCRIPTIONS
    service_description = SERVICE_DESCRIPTIONS.get(service_id, "")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    price_line = next((line for line in service_description.split('\n') if line.startswith('üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:')), None)
    marked_up_rate = float(price_line.split(': ')[1].split(' —Ä—É–±')[0]) if price_line else float(service['rate']) * PRICE_MARKUP
    
    await state.update_data(
        service_id=service_id,
        service_name=service['name'],
        min_quantity=int(service['min']),
        max_quantity=int(service['max']),
        original_rate=float(service['rate']),  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ 1000
        marked_up_rate=marked_up_rate  # –¶–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π –∑–∞ 1000 –∏–∑ SERVICE_DESCRIPTIONS
    )
    
    await callback.message.edit_text(
        "üîó <b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª/–ø–æ—Å—Ç:</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –î–ª—è –∫–∞–Ω–∞–ª–∞: https://t.me/channel_name\n"
        "‚Ä¢ –î–ª—è –ø–æ—Å—Ç–∞: https://t.me/channel_name/123",
        parse_mode="HTML"
    )
    
    await state.set_state(OrderStates.AWAITING_LINK)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
@bots.message(OrderStates.AWAITING_LINK)
async def process_link(message: types.Message, state: FSMContext):
    link = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    if not link.startswith(('https://t.me/', 't.me/')):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/...")
        return
    
    await state.update_data(link=link)
    
    data = await state.get_data()
    await message.answer(
        f"üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>\n\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: {data['min_quantity']}\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {data['max_quantity']}\n"
        f"‚Ä¢ –¶–µ–Ω–∞ –∑–∞ 1000: {data['marked_up_rate']} —Ä—É–±.",
        parse_mode="HTML"
    )
    
    await state.set_state(OrderStates.AWAITING_QUANTITY)

@bots.message(OrderStates.AWAITING_QUANTITY)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    data = await state.get_data()
    
    if quantity < data['min_quantity'] or quantity > data['max_quantity']:
        await message.answer(
            f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {data['min_quantity']} –¥–æ {data['max_quantity']}"
        )
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
    cost = round(quantity * data['marked_up_rate'] / 1000, 2)
    original_cost = round(quantity * data['original_rate'] / 1000, 2)
    profit = cost - original_cost
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
    builder.adjust(2)
    
    await state.update_data(quantity=quantity, cost=cost, profit=profit)
    
    await message.answer(
        f"üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:</b>\n\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {data['service_name']}\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∞: {data['link']}\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        f"‚Ä¢ –¶–µ–Ω–∞ –∑–∞ 1000: {data['marked_up_rate']:.2f} —Ä—É–±.\n"
        # f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å —Å –ø—Ä–æ–¥–∞–∂–∏: {profit:.2f} —Ä—É–±.\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.2f} —Ä—É–±.\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑ –Ω–∞—á–Ω–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
@bots.callback_query(F.data == "cancel_order", OrderStates.AWAITING_QUANTITY)
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='bots_menu')
    await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", kb.as_markup())
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@bots.callback_query(F.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    builder = InlineKeyboardBuilder()
    # builder.button(text="üí≥ CryptoBot (USDT)", callback_data="pay_cryptobot")
    # builder.button(text="üíé TON", callback_data="bots_pay_ton")
    builder.button(text="üíé –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞", callback_data="bot_pay_from_balance")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_order_confirmation")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>\n\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data['cost']} —Ä—É–±.",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(OrderStates.PAYMENT_METHOD)
    await callback.answer()


@bots.callback_query(F.data == "bot_pay_from_balance", OrderStates.PAYMENT_METHOD)
async def bot_pay_from_balance(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id 
    data = await state.get_data()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
    marked_up_cost = data['cost']  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
    original_cost = (data['original_rate'] * data['quantity']) / 1000  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ
    profit = marked_up_cost - original_cost  # –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å
    
    user_balance = await DB.get_user_rub_balance(user_id)
    
    if user_balance < marked_up_cost:
        btn = InlineKeyboardBuilder()
        btn.button(text='üí∏ –ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é', callback_data='select_deposit_menu')
        btn.button(text='üîô –í –º–µ–Ω—é', callback_data='back_menu')
        await callback.message.edit_text(
            f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥–∏ ‚ùå\n'
            f'üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è: {marked_up_cost:.2f} —Ä—É–±.\n'
            f'üí≥ –ù–∞ –±–∞–ª–∞–Ω—Å–µ: {user_balance:.2f} —Ä—É–±.\n'
            f'–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞!', 
            reply_markup=btn.as_markup()
        )
        await callback.answer()
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ (—É–∂–µ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π)
    await DB.add_rub_balance(user_id, -marked_up_cost)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order_result = await BotsAPI.create_order(
        service_id=data['service_id'],
        link=data['link'],
        quantity=data['quantity']
    )
    
    if not order_result or 'order' not in order_result:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await DB.add_rub_balance(user_id, marked_up_cost)
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        await callback.answer()
        return
    
    order_id = order_result['order']
    await DB.add_order(
        user_id=user_id,
        order_id=order_id,
        service_id=data['service_id'],
        link=data['link'],
        quantity=data['quantity'],
        cost=marked_up_cost,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
        status='pending',
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
    service = await BotsAPI.get_service(data['service_id'])
    service_name = service['name'] if service else f"–£—Å–ª—É–≥–∞ #{data['service_id']}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    admin_message = (
        f"üí∞ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '–Ω–µ—Ç'} (ID: {user_id})\n"
        f"üìå –£—Å–ª—É–≥–∞: {service_name}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {data['link']}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"üíµ –¶–µ–Ω–∞ –∏–∑ API: {original_cost:.2f} —Ä—É–±.\n"
        f"üí∞ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {marked_up_cost:.2f} —Ä—É–±.\n"
        f"üí∏ –ü—Ä–∏–±—ã–ª—å: {profit:.2f} —Ä—É–±.\n"
    )
    
    for admin_id in ADMINS_ID:
        try:
            await callback.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {service_name}\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∞: {data['link']}\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {marked_up_cost:.2f} —Ä—É–±.\n\n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /orders",
        parse_mode="HTML"
    )
    
    await state.clear()

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
# @bots.callback_query(F.data == "back_to_order_confirmation", OrderStates.PAYMENT_METHOD)
# async def back_to_order_confirmation(callback: types.CallbackQuery, state: FSMContext):
#     data = await state.get_data()
    
#     builder = InlineKeyboardBuilder()
#     builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")
#     builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
#     builder.adjust(2)
    
#     await callback.message.edit_text(
#         f"üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:</b>\n\n"
#         f"‚Ä¢ –£—Å–ª—É–≥–∞: {data['service_name']}\n"
#         f"‚Ä¢ –°—Å—ã–ª–∫–∞: {data['link']}\n"
#         f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
#         f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['cost']} —Ä—É–±.\n\n"
#         f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑ –Ω–∞—á–Ω–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
#         reply_markup=builder.as_markup(),
#         parse_mode="HTML"
#     )
    
#     await state.set_state(OrderStates.AWAITING_QUANTITY)
#     await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot
@bots.callback_query(F.data == "pay_cryptobot", OrderStates.PAYMENT_METHOD)
async def pay_with_cryptobot(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    
    try:
        async with AioCryptoPay(token=CRYPTOBOT_TOKEN) as crypto:

            # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ CryptoPay
            invoice = await crypto.create_invoice(
                asset='USDT',
                amount=data['cost'],
                description=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ {data['quantity']} {data['service_name']}",
                expires_in=1800  # 30 –º–∏–Ω—É—Ç
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        await state.update_data(
            invoice_id=invoice.invoice_id,
            payment_method='cryptobot'
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice.bot_invoice_url)
        builder.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")
        builder.adjust(1)
        
        await callback.message.edit_text(
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot</b>\n\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data['cost']} USDT\n"
            f"–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
        await state.set_state(OrderStates.AWAITING_PAYMENT)
    except Exception as e:
        logger.error(f"Error creating CryptoPay invoice: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()
    
    await callback.answer()

@bots.callback_query(F.data == "bots_pay_ton", OrderStates.PAYMENT_METHOD)
async def pay_with_ton(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TON –∫ —Ä—É–±–ª—é
        ton_rate = await get_ton_rate()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ TON
        ton_amount = round(data['cost'] / ton_rate, 4)
        amount_nano = int(ton_amount * 1_000_000_000)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        unique_code = generate_unique_code()
        
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
        payment_links = [
            ("Ton Wallet", f"ton://transfer/{TON_WALLET}"),
            ("Tonkeeper", f"https://app.tonkeeper.com/transfer/{TON_WALLET}"),
            ("Tonhub", f"https://tonhub.com/transfer/{TON_WALLET}")
        ]
        
        for name, base_url in payment_links:
            builder.button(
                text=name, 
                url=f"{base_url}?amount={amount_nano}&text={unique_code}"
            )
            
        builder.button(
            text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
            callback_data=f"check_ton_payment:{unique_code}:{amount_nano}:{data['cost']}"
        )
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
            callback_data="cancel_payment"
        )
        builder.adjust(1)
        
        await callback.message.edit_text(
            f"üíé <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TON</b>\n\n"
            f"‚ñ™ –°—É–º–º–∞: <b>{ton_amount:.4f} TON</b> (~{data['cost']:.2f}‚ÇΩ)\n"
            f"‚ñ™ –ê–¥—Ä–µ—Å: <code>{TON_WALLET}</code>\n"
            f"‚ñ™ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{unique_code}</code>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
        await state.update_data(
            amount_nano=str(amount_nano),
            unique_code=unique_code,
            payment_method='ton'
        )
        
        await state.set_state(OrderStates.AWAITING_PAYMENT)
    except Exception as e:
        logger.error(f"Error creating TON payment: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()
    
    await callback.answer()
    
async def get_ton_rate():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON –∫ —Ä—É–±–ª—é"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                "https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=rub",
                timeout=5
            ) as response:
                data = await response.json()
                return data['the-open-network']['rub']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ TON: {e}")
        return 200  # –ö—É—Ä—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã TON
@bots.callback_query(F.data.startswith("check_ton_payment:"), OrderStates.AWAITING_PAYMENT)
async def check_ton_payment_handler(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    unique_code = parts[1]
    amount_nano = parts[2]
    rub_amount = float(parts[3])
    
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –∑–∞–∫–∞–∑
    if data.get('unique_code') != unique_code or str(data.get('amount_nano')) != amount_nano:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ TON –¥–ª—è –∑–∞–∫–∞–∑–∞. –û–∂–∏–¥–∞–µ–º: {amount_nano} nanoTON, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{unique_code}'")
    
    try:
        expected = int(amount_nano)
        tolerance = max(int(expected * 0.01), 1000000)  # –î–æ–ø—É—Å–∫ 1% –∏–ª–∏ –º–∏–Ω–∏–º—É–º 0.001 TON
        
        params = {
            'address': str(TON_WALLET),
            'limit': 20,
            'api_key': str(TON_API_TOKEN),
            'archival': 'true'
        }
        
        async with aiohttp.ClientSession() as session:
            try:
                response = await session.get(
                    f"{TON_API_BASE}getTransactions",
                    params=params,
                    timeout=20
                )
                
                if response.status != 200:
                    logger.error(f"TON API error: HTTP {response.status}")
                    await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
                    return
                
                data = await response.json()
                
                if not data.get('ok', False):
                    error_msg = data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
                    logger.error(f"TON API error: {error_msg}")
                    await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
                    return
                
                for tx in data.get('result', []):
                    in_msg = tx.get('in_msg', {})
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
                    tx_value = 0
                    try:
                        value = in_msg.get('value')
                        if value is not None:
                            tx_value = int(float(value))
                    except (TypeError, ValueError):
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    tx_comment = str(in_msg.get('message', '')).strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    amount_match = abs(tx_value - expected) <= tolerance
                    comment_match = tx_comment == unique_code.strip()
                    
                    if amount_match and comment_match:
                        logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–µ–∂: {tx_value} nanoTON, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{tx_comment}'")
                        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                        await create_order_after_payment(callback, state, rub_amount)
                        return
                
                logger.info("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await callback.answer(
                    "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.",
                    show_alert=True
                )
                
            except asyncio.TimeoutError:
                logger.error("Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ TON API")
                await callback.answer("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            except aiohttp.ClientError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
                await callback.answer("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {type(e).__name__}: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot
@bots.callback_query(F.data == "check_payment", OrderStates.AWAITING_PAYMENT)
async def check_cryptobot_payment(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    if 'invoice_id' not in data:
        await callback.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)
        return
    
    try:
        async with AioCryptoPay(token=CRYPTOBOT_TOKEN) as crypto:
            invoice = await crypto.get_invoices(invoice_ids=data['invoice_id'])
            
        if invoice.status == 'paid':
            # –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            await create_order_after_payment(callback, state, data['cost'])
        else:
            await callback.answer(
                "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.",
                show_alert=True
            )
    except Exception as e:
        logger.error(f"Error checking CryptoPay invoice: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )
    
    await callback.answer()

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async def create_order_after_payment(callback: types.CallbackQuery, state: FSMContext, amount: float):
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ API
    order_result = await BotsAPI.create_order(
        service_id=data['service_id'],
        link=data['link'],
        quantity=data['quantity']
    )
    
    if not order_result or 'order' not in order_result:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    order_id = order_result['order']
    await DB.add_order(
        user_id=callback.from_user.id,
        order_id=order_id,
        service_id=data['service_id'],
        link=data['link'],
        quantity=data['quantity'],
        cost=amount,
        status='pending',  # –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    service = await BotsAPI.get_service(data['service_id'])
    service_name = service['name'] if service else f"–£—Å–ª—É–≥–∞ #{data['service_id']}"
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {service_name}\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∞: {data['link']}\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {amount} —Ä—É–±.\n\n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /orders",
        parse_mode="HTML"
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
@bots.callback_query(F.data == "cancel_payment", OrderStates.AWAITING_PAYMENT)
async def cancel_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders
@bots.message(Command("orders"))
async def show_orders(message: types.Message, state: FSMContext):
    user_orders = await DB.get_user_orders(message.from_user.id)
    
    if not user_orders:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return
    
    builder = InlineKeyboardBuilder()
    for order in user_orders[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ–∫–∞–∑ 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
        builder.button(
            text=f"–ó–∞–∫–∞–∑ #{order['order_id']} - {order['status']}",
            callback_data=f"view_order_{order['order_id']}"
        )
    
    builder.adjust(1)
    await message.answer(
        "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(OrderStates.VIEW_ORDERS)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞
@bots.callback_query(F.data.startswith("view_order_"), OrderStates.VIEW_ORDERS)
async def view_order(callback: types.CallbackQuery):
    order_id = int(callback.data.replace("view_order_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
    order = await DB.get_order(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ API
    status_data = await BotsAPI.get_order_status(order_id)
    
    if status_data and isinstance(status_data, dict) and 'status' in status_data:
        current_status = status_data['status']
        remains = status_data.get('remains', 'N/A')
        charge = status_data.get('charge', 'N/A')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await DB.update_order_status(order_id, current_status)
    else:
        current_status = order['status']
        remains = 'N/A'
        charge = 'N/A'
    
    service = await BotsAPI.get_service(order['service_id'])
    service_name = service['name'] if service else f"–£—Å–ª—É–≥–∞ #{order['service_id']}"
    
    text = (
        f"üìÑ <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {service_name}\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∞: {order['link']}\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order['cost']} —Ä—É–±.\n"
        # f"‚Ä¢ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.get('payment_method', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {current_status.upper()}\n"
        f"–î–∞—Ç–∞: {order['created_at']}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"refresh_order_{order_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_orders")
    builder.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
@bots.callback_query(F.data.startswith("refresh_order_"))
async def refresh_order_status(callback: types.CallbackQuery):
    order_id = int(callback.data.replace("refresh_order_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    status_data = await BotsAPI.get_order_status(order_id)
    
    if not status_data or 'status' not in status_data:
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await DB.update_order_status(order_id, status_data['status'])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order = await DB.get_order(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    service = await BotsAPI.get_service(order['service_id'])
    service_name = service['name'] if service else f"–£—Å–ª—É–≥–∞ #{order['service_id']}"
    
    text = (
        f"üìÑ <b>–ó–∞–∫–∞–∑ #{order_id}</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)\n\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {service_name}\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∞: {order['link']}\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order['cost']} —Ä—É–±.\n"
        # f"‚Ä¢ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.get('payment_method', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_data['status'].upper()}\n"
        f"–î–∞—Ç–∞: {order['created_at']}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"refresh_order_{order_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_orders")
    builder.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")

async def render_orders_list(user_id: int, state: FSMContext) -> types.Message | None:
    user_orders = await DB.get_user_orders(user_id)

    if not user_orders:
        return None

    builder = InlineKeyboardBuilder()
    for order in user_orders[:10]:
        builder.button(
            text=f"–ó–∞–∫–∞–∑ #{order['order_id']} - {order['status']}",
            callback_data=f"view_order_{order['order_id']}"
        )
    builder.adjust(1)
    return builder

@bots.callback_query(F.data == "back_to_orders")
async def back_to_orders_list(callback: types.CallbackQuery, state: FSMContext):
    builder = await render_orders_list(callback.from_user.id, state)
    if not builder:
        await callback.message.edit_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
    else:
        await callback.message.edit_text(
            "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    await state.set_state(OrderStates.VIEW_ORDERS)
    await callback.answer()
 
@bots.message(Command('OrderStatus'))
async def _(message: types.Message):
    if message.from_user.id in ADMINS_ID:
        args = message.text.split()
        if len(args) > 1:
            argument = args[1] 
            status_data = await BotsAPI.get_order_status(argument)
            await message.answer(f'Status: <blockquote>{status_data}</blockquote>')
        else:
            await message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç.")
