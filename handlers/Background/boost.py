from untils.Imports import *
import json
from datetime import datetime, timedelta
import asyncio
from .locks import *

task_processing_lock = asyncio.Lock()

async def update_boost_tasks_periodically(bot: Bot):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –±—É—Å—Ç.
    """
    while True:
        global available_boost_tasks
        async with task_processing_lock:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            all_tasks = await DB.select_boost_tasks()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è—è –¥–æ—Å—Ç—É–ø –±–æ—Ç–∞ –∫ –∫–∞–Ω–∞–ª–∞–º
            filtered_tasks = []
            errors = []
            for task in all_tasks:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–ª–∏ username
                    target = await extract_chat_id_or_username(task[2])
                    print(target)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    
                    # chat: Chat = await bot.get_chat(target)
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
                    filtered_tasks.append(task)
                except Exception as e:
                    errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {task[2]}: {str(e)}")
                    continue
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            random.shuffle(filtered_tasks)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            available_boost_tasks = filtered_tasks
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –≤ —á–∞—Ç INFO_ID
            report_message = (
                f"‚úÖ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –±—É—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n"
                f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {len(all_tasks)}\n"
                f"üü¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(filtered_tasks)}\n"
                f"üî¥ –û—à–∏–±–æ–∫: {len(errors)}\n"
            )
            if errors:
                report_message += "\n–û—à–∏–±–∫–∏:\n" + "\n".join(errors)
            
            try:
                await bot.send_message(chat_id=INFO_ID, text=report_message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")
        
        # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await asyncio.sleep(600)  # 600 —Å–µ–∫—É–Ω–¥ = 10 –º–∏–Ω—É—Ç



async def extract_chat_id_or_username(target: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç chat_id –∏–ª–∏ username –∏–∑ —Å—Ç—Ä–æ–∫–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
    - ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890)
    - @username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel)
    - https://t.me/username (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/channel)
    - username (–Ω–∞–ø—Ä–∏–º–µ—Ä, klaxxon_off)
    """
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º username
    if target.startswith("https://t.me/"):
        return target.split("/")[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ /
    # –ï—Å–ª–∏ —ç—Ç–æ @username, —É–±–∏—Ä–∞–µ–º @
    elif target.startswith("@"):
        return target[1:]
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "-100"), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    elif re.match(r"^-?\d+$", target):
        return target
    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ username (–Ω–∞–ø—Ä–∏–º–µ—Ä, klaxxon_off)
    else:
        return target
    


async def check_subscriptions_periodically_boost(bot: Bot):
    while True:
        await asyncio.sleep(7200)  # –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        print('–ü—Ä–æ–≤–æ–∂—É –ø—Ä–æ–≤–µ—Ä–∫—É')
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (status = 1) –∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –±—É—Å—Ç (status = 6)
            active_tasks = await DB.get_active_completed_tasks()
            boost_tasks = await DB.get_boost_tasks()  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ get_boost_tasks –≤ DB

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –±—É—Å—Ç (status = 0)
            for task in boost_tasks:
                user_id, task_id, target_id, task_sum, owner_id, status, rem_days, *_ = task
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Å—Ç–∞
                try:
                    channel_username = target_id  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ target_id —Å–æ–¥–µ—Ä–∂–∏—Ç username –∫–∞–Ω–∞–ª–∞
                    is_boost_active = None #await boost(channel_username, user_id)
                    print(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Å—Ç–∞ –¥–ª—è {user_id} –≤ {channel_username}: {is_boost_active}')
                    
                    if not is_boost_active:
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                        try:
                            await bot.send_message(
                                user_id,
                                f"‚ö†Ô∏è –ë—É—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω!\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç–µ –±—É—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤, "
                                f"–∏–Ω–∞—á–µ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {task_sum} $MICO!"
                            )
                            
                            # –ñ–¥–µ–º 2 —á–∞—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                            await asyncio.sleep(7200)
                            is_boost_active = None #await boost(channel_username, user_id)
                            
                            if not is_boost_active:
                                # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
                                await DB.add_balance(user_id, -task_sum)
                                await DB.add_balance(owner_id, task_sum)
                                await DB.update_completed_task(task_id, status=0) 
                                
                                await bot.send_message(
                                    user_id,
                                    f"‚ùå –í–∞–º —Å–ø–∏—Å–∞–Ω —à—Ç—Ä–∞—Ñ {task_sum} $MICO "
                                    f"–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç –∫–∞–Ω–∞–ª–∞ {channel_username}!"
                                )
                                await bot.send_message(
                                    owner_id,
                                    f"üí∏ –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {task_sum} $MICO "
                                    f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç"
                                )
                                
                                await DB.con.execute(''' DELETE FROM completed_tasks 
                                                     WHERE user_id = ? AND target_id =?''',
                                                       (user_id, channel_username)) 
                                await DB.con.commit() 
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –±—É—Å—Ç: {e}") 
                            
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Å—Ç–∞: {e}")

            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ rem_days
            if datetime.now().hour == 0 or datetime.now().hour == 1:  # –í –ø–æ–ª–Ω–æ—á—å
                # if is_boost_active:
                await DB.con.execute('''
                    UPDATE completed_tasks 
                    SET rem_days = rem_days - 1 
                    WHERE user_id = ? AND target_id = ? AND rem_days > 0
                ''', (user_id, channel_username))
                await DB.con.commit() 
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
