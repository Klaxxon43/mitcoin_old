from utils.Imports import *
from utils.redis_utils import *
import json
from datetime import datetime, timedelta
import asyncio
from .locks import *

task_processing_lock = asyncio.Lock()


async def update_boost_tasks_periodically():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"""
    cache_key = "boost"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    
    try:
        cached_tasks = await get_cached_data(cache_key)
        if cached_tasks:
            with cache_lock:  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π lock
                global available_tasks  # –ò–ª–∏ processed_tasks, available_reaction_tasks –∏ —Ç.–¥.
                available_tasks = cached_tasks
            return
            
        all_tasks = await DB.select_tasks()  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        random.shuffle(all_tasks)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        await set_cached_data(cache_key, all_tasks, ttl=600)
        with cache_lock:
            available_tasks = all_tasks
            print(f"–ó–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω–æ: {len(available_tasks)}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_tasks_periodically: {e}")

    await asyncio.sleep(600)



async def extract_chat_id_or_username(target: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç chat_id –∏–ª–∏ username –∏–∑ —Å—Ç—Ä–æ–∫–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
    - ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890)
    - @username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel)
    - https://t.me/username (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/channel)
    - username (–Ω–∞–ø—Ä–∏–º–µ—Ä, klaxxon_off)
    """
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º username
    if target.startswith("https://t.me/"):
        return target.split("/")[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ /
    # –ï—Å–ª–∏ —ç—Ç–æ @username, —É–±–∏—Ä–∞–µ–º @
    elif target.startswith("@"):
        return target[1:]
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "-100"), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    elif re.match(r"^-?\d+$", target):
        return target
    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ username (–Ω–∞–ø—Ä–∏–º–µ—Ä, klaxxon_off)
    else:
        return target
    


async def check_subscriptions_periodically_boost(bot: Bot):
    while True:
        await asyncio.sleep(7200)  # –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        print('–ü—Ä–æ–≤–æ–∂—É –ø—Ä–æ–≤–µ—Ä–∫—É')
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (status = 1) –∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –±—É—Å—Ç (status = 6)
            active_tasks = await DB.get_active_completed_tasks()
            boost_tasks = await DB.get_boost_tasks()  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ get_boost_tasks –≤ DB

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –±—É—Å—Ç (status = 0)
            for task in boost_tasks:
                user_id, task_id, target_id, task_sum, owner_id, status, rem_days, *_ = task
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Å—Ç–∞
                try:
                    channel_username = target_id  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ target_id —Å–æ–¥–µ—Ä–∂–∏—Ç username –∫–∞–Ω–∞–ª–∞
                    is_boost_active = None #await boost(channel_username, user_id)
                    print(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Å—Ç–∞ –¥–ª—è {user_id} –≤ {channel_username}: {is_boost_active}')
                    
                    if not is_boost_active:
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                        try:
                            await bot.send_message(
                                user_id,
                                f"‚ö†Ô∏è –ë—É—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω!\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç–µ –±—É—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤, "
                                f"–∏–Ω–∞—á–µ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {task_sum} $MICO!"
                            )
                            
                            # –ñ–¥–µ–º 2 —á–∞—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                            await asyncio.sleep(7200)
                            is_boost_active = None #await boost(channel_username, user_id)
                            
                            if not is_boost_active:
                                # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
                                await DB.add_balance(user_id, -task_sum)
                                await DB.add_balance(owner_id, task_sum)
                                await DB.update_completed_task(task_id, status=0) 
                                
                                await bot.send_message(
                                    user_id,
                                    f"‚ùå –í–∞–º —Å–ø–∏—Å–∞–Ω —à—Ç—Ä–∞—Ñ {task_sum} $MICO "
                                    f"–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç –∫–∞–Ω–∞–ª–∞ {channel_username}!"
                                )
                                await bot.send_message(
                                    owner_id,
                                    f"üí∏ –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {task_sum} $MICO "
                                    f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç"
                                )
                                
                                await DB.con.execute(''' DELETE FROM completed_tasks 
                                                     WHERE user_id = ? AND target_id =?''',
                                                       (user_id, channel_username)) 
                                await DB.con.commit() 
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –±—É—Å—Ç: {e}") 
                            
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Å—Ç–∞: {e}")

            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ rem_days
            if datetime.now().hour == 0 or datetime.now().hour == 1:  # –í –ø–æ–ª–Ω–æ—á—å
                # if is_boost_active:
                await DB.con.execute('''
                    UPDATE completed_tasks 
                    SET rem_days = rem_days - 1 
                    WHERE user_id = ? AND target_id = ? AND rem_days > 0
                ''', (user_id, channel_username))
                await DB.con.commit() 
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
