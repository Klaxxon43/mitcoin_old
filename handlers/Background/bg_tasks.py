from untils.Imports import *
import json
from datetime import datetime, timedelta
import asyncio

from .boost import *
from .link import *
from .reaction import *
from .chat import *
from .post import *
from .channel import *
from .mining import *
from .db import *
from .locks import *
from handlers.Tasks.tasks import all_price

task_processing_lock = asyncio.Lock()
semaphore = asyncio.Semaphore(2)



# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É


async def check_all_active_boosts(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏"""
    print("[BG TASK] –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    print("[BG TASK] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã:", datetime.now())

    while True:
        try:
            print("\n[BG TASK] –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            print("[BG TASK] –ü–æ–ª—É—á–∞–µ–º pending –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î...")
            pending_tasks = await DB.get_pending_bg_tasks()
            print(f"[BG TASK] –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: {len(pending_tasks)}")
            
            if not pending_tasks:
                print("[BG TASK] –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                await asyncio.sleep(30)
                continue
            
            for task in pending_tasks:
                task_id, task_type, task_data_json, status, created_at, next_run_at, attempts = task
                print(f"\n[BG TASK] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É ID: {task_id}, —Ç–∏–ø: {task_type}, —Å—Ç–∞—Ç—É—Å: {status}")
                print(f"[BG TASK] –°–æ–∑–¥–∞–Ω–∞: {created_at}, —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {next_run_at}, –ø–æ–ø—ã—Ç–æ–∫: {attempts}")
                
                try:
                    # Mark task as running first
                    await DB.mark_bg_task_running(task_id)
                    
                    task_data = json.loads(task_data_json)
                    print(f"[BG TASK] –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {task_data}")
                    
                    if task_type == 'boost_check':
                        print("[BG TASK] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É boost_check")
                        task_info = task_data
                        
                        print(f"[BG TASK] –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ {task_info['task_id']}")
                        boost_task = await Boost.get_task_by_id(task_info['task_id'])
                        
                        if not boost_task:
                            print(f"[BG TASK] –ó–∞–¥–∞–Ω–∏–µ {task_info['task_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                            await DB.mark_bg_task_completed(task_id)
                            continue
                            
                        print("[BG TASK] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—É—Å—Ç–∞...")
                        is_active = await Boost.has_user_boosted(
                            task_info['user_id'], 
                            task_info['chat_id']
                        )
                        print(f"[BG TASK] –ë—É—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω: {is_active}")
                        
                        if not is_active:
                            print(f"[BG TASK] –ë—É—Å—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {task_info['user_id']}")
                            await bot.send_message(
                                task_info['user_id'],
                                f"‚ùå –í–∞—à –±—É—Å—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_info['task_id']} –±—ã–ª —É–¥–∞–ª–µ–Ω. –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã."
                            )
                            await DB.mark_bg_task_completed(task_id)
                            continue
                        
                        creator_id = boost_task[1]
                        print(f"[BG TASK] –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞—Ç–µ–ª—è {creator_id}")
                        # creator_balance = await DB.get_user_balance(creator_id)
                        daily_cost = all_price['boost']
                        # print(f"[BG TASK] –ë–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞—Ç–µ–ª—è: {creator_balance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {daily_cost}")
                        
                        print("[BG TASK] –û–ø–ª–∞—Ç–∞ —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞—á–∏—Å–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é")
                        await DB.add_balance(amount=daily_cost, user_id=task_info['user_id'])
                        await DB.add_transaction(
                            user_id=task_info['user_id'],
                            amount=daily_cost,
                            description=f"–î–æ—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å {task_info['days_checked'] + 1} –±—É—Å—Ç–∞",
                        )

                        days_left = task_info['total_days'] - (task_info['days_checked'] + 1)
                        print(f"[BG TASK] –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {days_left}")
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        await bot.send_message(
                            task_info['user_id'],
                            f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {daily_cost} MITcoin –∑–∞ {task_info['days_checked'] + 1}-–π –¥–µ–Ω—å –±—É—Å—Ç–∞!\n"
                                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
                        )
                            
                        if days_left > 0:
                            print("[BG TASK] –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
                            await DB.add_bg_task(
                                task_type='boost_check',
                                task_data={
                                    'task_id': task_info['task_id'],
                                    'user_id': task_info['user_id'],
                                    'chat_id': task_info['chat_id'],
                                    'days_checked': task_info['days_checked'] + 1,
                                    'total_days': task_info['total_days']
                                },
                                delay_seconds=60  # 1 –¥–µ–Ω—å (24*3600)
                            )
                        else:
                            print("[BG TASK] –ë—É—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                            await bot.send_message(
                                task_info['user_id'],
                                f"‚úÖ –ë—É—Å—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_info['task_id']} –∑–∞–≤–µ—Ä—à–µ–Ω!"
                            )
                            await bot.send_message(
                                creator_id,
                                f"‚úÖ –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª {task_info['task_id']}-–¥–Ω–µ–≤–Ω–∏–π –±—É—Å—Ç –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞"
                            )

                    print(f"[BG TASK] –ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    await DB.mark_bg_task_completed(task_id)
                    
                except Exception as e:
                    print(f"[BG TASK ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {str(e)}")
                    await DB.mark_bg_task_failed(task_id)
                    continue
            
            print("[BG TASK] –ò—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º 30 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(30)
            
        except Exception as e:
            print(f"[BG TASK CRITICAL] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
            print("[BG TASK] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(60)

async def restore_background_tasks(bot: Bot):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    print("[BG TASK] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    try:
        async with DB.con.cursor() as cur:
            await cur.execute('''
                SELECT * FROM background_tasks 
                WHERE status IN ('pending', 'failed', 'running')
            ''')
            tasks = await cur.fetchall()
            print(f"[BG TASK] –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {len(tasks)}")
            
            for task in tasks:
                task_id, task_type, task_data_json, status, created_at, next_run_at, attempts = task
                print(f"[BG TASK] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ ID: {task_id}, —Ç–∏–ø: {task_type}")
                
                try:
                    task_data = json.loads(task_data_json)
                    
                    if task_type == 'boost_check':
                        # –î–ª—è –∑–∞–¥–∞—á –±—É—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        boost_task = await Boost.get_task_by_id(task_data['task_id'])
                        if not boost_task:
                            print(f"[BG TASK] –ó–∞–¥–∞–Ω–∏–µ {task_data['task_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É")
                            await cur.execute('DELETE FROM background_tasks WHERE task_id = ?', (task_id,))
                            continue
                            
                        try:
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏ –∏–ª–∏ –±–µ–∑
                            if isinstance(next_run_at, str):
                                if '.' in next_run_at:
                                    next_run = datetime.strptime(next_run_at, '%Y-%m-%d %H:%M:%S.%f')
                                else:
                                    next_run = datetime.strptime(next_run_at, '%Y-%m-%d %H:%M:%S')
                            else:
                                next_run = next_run_at
                            
                            delay = (next_run - datetime.now()).total_seconds()
                            delay = max(60, delay)  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
                            
                            print(f"[BG TASK] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É, delay: {delay} —Å–µ–∫.")
                            
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                            await DB.add_bg_task(
                                task_type='boost_check',
                                task_data=task_data,
                                delay_seconds=delay
                            )
                        except ValueError as e:
                            print(f"[BG TASK ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã {next_run_at}: {e}")
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, —Å—Ç–∞–≤–∏–º –∑–∞–¥–µ—Ä–∂–∫—É 1 —á–∞—Å
                            await DB.add_bg_task(
                                task_type='boost_check',
                                task_data=task_data,
                                delay_seconds=3600
                            )
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
                    await cur.execute('DELETE FROM background_tasks WHERE task_id = ?', (task_id,))
                    print(f"[BG TASK] –ó–∞–¥–∞—á–∞ {task_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å—Ç–∞—Ä—ã—Ö")
                    
                except Exception as e:
                    print(f"[BG TASK ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            
            await DB.con.commit()
    except Exception as e:
        print(f"[BG TASK ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
    finally:
        print("[BG TASK] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def start_background_tasks(bot: Bot, DB):
    asyncio.create_task(check_all_active_boosts(bot)) #boost
    asyncio.create_task(update_boost_tasks_periodically(bot)) #boost
    asyncio.create_task(scheduled_cache_update_chat(bot, DB)) #chat
    asyncio.create_task(update_tasks_periodically_link())
    asyncio.create_task(restore_background_tasks(bot))
    asyncio.create_task(update_reaction_tasks_periodically()) #reactions
    asyncio.create_task(process_tasks_periodically(bot)) #post
    asyncio.create_task(scheduled_cache_update(bot, DB)) #channel
    asyncio.create_task(remind_mining_collection(bot))
    asyncio.create_task(scheduled_db_backup(bot)) #–æ—Ç–ø—Ä–∞–≤–∫–∞ –±–¥ –≤ —á–∞—Ç
    asyncio.create_task(check_subscriptions_periodically(bot))
    asyncio.create_task(check_subscriptions_periodically_boost(bot))
