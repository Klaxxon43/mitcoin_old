from untils.Imports import *
import json
from datetime import datetime, timedelta
import asyncio

from .locks import *


async def scheduled_cache_update(bot, DB):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∑–∞–¥–∞—á —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç."""
    while True:
        await update_task_cache_for_all_users(bot, DB)
        await asyncio.sleep(300)  # Changed from 600 to 300 seconds (5 minutes)

async def update_task_cache_for_all_users(bot, DB):
    tasks = [cache_all_tasks(bot, DB)]
    await asyncio.gather(*tasks)
    print("–ö—ç—à (–∫–∞–Ω–∞–ª—ã) –æ–±–Ω–æ–≤–ª–µ–Ω")



async def cache_all_tasks(bot, DB):
    """–ö—ç—à–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        all_tasks = await DB.select_chanel_tasks()
        new_tasks_with_links = []
        print(f'–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ –ë–î: {len(all_tasks)}')
        
        from handlers.Tasks.channel import semaphore
        async with semaphore:
            for task in all_tasks:
                try:
                    chat = await bot.get_chat(task[2])
                    if not chat.invite_link:
                        print(f"–ö–∞–Ω–∞–ª {task[2]} –Ω–µ –∏–º–µ–µ—Ç invite_link, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                        
                    if task[3] <= 0:
                        print(f"–ó–∞–¥–∞–Ω–∏–µ {task[0]} –∏–º–µ–µ—Ç amount={task[3]}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                        
                    new_tasks_with_links.append((*task, chat.title))
                    
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è {task[0]}: {str(e)}')
                    continue

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        from .bg_tasks import cache_lock, task_cache
        with cache_lock:
            task_cache['all_tasks'] = new_tasks_with_links
            print(f"–ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω. –ó–∞–¥–∞–Ω–∏–π: {len(new_tasks_with_links)}")
            
    except Exception as e:
        print(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ cache_all_tasks: {str(e)}')



async def check_subscriptions_periodically(bot: Bot):
    while True:
        await asyncio.sleep(7200)  # –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        print('–ø—Ä–æ–≤–æ–∂—É –ø—Ä–æ–≤–µ—Ä–∫—É')
        try:
            active_tasks = await DB.get_active_completed_tasks()
            print(active_tasks)
            for task in active_tasks:
                user_id, task_id, target_id, task_sum, owner_id, status, rem_days, *_ = task
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                try:
                    member = await bot.get_chat_member(target_id, user_id)
                    print('member: '+ str(member))
                    is_subscribed = member.status in ['member', 'administrator', 'creator']
                except Exception:
                    is_subscribed = False

                if not is_subscribed:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    try:
                        chat = await bot.get_chat(target_id)
                        invite_link = chat.invite_link
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=invite_link)] 
                        ])
                        
                        await bot.send_message(
                            user_id,
                            f"‚ö†Ô∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {chat.title}!\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —Å–Ω–æ–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤, "
                            f"–∏–Ω–∞—á–µ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {task_sum} MITcoin!",
                            reply_markup=keyboard
                        )
                        
                        # –ñ–¥–µ–º 2 —á–∞—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                        await asyncio.sleep(7200) 
                        member = await bot.get_chat_member(target_id, user_id)
                        is_subscribed = member.status in ['member', 'administrator', 'creator']
                        
                        if not is_subscribed:
                            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
                            await DB.add_balance(user_id, -task_sum)
                            await DB.add_balance(owner_id, task_sum)
                            await DB.update_completed_task(user_id, status=0) 
                            
                            await bot.send_message(
                                user_id,
                                f"‚ùå –í–∞–º —Å–ø–∏—Å–∞–Ω —à—Ç—Ä–∞—Ñ {task_sum} MITcoin "
                                f"–∑–∞ –æ—Ç–ø–∏—Å–∫—É –æ—Ç {chat.title}!"
                            )
                            await bot.send_message(
                                owner_id,
                                f"üí∏ –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {task_sum} MITcoin "
                                f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ –æ—Ç–ø–∏—Å–∫—É"
                            )
                            
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à—Ç—Ä–∞—Ñ–∞: {e}")

            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ rem_days
            if datetime.now().hour == 0 or datetime.now().hour == 1:  # –í –ø–æ–ª–Ω–æ—á—å
                await DB.con.execute('''
                    UPDATE completed_tasks 
                    SET rem_days = rem_days - 1 
                    WHERE status = 1 AND rem_days > 0
                ''')
                await DB.con.commit()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
