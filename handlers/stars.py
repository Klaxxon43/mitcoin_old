from utils.Imports import *

stars = Router()

class BalanceStates(StatesGroup):
    waiting_for_deposit_amount = State()
    waiting_for_withdraw_amount = State()
    waiting_for_stars_amount = State()

class withdraw_stars(StatesGroup):
    amount = State()

@stars.callback_query(F.data == "withdraw_stars")
async def withdraw_stars_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(withdraw_stars.amount)
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='balance_game'))
    stars = await DB.get_stars(callback.from_user.id)
    await callback.message.edit_text(
        '‚ùì –°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?\n'
        '‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 50 –∑–≤—ë–∑–¥\n'
        f'–í–∞—à –±–∞–ª–∞–Ω—Å: {stars}'
        '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏',
        reply_markup=kb.as_markup()
    )

@stars.message(withdraw_stars.amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext, bot: Bot):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        amount = float(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 50:
            kb = InlineKeyboardBuilder()
            kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='withdraw_game'))
            await message.answer(
                '‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 50 ‚≠ê',
                reply_markup=kb.as_markup()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        current_balance = await DB.get_stars(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if amount > current_balance:
            kb = InlineKeyboardBuilder()
            kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='withdraw_game'))
            await message.answer(
                f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ ‚ùå\n'
                f'–í–∞—à –±–∞–ª–∞–Ω—Å: {current_balance} ‚≠ê\n'
                f'–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {amount} ‚≠ê',
                reply_markup=kb.as_markup()
            )
            return
        
        await DB.increment_statistics_withdraw_from_game(1, amount)
        await DB.increment_statistics_withdraw_from_game(2, amount)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ —á–∞—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
        await bot.send_message(
            WITHDRAW_CHAT,
            text=f'''
üöÄ –ó–ê–Ø–í–ö–ê –ù–ê –í–´–í–û–î –ó–í–Å–ó–î
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}
üî¢ ID: {message.from_user.id}
üí∞ –°—É–º–º–∞: {amount} ‚≠ê
            '''
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞)
        new_balance = current_balance - amount
        await DB.update_user_balance_stars_game(user_id, -amount)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='withdraw_game'))
        await message.answer(
            f'‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} ‚≠ê —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n'
            f'üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚≠ê \n'
            'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
            reply_markup=kb.as_markup()
        )
        
    except ValueError:
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='withdraw_game'))
        await message.answer(
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 100) ‚ùå',
            reply_markup=kb.as_markup()
        )
    finally:
        await state.clear()

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Stars
@stars.callback_query(F.data == "dep_stars")
async def deposit_stars_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stars"""
    await callback.message.edit_text(
        "<b>‚≠ê–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥</b>\n"
        "<b>‚≠ê–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å:</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dep_game")]
        ])
    )
    await state.set_state(BalanceStates.waiting_for_stars_amount)

@stars.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: types.PreCheckoutQuery, bot: Bot):
    try:
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    except Exception as e:
        logger.error(f"Error in pre_checkout_handler: {e}")
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

@stars.message(BalanceStates.waiting_for_stars_amount)
async def process_stars_amount(message: types.Message, state: FSMContext, bot: Bot):
    try:
        stars_amount = int(message.text)
        if stars_amount <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            return
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≤–∞–ª—é—Ç—ã)
        amount_kopecks = stars_amount * 100  # 1 –∑–≤–µ–∑–¥–∞ = 1 —Ä—É–±–ª—å (100 –∫–æ–ø–µ–µ–∫)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã Stars
        prices = [LabeledPrice(label=f"{stars_amount} Stars", amount=amount_kopecks)]
        
        await bot.send_invoice(
            chat_id=message.chat.id,
            title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {stars_amount} Stars",
            description=f"–ü–æ–∫—É–ø–∫–∞ {stars_amount} ‚≠ê –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞",
            provider_token='',  # –í–∞—à —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            currency="RUB",  # –í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ (—Ä—É–±–ª–∏)
            prices=prices,
            payload=f"user_{message.from_user.id}_stars_{stars_amount}",
            start_parameter="stars_deposit",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False
        )

        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"Error in process_stars_amount: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@stars.message(F.successful_payment)
async def successful_payment_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        payload = message.successful_payment.invoice_payload
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –∏–∑ payload
        parts = payload.split('_')
        if len(parts) != 4:
            raise ValueError("Invalid payload format")
            
        stars_amount = int(parts[3])
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å
        await DB.update_user_balance_stars_game(user_id, stars_amount)

        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='game'))
        
        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"‚≠ê –ü–æ–ª—É—á–µ–Ω–æ: <b>{stars_amount} Stars</b>\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{await DB.get_user_balance_stars_game(user_id):.2f}‚≠ê</b>",
            reply_markup=kb.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error processing stars payment: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")