from utils.Imports import *
from .states import AdminActions
from utils.kb import admin_kb, cancel_all_kb
from utils.Imports import *
from .admin import admin

def generate_tasks_keyboard_report(reports, reportpage, total_pages):
    builder = InlineKeyboardBuilder()
    for report in reports:
        id = report[0]
        button_text = f"‚Ññ{id}"
        builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"report_{report[0]}"))

    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin"))
    
    pagination = []
    if reportpage > 1:
        pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"reportpage_{reportpage - 1}"))
    pagination.append(types.InlineKeyboardButton(text=str(reportpage), callback_data="current_page"))
    if reportpage < total_pages:
        pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"reportpage_{reportpage + 1}"))

    builder.row(*pagination)
    return builder.as_markup()

def paginate_tasks_report(reports, reportpage=1, per_page=5):
    total_pages = (len(reports) + per_page - 1) // per_page
    start_idx = (reportpage - 1) * per_page
    end_idx = start_idx + per_page
    tasks_on_page = reports[start_idx:end_idx]
    return tasks_on_page, total_pages

@admin.callback_query(F.data == 'reports_list_menu')
async def chating_tasks_handler(callback: types.CallbackQuery, bot: Bot):
    reports = await DB.get_reports()
    reportpage = 1
    tasks_on_page, total_pages = paginate_tasks_report(reports, reportpage)
    keyboard = generate_tasks_keyboard_report(tasks_on_page, reportpage, total_pages)
    await callback.message.edit_text("–í—Å–µ —Ä–µ–ø–æ—Ä—Ç—ã:", reply_markup=keyboard)

@admin.callback_query(lambda c: c.data.startswith("reportpage_"))
async def change_page_handler(callback: types.CallbackQuery):
    reportpage = int(callback.data.split('_')[1])
    reports = await DB.get_reports()
    tasks_on_page, total_pages = paginate_tasks_report(reports, reportpage)
    keyboard = generate_tasks_keyboard_report(tasks_on_page, reportpage, total_pages)
    await callback.message.edit_text("–í—Å–µ —Ä–µ–ø–æ—Ä—Ç—ã:", reply_markup=keyboard)

async def check_admin_and_get_invite_link_report(bot, chat_id):
    try:
        chat_administrators = await bot.get_chat_administrators(chat_id)
        for admin in chat_administrators:
            if admin.user.id == bot.id:
                try:
                    ChatFullInfo = await bot.get_chat(chat_id)
                    invite_link = ChatFullInfo.invite_link
                    if invite_link is None:
                        return "–ë–æ—Ç –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ, –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"
                    return invite_link
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞ –¥–ª—è {chat_id}, –æ—à–∏–±–∫–∞ - {e}')
                    return "–ë–æ—Ç –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ, –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"
        return "–ë–æ—Ç –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ, –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"
    except:
        return "–ë–æ—Ç –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ, –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"

@admin.callback_query(lambda c: c.data.startswith("report_"))
async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
    report_id = int(callback.data.split('_')[1])
    try:
        report = await DB.get_report(report_id)
    except:
        await callback.message.answer('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ—Ä—Ç–µ')
        return
    
    try:
        reporter = report[3]
    except:
        reporter = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç"

    try:
        task_id = report[1]
        chat_id = report[2]
        report_id = report[0]
    except:
        task_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç"
        chat_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç –∞–π–¥–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç"
        report_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç"

    try:
        task = await DB.get_task_by_id(task_id)
        if task is None:
            keyboard_builder = InlineKeyboardBuilder()
            keyboard_builder.add(
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"reporttaskdelete_{task_id}_{report_id}"),
                InlineKeyboardButton(text="‚ùåüíµ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+–≤–æ–∑–≤—Ä–∞—Ç MIT)", callback_data=f"taskcashbackdelete_{task_id}_{report_id}"),
                InlineKeyboardButton(text="‚ùå‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+ –ë–ê–ù)", callback_data=f"taskbandelete_{task_id}_{report_id}"),
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", callback_data=f"reportdelete_{report_id}"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_list_menu")
            )
            keyboard_builder.adjust(1)
            keyboard = keyboard_builder.as_markup()
            await callback.message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏, –æ—à–∏–±–∫–∞', reply_markup=keyboard)
            return
    except Exception as e:
        task = None
        keyboard_builder = InlineKeyboardBuilder()
        keyboard_builder.add(
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"reporttaskdelete_{task_id}_{report_id}"),
            InlineKeyboardButton(text="‚ùåüíµ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+–≤–æ–∑–≤—Ä–∞—Ç MIT)", callback_data=f"taskcashbackdelete_{task_id}_{report_id}"),
            InlineKeyboardButton(text="‚ùå‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+ –ë–ê–ù)", callback_data=f"taskbandelete_{task_id}_{report_id}"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", callback_data=f"reportdelete_{report_id}"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_list_menu")
        )
        keyboard_builder.adjust(1)
        keyboard = keyboard_builder.as_markup()
        await callback.message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏, –æ—à–∏–±–∫–∞ - {e}', reply_markup=keyboard)
        return

    if task[1]:
        user_id_creator = task[1]
    else:
        user_id_creator = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"

    chat_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
    invite_link = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É"
    if task[4] in [1, 2]:
        invite_link = await check_admin_and_get_invite_link_report(bot, report[2])
        try:
            chat = await bot.get_chat(chat_id)
            chat_title = chat.title
        except:
            chat_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
    elif task[4] in [3]:
        chat_id_post, message_id = map(int, chat_id.split(":"))
        chat_title = "–ü–æ—Å—Ç"
        invite_link = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç"
        try:
            await bot.forward_message(chat_id=callback.from_user.id, from_chat_id=chat_id_post, message_id=message_id)
        except:
            await callback.message.answer('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–Ω —É–¥–∞–ª–µ–Ω)')

    task_info = f"""
ID —Ä–µ–ø–æ—Ä—Ç–∞ - {report_id}
–û–±—ä–µ–∫—Ç —Ä–µ–ø–æ—Ä—Ç–∞ - {chat_title}

–ö—Ç–æ –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è - <a href='tg://user?id={reporter}'>{reporter}</a>
–ö—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞–Ω–∏–µ - <code>{user_id_creator}</code>
ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –∏–ª–∏ –∫–æ–¥ –ø–æ—Å—Ç–∞ (—á–∞—Ç_–∞–π–¥–∏:–º–µ—Å—Å–µ–¥–∂_–∞–π–¥–∏)- <code>{chat_id}</code> 
ID –∑–∞–¥–∞–Ω–∏—è - <code>{task_id}</code>

–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç - {invite_link}

–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: <code>{report[4]}</code>

<i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—è:</i>    
    """
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.add(
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"reporttaskdelete_{task_id}_{report_id}"),
        InlineKeyboardButton(text="‚ùåüíµ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+–≤–æ–∑–≤—Ä–∞—Ç MIT)", callback_data=f"taskcashbackdelete_{task_id}_{report_id}"),
        InlineKeyboardButton(text="‚ùå‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+ –ë–ê–ù)", callback_data=f"taskbandelete_{task_id}_{report_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", callback_data=f"reportdelete_{report_id}"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_list_menu")
    )
    keyboard_builder.adjust(1)
    keyboard = keyboard_builder.as_markup()
    await callback.message.answer(task_info, reply_markup=keyboard)

@admin.callback_query(lambda c: c.data.startswith("reporttaskdelete_"))
async def delete_task_handler(callback: types.CallbackQuery):
    task_id = int(callback.data.split('_')[1])
    report_id = int(callback.data.split('_')[2])
    await DB.delete_task(task_id)
    await DB.delete_report(report_id)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–ø–æ—Ä—Ç—ã", callback_data="reports_list_menu"))
    await callback.message.edit_text(f'‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_id} —É–¥–∞–ª–µ–Ω–æ! –ú–æ–Ω–µ—Ç—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ù–ï –±—ã–ª–∏', reply_markup=builder.as_markup())

@admin.callback_query(lambda c: c.data.startswith("taskcashbackdelete_"))
async def delete_task_handler(callback: types.CallbackQuery):
    task_id = int(callback.data.split('_')[1])
    report_id = int(callback.data.split('_')[2])
    price = 0
    task = await DB.get_task_by_id(task_id)

    if task[4] == 1:
        price = 2000
    elif task[4] == 2:
        price = 3000
    elif task[4] == 3:
        price = 200

    amounts = task[3]
    user_id = task[1]
    new_balance = amounts*price

    await DB.delete_task(task_id)
    await DB.add_balance(user_id, amount=new_balance)
    await DB.delete_report(report_id)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–ø–æ—Ä—Ç—ã", callback_data="reports_list_menu"))
    await callback.message.edit_text(f'‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_id} —É–¥–∞–ª–µ–Ω–æ! –°–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞–¥–∞–Ω–∏—è (<code>{user_id}</code>) –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {new_balance} MitCoin', reply_markup=builder.as_markup())

@admin.callback_query(lambda c: c.data.startswith("taskbandelete_"))
async def delete_task_handler(callback: types.CallbackQuery):
    task_id = int(callback.data.split('_')[1])
    report_id = int(callback.data.split('_')[2])
    task = await DB.get_task_by_id(task_id)
    user_id = task[1]
    new_balance = -10000000
    
    await DB.delete_task(task_id)
    await DB.update_balance(user_id, new_balance)
    await DB.delete_report(report_id)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–ø–æ—Ä—Ç—ã", callback_data="reports_list_menu"))
    await callback.message.edit_text(f'‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_id} —É–¥–∞–ª–µ–Ω–æ! –°–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞–¥–∞–Ω–∏—è (<code>{user_id}</code>) –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å {new_balance}', reply_markup=builder.as_markup())

@admin.callback_query(lambda c: c.data.startswith("reportdelete_"))
async def delete_task_handler(callback: types.CallbackQuery):
    report_id = int(callback.data.split('_')[1])
    await DB.delete_report(report_id)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–ø–æ—Ä—Ç—ã", callback_data="reports_list_menu"))
    await callback.message.edit_text(f'‚ùå –†–µ–ø–æ—Ä—Ç ‚Ññ{report_id} –±—ã–ª —É–¥–∞–ª–µ–Ω –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=builder.as_markup())