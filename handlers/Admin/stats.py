from utils.Imports import *
from .admin import admin

@admin.callback_query(F.data == 'stats')
async def stats_handler(callback: types.CallbackQuery):
    user_count = len(await DB.select_all())
    text = f"""
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤: {user_count}"""
    await callback.message.answer(text)
    await callback.answer()

@admin.callback_query(F.data == 'upload')
async def upload_handler(callback: types.CallbackQuery, bot: Bot):
    users = await DB.select_all()

    with open('users.txt', 'w') as file:
        for user in users:
            file.write(f"{user['user_id']}, @{user['username']}, balance - {user['balance']}\n")

    input_file = types.FSInputFile('users.txt')
    await bot.send_document(chat_id=callback.from_user.id, document=input_file)
    os.remove('./users.txt')
    await callback.answer()

@admin.callback_query(F.data == 'detailed_stats')
async def show_stats_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
        reply_markup=get_stats_menu()
    )
    await callback.answer()

@admin.callback_query(F.data.startswith('stats_'))
async def handle_stats_request(callback: types.CallbackQuery):
    stat_type = callback.data.split('_')[1]
    
    stat_mapping = {
        'users': ('add_users', '–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
        'subschanel': ('all_subs_chanel', '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª', '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'),
        'subsgroups': ('all_subs_groups', '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã', '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'),
        'tasks': ('all_tasks', '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
        'views': ('all_see', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
        'gifts': ('gift', '–ü–æ–¥–∞—Ä–∫–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
        'boosts': ('boosts', '–ë—É—Å—Ç—ã', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
        'likes': ('likes', '–õ–∞–π–∫–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
        'links': ('links', '–ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—Å—ã–ª–∫–∞–º', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
        'comments': ('comments', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
        'mined': ('mined', '–î–æ–±—ã—á–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    }
    
    if stat_type not in stat_mapping:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    db_field, title, ylabel = stat_mapping[stat_type]

    try:
        graph = await DB.create_statistics_graph(
            stat_type=db_field,
            title=title,
            ylabel=ylabel
        )
        
        if graph is not None:
            await callback.message.answer_photo(
                photo=graph,
                caption=f"üìä {title} –∑–∞ 30 –¥–Ω–µ–π"
            )
        else:
            await callback.answer(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {title.lower()}")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
    
    await callback.answer()