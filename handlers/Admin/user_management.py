from utils.Imports import *
from .states import AdminActions
from .admin import admin

@admin.callback_query(F.data == 'view_user_profile')
async def view_user_profile_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', reply_markup=cancel_all_kb())
    await state.set_state(AdminActions.view_user_profile)
    await callback.answer()

@admin.message(AdminActions.view_user_profile)
async def get_user_profile(message: types.Message, state: FSMContext):
    user_id = message.text
    try:
        user = await DB.select_user(user_id)
        if user:
            balance = user['balance'] if user['balance'] is not None else 0
            rub_balance = user['rub_balance'] if user['rub_balance'] is not None else 0
            tasks = await DB.get_tasks_by_user_admin(user_id)

            chanel_tasks = [f"–ö–∞–Ω–∞–ª | task_id - {task_id}" for task_id, type in tasks if type == 1]
            chat_tasks = [f"–ß–∞—Ç | task_id - {task_id}" for task_id, type in tasks if type == 2]
            post_tasks = [f"–ü–æ—Å—Ç | task_id - {task_id}" for task_id, type in tasks if type == 3]

            donation_count = await DB.count_user_deposits(user_id)
            donation_sum = await DB.sum_user_deposits(user_id)
            referral_count = await DB.get_referred_users(user_id)
            referral_earnings = await DB.get_earned_from_referrals(user_id)
            completed_tasks_count = await DB.count_user_completed_tasks(user_id)
            approx_task_earnings = completed_tasks_count * 1700

            profile_text = f"""
üÜî ID - <code>{user_id}</code> / <a href='tg://user?id={user_id}'>–ö–õ–ò–ö</a>

üíµ MitCoin - {balance} $MICO
üíµ –†—É–±–ª–∏ - {rub_balance}‚ÇΩ

üíº –ó–∞–¥–∞–Ω–∏—è:

{chr(10).join(chanel_tasks)}
{chr(10).join(chat_tasks)}
{chr(10).join(post_tasks)}

–ü—Ä–∏–º–µ—Ä–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∑–∞–¥–∞–Ω–∏–π - {approx_task_earnings}

üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ç–æ–≤ - {donation_count}
üé∞ –°—É–º–º–∞ –¥–æ–Ω–∞—Ç–æ–≤ - {donation_sum}

üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - {len(referral_count)}
üí∏–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - {referral_earnings}
"""
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="‚úè –ë–∞–ª–∞–Ω—Å", callback_data=f'update_balance:{user_id}'))
            builder.add(types.InlineKeyboardButton(text="‚úè –†—É–± –ë–∞–ª–∞–Ω—Å", callback_data=f'update_rub_balance:{user_id}'))
            await message.answer(profile_text, reply_markup=builder.as_markup())
        else:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω üòì')
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        print(e)
    finally:
        await state.clear()

@admin.callback_query(lambda c: c.data.startswith('update_balance:'))
async def update_balance_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.data.split(':')[1]
    await state.update_data(user_id=user_id)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await state.set_state(AdminActions.update_balance)
    await callback.answer()

@admin.message(AdminActions.update_balance)
async def set_new_balance(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    new_balance = int(message.text)
    await DB.update_balance(user_id, balance=new_balance)
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_balance}.")
    await state.clear()

@admin.callback_query(lambda c: c.data.startswith('update_rub_balance:'))
async def update_rub_balance_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.data.split(':')[1]
    await state.update_data(user_id=user_id)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä—É–±–ª—è—Ö:')
    await state.set_state(AdminActions.update_rub_balance)
    await callback.answer()

@admin.message(AdminActions.update_rub_balance)
async def set_new_rub_balance(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    new_balance = int(message.text)
    await DB.update_rub_balance(user_id, rub_balance=new_balance)
    await message.answer(f"–ë–∞–ª–∞–Ω—Å (–†—É–±–ª–∏) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_balance}.")
    await state.clear()