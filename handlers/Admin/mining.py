from aiogram import F, types
from aiogram.fsm.context import FSMContext
from utils.Imports import *
from .states import add_mining
from utils.kb import admin_kb
from .admin import admin

@admin.callback_query(F.data == 'adminMining')
async def mining_handler(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text='‚ûï –í—ã–¥–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥', callback_data='add_mining'))
    kb.add(InlineKeyboardButton(text='‚ûñ –ó–∞–±—Ä–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥', callback_data='minus_mining'))
    kb.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='admin_kb'))
    kb.adjust(1)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.as_markup())

@admin.callback_query(F.data == 'add_mining')
async def add_mining_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(add_mining.id)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –º–∞–π–Ω–∏–Ω–≥–∞:')
    await callback.answer()

@admin.callback_query(F.data == 'minus_mining')
async def remove_mining_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(add_mining.id2)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞:')
    await callback.answer()

@admin.message(add_mining.id)
async def process_add_mining(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.text.strip()
    await state.update_data(id=user_id)
    data = await state.get_data()
    
    try:
        success = await DB.add_mining(data['id'])
        if success:
            await bot.send_message(data['id'], '–í–∞–º –≤—ã–¥–∞–Ω –º–∞–π–Ω–∏–Ω–≥!')
            await message.answer(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {data["id"]} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –º–∞–π–Ω–∏–Ω–≥')
        else:
            await message.answer('‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥')
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞: {str(e)}')
    finally:
        await state.clear()

@admin.message(add_mining.id2)
async def process_remove_mining(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    await state.update_data(id2=user_id)
    data = await state.get_data()
    
    try:
        success = await DB.remove_mining(data['id2'])
        if success:
            await message.answer(f'‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data["id2"]} –æ—Ç–∫–ª—é—á–µ–Ω –º–∞–π–Ω–∏–Ω–≥')
        else:
            await message.answer('‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –º–∞–π–Ω–∏–Ω–≥–∞')
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞: {str(e)}')
    finally:
        await state.clear()