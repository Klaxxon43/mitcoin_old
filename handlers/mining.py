from untils.Imports import *
import API.usd as usd, time

mining = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–∞–π–Ω–∏–Ω–≥–∞
MINING_RATE_PER_HOUR = 1000  # 1000 –º–æ–Ω–µ—Ç –≤ —á–∞—Å
MAX_MINING_HOURS = 2         # –ú–∞–∫—Å–∏–º—É–º 2 —á–∞—Å–∞ –º–∞–π–Ω–∏–Ω–≥–∞
MIN_MINIG_TIME_MINUTES = 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–±–æ—Ä–∞ (60 –º–∏–Ω—É—Ç)


@mining.callback_query(F.data == 'mining')
async def mining_menu(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    mining_data = await DB.search_mining(user_id)

    if mining_data:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–æ–º
        kb = InlineKeyboardBuilder()
        kb.button(text='üÜô –£–ª—É—á—à–∏—Ç—å', callback_data='upgrade_mining')
        kb.button(text='üí∏ –°–æ–±—Ä–∞—Ç—å', callback_data='mining_collect')
        kb.button(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='mining_info')
        kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='back_menu')
        kb.adjust(2, 1, 1)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–∏–Ω–≥–µ
        time_str = await DB.get_last_collection_time(user_id)
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
            time_from_str = datetime.strptime(time_str, "%Y-%m-%d %H:%M:%S")
            current_time = datetime.now()
            time_diff = current_time - time_from_str
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            total_seconds = time_diff.total_seconds()
            total_minutes = total_seconds / 60
            total_hours = total_minutes / 60
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å (–Ω–µ –±–æ–ª–µ–µ MAX_MINING_HOURS)
            effective_mining_hours = min(total_hours, MAX_MINING_HOURS)
            mined_amount = effective_mining_hours * MINING_RATE_PER_HOUR
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ —Å–±–æ—Ä–∞ (–µ—Å–ª–∏ –º–µ–Ω—å—à–µ —á–∞—Å–∞)
            remaining_minutes = max(0, MIN_MINIG_TIME_MINUTES - total_minutes)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_hours = int(total_hours)
            display_minutes = int(total_minutes % 60)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            mining_info = (
                f"‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥ $MICO\n\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: {MINING_RATE_PER_HOUR} $MICO/—á–∞—Å\n"
                f"‚è≥ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {MAX_MINING_HOURS} —á–∞—Å–∞\n\n"
                f"üíé –î–æ—Å—Ç—É–ø–Ω–æ –∫ —Å–±–æ—Ä—É: {mined_amount:.2f} $MICO\n"
                f"üïí –ó–∞–º–∞–π–Ω–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {display_hours}—á {display_minutes}–º–∏–Ω\n\n"
            )
            
            if total_minutes < MIN_MINIG_TIME_MINUTES:
                mining_info += (
                    f"‚ö† –î–ª—è —Å–±–æ—Ä–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_MINIG_TIME_MINUTES} –º–∏–Ω—É—Ç –º–∞–π–Ω–∏–Ω–≥–∞\n"
                    f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {int(remaining_minutes)} –º–∏–Ω—É—Ç"
                )
            else:
                mining_info += f"‚úÖ –ú–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å {mined_amount:.2f} $MICO"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            mining_info = (
                f"‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥ $MICO\n\n"
                f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–∏\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            )

        await callback.message.edit_text(mining_info, reply_markup=kb.as_markup())
    else: 
        # try:
        #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∞–π–Ω–∏–Ω–≥–∞
        #     await bot.send_invoice(
        #         chat_id=user_id,
        #         title="–û–ø–ª–∞—Ç–∞ –º–∞–π–Ω–∏–Ω–≥–∞",
        #         description="–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–∞–π–Ω–∏–Ω–≥–æ–º, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç.",
        #         payload=f"user_{user_id}_stars_199",
        #         provider_token="YOUR_PROVIDER_TOKEN", 
        #         currency="XTR",  
        #         prices=[{"label": "Mining", "amount": 199}],
        #         start_parameter="stars_payment"
        #     )
            kb = InlineKeyboardBuilder()
            kb.button(text='üí≥ –ö—É–ø–∏—Ç—å', callback_data='mining_buy')
            kb.button(text='‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å', callback_data='mining_info')
            kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='back_menu') 
            kb.adjust(1)
            try:
                await callback.message.edit_text('–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞–π–Ω–∏–Ω–≥?', reply_markup=kb.as_markup())
            except:
                await callback.message.answer('–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞–π–Ω–∏–Ω–≥?', reply_markup=kb.as_markup())

        # except Exception as e:
        #     logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞: {e}")
        #     await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@mining.callback_query(F.data == 'mining_buy')
async def collect_mining(callback: types.CallbackQuery, bot: Bot):
    kb = InlineKeyboardBuilder()
    kb.button(text='‚≠êÔ∏è –ö—É–ø–∏—Ç—å –∑–∞ –∑–≤—ë–∑–¥—ã', callback_data='mining_buyStars')
    kb.button(text='üí≥ –ö—É–ø–∏—Ç—å —Ä—É–±–ª—è–º–∏', callback_data='mining_buyRub') 
    kb.button(text='üí≤ CryptoBot', callback_data='mining_buyUSD') 
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='mining') 
    kb.adjust(1)
    try:
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ', reply_markup=kb.as_markup())
    except:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ', reply_markup=kb.as_markup())


@mining.callback_query(F.data == 'mining_buyUSD')
async def collect_mining(callback: types.CallbackQuery, bot: Bot):
    try:
        user_id = callback.from_user.id
        invoice = await usd.create_invoice(4.5, purpose='mining')
        btn = InlineKeyboardBuilder()
        btn.add(InlineKeyboardButton(text='‚≠êÔ∏è –û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç', url=invoice['url']))
        btn.add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='BuyStars'))
        btn.adjust(1)
        await callback.message.edit_text('''
–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥ —á–µ—Ä–µ–∑ @send
–¶–µ–Ω–∞: 4.5üí≤
–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3—Ö –º–∏–Ω—É—Ç''', reply_markup=btn.as_markup())
        

        ttime = 0
        while True:
            result = await usd.check_payment_status(invoice['id'], purpose='mining')
            if result:
                try:
                    await DB.add_mining(callback.from_user.id, 1)
                    await callback.message.edit_text('''
–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç!
–ú–∞–π–Ω–∏–Ω–≥ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ''', reply_markup=back_menu_kb(user_id))
                except:

                    await callback.message.answer('''
–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç!
–ú–∞–π–Ω–∏–Ω–≥ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ''', reply_markup=back_menu_kb(user_id))

                return
                
            await asyncio.sleep(5)
            ttime += 5
            if ttime == 180:
                return
    except Exception as e:
        logger.error(f"Error in process_stars_purchase: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@mining.callback_query(F.data == 'mining_buyRub')
async def collect_mining(callback: types.CallbackQuery, bot: Bot):

    kb = InlineKeyboardBuilder()
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='mining_buy') 

    await callback.message.edit_text('''
üåö –í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –∫—É–ø–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥ —Ä—É–±–ª—è–º–∏
üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å 349 —Ä—É–±–ª–µ–π –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ
üì® –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–∏—Å–∞—Ç—å @Coin_var
    ''', reply_markup=kb.as_markup())

@mining.callback_query(F.data == 'mining_buyStars')
async def collect_mining(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    mining_data = await DB.search_mining(user_id)

    try:
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )
    except: pass

    if mining_data:
        pass
    else:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∞–π–Ω–∏–Ω–≥–∞
            await bot.send_invoice(
                chat_id=user_id,
                title="–û–ø–ª–∞—Ç–∞ –º–∞–π–Ω–∏–Ω–≥–∞",
                description="–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–∞–π–Ω–∏–Ω–≥–æ–º, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç.",
                payload=f"user_{user_id}_stars_199",
                provider_token="", 
                currency="XTR",  
                prices=[{"label": "Mining", "amount": 199}],
                start_parameter="stars_payment"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@mining.callback_query(F.data == 'mining_collect')
async def collect_mining(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    deposit = await DB.get_deposit_mining(user_id)
    dep = deposit[0][0] if deposit else 0

    if not dep:
        await callback.answer("–ú–∞–π–Ω–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–∏–Ω–≥–µ
        last_collection_time_str = await DB.get_last_collection_time(user_id)
        last_collection_time = datetime.strptime(last_collection_time_str, "%Y-%m-%d %H:%M:%S")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now()
        time_diff = current_time - last_collection_time
        total_seconds = time_diff.total_seconds()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        days = int(total_seconds // 86400)
        hours = int((total_seconds % 86400) // 3600)
        minutes = int((total_seconds % 3600) // 60)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏
        time_parts = []
        if days > 0:
            time_parts.append(f"{days} {'–¥–µ–Ω—å' if days == 1 else '–¥–Ω—è' if 1 < days < 5 else '–¥–Ω–µ–π'}")
        if hours > 0:
            time_parts.append(f"{hours} {'—á–∞—Å' if hours == 1 else '—á–∞—Å–∞' if 1 < hours < 5 else '—á–∞—Å–æ–≤'}")
        if minutes > 0 or (days == 0 and hours == 0):
            time_parts.append(f"{minutes} {'–º–∏–Ω—É—Ç–∞' if minutes == 1 else '–º–∏–Ω—É—Ç—ã' if 1 < minutes < 5 else '–º–∏–Ω—É—Ç'}")
        
        mined_time_str = ", ".join(time_parts)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞
        total_hours = total_seconds / 3600
        effective_mining_hours = min(total_hours, MAX_MINING_HOURS)
        mined_amount = effective_mining_hours * MINING_RATE_PER_HOUR
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        if total_seconds < MIN_MINIG_TIME_MINUTES * 60:
            remaining_seconds = MIN_MINIG_TIME_MINUTES * 60 - total_seconds
            remaining_minutes = int(remaining_seconds // 60)
            remaining_seconds = int(remaining_seconds % 60)
            
            await callback.answer(
                f"–î–ª—è —Å–±–æ—Ä–∞ –Ω—É–∂–Ω–æ –º–∞–π–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã {MIN_MINIG_TIME_MINUTES} –º–∏–Ω—É—Ç\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes} –º–∏–Ω {remaining_seconds} —Å–µ–∫", 
                show_alert=True
            )
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await DB.add_balance(user_id, mined_amount)
        await DB.update_last_collection_time(user_id, current_time)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ—Ä–µ
        message_text = (
            f"üí∏ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ!\n"
            f"‚è≥ –ó–∞–º–∞–π–Ω–µ–Ω–æ: {mined_time_str}\n"
            f"üí∞ –°—É–º–º–∞: {mined_amount:.2f} $MICO\n\n"
            f"üîÑ –ú–∞–π–Ω–∏–Ω–≥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        )

        await DB.add_mined_from_all_stats(user_id, mined_amount)
        
        try:
            await callback.message.edit_text(message_text)
        except:
            await callback.message.answer(message_text)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞
        await asyncio.sleep(3)
        await mining_menu(callback, bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–∞–π–Ω–∏–Ω–≥–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–∞–π–Ω–∏–Ω–≥–∞", show_alert=True)


@mining.callback_query(F.data == 'mining_info')
async def _(callback: types.CallbackQuery):
    btn = InlineKeyboardBuilder()
    btn.button(text='üîô –ù–∞–∑–∞–¥', callback_data='mining')

    mining_info = f"""
‚õèÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∞–π–Ω–∏–Ω–≥—É $MICO:

üí∞ {MINING_RATE_PER_HOUR} $MICO –≤ —á–∞—Å
‚è≥ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–∞–π–Ω–∏–Ω–≥–∞: {MAX_MINING_HOURS} —á–∞—Å–∞
üïí –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–±–æ—Ä–∞: 1 —á–∞—Å
üíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞ —Å–±–æ—Ä: {MINING_RATE_PER_HOUR * MAX_MINING_HOURS} $MICO

üîπ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
- –ú–∞–π–Ω–∏–Ω–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
- –°–æ–±—Ä–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç –º–∞–π–Ω–∏–Ω–≥–∞
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –æ–¥–∏–Ω —Å–±–æ—Ä - –∑–∞ 2 —á–∞—Å–∞
- –ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ —Ç–∞–π–º–µ—Ä —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è

üí° –°–æ–≤–µ—Ç—ã:
1. –°–æ–±–∏—Ä–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã–≥–æ–¥—ã. –ß–µ–º —á–∞—â–µ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ, —Ç–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –¥–æ—Ö–æ–¥
2. –£–ª—É—á—à–∞–π—Ç–µ –º–∞–π–Ω–∏–Ω–≥ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞ (–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ...) 
    """

    await callback.message.edit_text(mining_info, reply_markup=btn.as_markup())



@mining.callback_query(F.data == 'upgrade_mining')
async def _(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text='–ù–∞–∑–∞–¥', callback_data='mining')
    await callback.message.edit_text('–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ...', reply_markup=kb.as_markup())