# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os, asyncio, logging, random, uuid, sys, traceback
from datetime import datetime
from pathlib import Path
import pytz, requests
from aiocryptopay import AioCryptoPay, Networks
from cachetools import TTLCache

# Aiogram –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from aiogram import Bot, F, types, Router, Dispatcher
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent

# Aiogram —Ç–∏–ø—ã
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, InputMediaPhoto, ChatMemberUpdated,
    ContentType, LabeledPrice, PreCheckoutQuery,
    BufferedInputFile, Chat
)

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from datebase.db import DB, Promo
from untils.kb import (
    menu_kb, back_menu_kb, profile_kb, pr_menu_kb,
    pr_menu_canc, work_menu_kb, back_work_menu_kb,
    back_profile_kb, select_deposit_menu_kb,
    back_dep_kb, cancel_all_kb
)
from config import CRYPTOBOT_TOKEN, ADMINS_ID
import API.usd as usd, time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BuyStars = Router()

STAR_PRICE_RUB = 1.6  # 1 –∑–≤–µ–∑–¥–∞ = 1.6 —Ä—É–±–ª—è
BUY_STARS_CHAT = -4891588772


class BuyStarsStates(StatesGroup):
    amount = State()
    payment_method = State()

@BuyStars.callback_query(F.data == 'BuyStars')
async def show_buy_stars_menu(callback: types.CallbackQuery, bot: Bot):
    try:
        current_currency = (await DB.get_stars_sell_currency())[0] 
        
        btn = InlineKeyboardBuilder()
        btn.add(InlineKeyboardButton(text='‚≠êÔ∏è –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã', callback_data='buy_stars_start'))
        btn.add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_menu'))
        btn.adjust(1)
        
        await callback.message.edit_text(
            f"–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: 50 –∑–≤—ë–∑–¥\n"
            f"–¶–µ–Ω–∞: 1‚≠êÔ∏è = {current_currency}‚ÇΩ\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n"
            f"- –†—É–±–ª–∏ (–ø–µ—Ä–µ–≤–æ–¥–æ–º)\n"
            f"- USDT (—á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞)\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Å–∫–æ—Ä–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–∏ –∑–≤—ë–∑–¥—ã",
            reply_markup=btn.as_markup()
        )
        
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Error in BuyStars: {e}")

@BuyStars.callback_query(F.data == 'buy_stars_start')
async def start_buy_stars(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await state.set_state(BuyStarsStates.amount)
    await callback.message.edit_text(
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ (–º–∏–Ω. 50)',
        reply_markup=back_menu_kb(user_id)
    )

@BuyStars.message(BuyStarsStates.amount)
async def process_stars_amount(message: types.Message, state: FSMContext):
    try:
        current_currency = (await DB.get_stars_sell_currency())[0] 
        stars_amount = int(message.text)
        if stars_amount < 50:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - 50 –∑–≤—ë–∑–¥!")
            return
        
        amount_rub = stars_amount * current_currency
        await state.update_data(stars_amount=stars_amount, amount_rub=amount_rub)
        
        btn = InlineKeyboardBuilder()
        btn.add(InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∞ —Ä—É–±–ª—è–º–∏', callback_data='pay_rub'))
        btn.add(InlineKeyboardButton(text='üí≤ –û–ø–ª–∞—Ç–∞ USDT', callback_data='pay_usd'))
        btn.add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='BuyStars'))
        btn.adjust(1)
        
        await message.answer(
            f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {stars_amount}‚≠ê –∑–∞ {amount_rub:.2f}‚ÇΩ\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
            reply_markup=btn.as_markup()
        )
        await state.set_state(BuyStarsStates.payment_method)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"Error in process_stars_amount: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@BuyStars.callback_query(BuyStarsStates.payment_method, F.data == 'pay_rub')
async def pay_with_rub(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    stars_amount = data['stars_amount']
    amount_rub = data['amount_rub']
    
    btn = InlineKeyboardBuilder()
    btn.add(InlineKeyboardButton(text='üí∏ –û–ø–ª–∞—Ç–∏—Ç—å', url='https://t.me/Coin_var'))
    btn.add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='buy_stars_start'))
    btn.adjust(1)
    
    await callback.message.edit_text(
        f'–î–ª—è –ø–æ–∫—É–ø–∫–∏ {stars_amount}‚≠ê –∑–∞ {amount_rub:.2f}‚ÇΩ:\n'
        '1. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n'
        '2. –û–ø–ª–∞—Ç–∏—Ç–µ –∑–≤—ë–∑–¥—ã –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∏–º —Ä–µ–∫–∑–≤–µ–∑–∏—Ç–∞–º\n'
        '3. –í —Å–∫–æ—Ä–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–∏ –∑–≤—ë–∑–¥—ã\n\n'
        '–í–Ω–∏–º–∞–Ω–∏–µ! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã!',
        reply_markup=btn.as_markup()
    )
    await state.clear()

@BuyStars.callback_query(BuyStarsStates.payment_method, F.data == 'pay_usd')
async def pay_with_usd(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id
    data = await state.get_data()
    stars_amount = data['stars_amount']
    amount_rub = data['amount_rub']
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã
        amount_usd = await convert_rub_to_usd(amount_rub)
        if amount_usd <= 0:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ USDT
        invoice = await usd.create_invoice(amount_usd, purpose='BuyStars')
        if not invoice:
            raise ValueError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞")
            
        btn = InlineKeyboardBuilder()
        btn.add(InlineKeyboardButton(text='üí≤ –û–ø–ª–∞—Ç–∏—Ç—å USDT', url=invoice['url']))
        btn.add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='buy_stars_start'))
        btn.adjust(1)
        
        msg = await callback.message.answer(
            f'–î–ª—è –ø–æ–∫—É–ø–∫–∏ {stars_amount}‚≠ê –æ–ø–ª–∞—Ç–∏—Ç–µ {amount_usd:.2f} USDT\n'
            '–ù–∞ –æ–ø–ª–∞—Ç—É –¥–∞–µ—Ç—Å—è 3 –º–∏–Ω—É—Ç—ã. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–≤—ë–∑–¥—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
            reply_markup=btn.as_markup()
        )
        
        # –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
        ttime = 0
        while ttime < 180:  # 3 –º–∏–Ω—É—Ç—ã
            result = await usd.check_payment_status(invoice['id'],purpose='BuyStars')
            if result:
                await callback.message.answer(
                    '‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–∫–æ—Ä–æ –∑–≤—ë–∑–¥—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã ',
                    reply_markup=back_menu_kb(user_id)
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                await bot.send_message(
                    chat_id=BUY_STARS_CHAT,
                    text=f'''
‚≠êÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∑–≤—ë–∑–¥! ‚≠êÔ∏è
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id} - @{callback.from_user.username}
–ö—É–ø–ª–µ–Ω–æ: {stars_amount} ‚≠êÔ∏è
–û–ø–ª–∞—á–µ–Ω–æ: {amount_usd:.2f} USDT ({amount_rub:.2f}‚ÇΩ)
–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: USDT'''
                )
                break
                
            await asyncio.sleep(5)
            ttime += 5
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in pay_with_usd: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
            reply_markup=back_menu_kb(user_id)
        )
        await state.clear()

async def convert_rub_to_usd(amount_rub: float) -> float:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä—É–±–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É
    :param amount_rub: –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    :return: –°—É–º–º–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    """
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
        # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å 1 USD = 80 RUB
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –ø–æ–ª—É—á–∞—Ç—å –∫—É—Ä—Å –∏–∑ API
        usd_rate = 80.0  # –ü—Ä–∏–º–µ—Ä: 1 USD = 80 RUB
        return amount_rub / usd_rate
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return 0.0