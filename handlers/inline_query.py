from untils.Imports import *

iq = Router()

async def generate_check_image(amount: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not os.path.exists("check.png"):
            return None
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open("check.png")
        draw = ImageDraw.Draw(image)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        font_path = "ocra_0.ttf"
        try:
            font_size = 48  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            font = ImageFont.truetype(font_path, font_size)
        except:
            # –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            font = ImageFont.load_default()
        
        # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        text = f"{amount} $MICO"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (—Ü–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º textbbox –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ textsize
        text_bbox = draw.textbbox((0, 0), text, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
        
        x = (image.width - text_width) // 2
        y = (image.height - text_height) // 2
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, –¥–æ–±–∞–≤–ª—è—è/—É–±–∞–≤–ª—è—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
        x += 0  # –°–º–µ—â–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        y += 0  # –°–º–µ—â–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        draw.text((x, y), text, font=font, fill="black")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        temp_path = f"temp_check_{amount}.png"
        image.save(temp_path)
        
        return temp_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞: {e}")
        return None

@iq.inline_query()
async def inline_query_handler(inline_query: types.InlineQuery, bot: Bot):
    query = inline_query.query  # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ @username

    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Å—Ç–∏
        parts = query.split()
        if not parts:
            raise ValueError("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞. –§–æ—Ä–º–∞—Ç: [—Å—É–º–º–∞] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ].")

        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —á–µ–∫–∞
        amount = int(parts[0])
        if amount < 1000:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–µ–∫–∞ - 1000 MitCoin.")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
        quantity = int(parts[1]) if len(parts) > 1 else 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        user_id = inline_query.from_user.id
        user_balance = await DB.get_user_balance(user_id)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ
        amount_per_activation = amount // quantity
        total_amount = amount_per_activation * quantity

        if user_balance < total_amount:
            result_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {total_amount} MitCoin."
            description = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} MitCoin."
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞
            uid = str(uuid.uuid4())
            await DB.update_balance(user_id, balance=user_balance - total_amount)
            
            check_type = 1 if quantity == 1 else 2  # 1 - —Å–∏–Ω–≥–ª, 2 - –º—É–ª—å—Ç–∏
            
            await DB.create_check(
                uid=uid,
                user_id=user_id,
                type=check_type,
                sum=amount_per_activation,
                amount=quantity,
                ref_bonus=None,
                ref_fund=None,
                locked_for_user=None
            )

            # –¢–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if quantity == 1:
                result_text = f"üí∏ –ß–µ–∫ –Ω–∞ —Å—É–º–º—É {amount_per_activation} $MICO"
                description = f"–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫ –Ω–∞ {amount_per_activation} $MICO"
            else:
                result_text = f"üí∏ –ú—É–ª—å—Ç–∏-—á–µ–∫: {quantity} –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø–æ {amount_per_activation} $MICO"
                description = f"–ú—É–ª—å—Ç–∏-—á–µ–∫: {quantity} –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø–æ {amount_per_activation} $MICO"
            
            await DB.add_transaction(
                user_id=inline_query.from_user.id,
                amount=total_amount, 
                description=f"—Å–æ–∑–¥–∞–Ω–∏–µ {'—Å–∏–Ω–≥–ª' if quantity == 1 else '–º—É–ª—å—Ç–∏'} —á–µ–∫–∞ —á–µ—Ä–µ–∑ inline",
                additional_info=None
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞
            image_path = await generate_check_image(amount_per_activation)
            
            # –°–æ–∑–¥–∞–µ–º Inline-—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–æ–π
            bot_username = (await bot.get_me()).username
            check_link = f"https://t.me/{bot_username}?start=check_{uid}"
            
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if image_path:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                with open(image_path, "rb") as image_file:
                    image_data = image_file.read()
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL
                # –ó–¥–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π URL
                thumbnail_url = "https://example.com/check.png"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                inline_result = InlineQueryResultArticle(
                    id="1",
                    title="–°–æ–∑–¥–∞—Ç—å —á–µ–∫",
                    input_message_content=InputTextMessageContent(
                        message_text=result_text,
                        parse_mode="HTML"
                    ),
                    description=description,
                    thumbnail_url=thumbnail_url,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –≤–º–µ—Å—Ç–æ –≤–ª–æ–∂–µ–Ω–∏—è
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text=f"–ü–æ–ª—É—á–∏—Ç—å {amount_per_activation} $MICO",
                                    url=check_link
                                )
                            ]
                        ]
                    ),
                    thumbnail_width=100,
                    thumbnail_height=100
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await bot.answer_inline_query(
                    inline_query.id,
                    results=[inline_result],
                    cache_time=1
                )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(image_path)
            else:
                # –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                inline_result = InlineQueryResultArticle(
                    id="1",
                    title="–°–æ–∑–¥–∞—Ç—å —á–µ–∫",
                    input_message_content=InputTextMessageContent(
                        message_text=result_text,
                        parse_mode="HTML"
                    ),
                    description=description,
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text=f"–ü–æ–ª—É—á–∏—Ç—å {amount_per_activation} $MICO",
                                    url=check_link
                                )
                            ]
                        ]
                    )
                )
                await bot.answer_inline_query(inline_query.id, results=[inline_result], cache_time=1)

    except ValueError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –∏–ª–∏ ID)
        error_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        inline_result = InlineQueryResultArticle(
            id="1",
            title="–û—à–∏–±–∫–∞",
            input_message_content=InputTextMessageContent(message_text=error_text),
            description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        )
        await bot.answer_inline_query(inline_query.id, results=[inline_result], cache_time=1)