from .tasks import *
from utils.Imports import *
import asyncio
from typing import Optional, List, Dict, Any

# Constants
LINK_TASK_PRICE = 1500  # Price for one link task
VERIFICATION_TYPES = {
    'auto': 0,
    'manual': 1
}

# States for link task creation
class LinkPromotionStates(StatesGroup):
    link_task_create = State()  # Entering task count
    link_task_create2 = State()  # Entering link
    link_task_create3 = State()  # Selecting verification type
    link_task_create4 = State()  # Entering manual verification description
    performing_task = State()  # Performing the task

# --- Task Creation Handlers ---

@tasks.callback_query(F.data == 'link_task_button')
async def link_task_handler(callback: types.CallbackQuery, state: FSMContext):
    """Initial handler for link task creation"""
    await callback.answer()
    user_id = callback.from_user.id
    
    try:
        user = await DB.select_user(user_id)
        balance = user.get('balance', 0)
        maxcount = balance // LINK_TASK_PRICE
        
        await callback.message.edit_text(
            f'''üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ\n\n'''
            f'üíµ {LINK_TASK_PRICE} MITcoin = 1 –∑–∞–¥–∞–Ω–∏–µ\n\n'
            f'–ë–∞–ª–∞–Ω—Å: <b>{balance}</b>; –í—Å–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å <b>{maxcount}</b> –∑–∞–¥–∞–Ω–∏–π\n\n'
            f'<b>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∑–∞–¥–∞–Ω–∏–π?</b>‚ùì\n\n'
            f'<em>–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {LINK_TASK_PRICE} MITcoin</em>',
            reply_markup=pr_menu_canc()
        )
        await state.set_state(LinkPromotionStates.link_task_create)
    except Exception as e:
        logger.info(f"Error in link_task_handler: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@tasks.message(LinkPromotionStates.link_task_create)
async def link_task_count_handler(message: types.Message, state: FSMContext):
    """Handler for processing task count input"""
    user_id = message.from_user.id
    
    try:
        user = await DB.select_user(user_id)
        balance = user.get('balance', 0)
        
        try:
            task_count = int(message.text.strip())
            if task_count < 1:
                raise ValueError("Count must be positive")
                
            total_price = LINK_TASK_PRICE * task_count
            
            if balance >= total_price:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
                    callback_data="link_task_confirm"))
                builder.add(InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", 
                    callback_data="pr_menu_cancel"))
                
                await message.answer(
                    f'üëç <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {task_count}</b>\n'
                    f'üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} MITcoin</b>\n\n'
                    f'<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...</em>',
                    reply_markup=builder.as_markup()
                )
                await state.update_data(uscount=task_count, price=total_price)
            else:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(
                    text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", 
                    callback_data="cancel_all"))
                builder.add(InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", 
                    callback_data="pr_menu_cancel"))
                
                await message.answer(
                    f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>\n'
                    f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin\n'
                    f'<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π...</em>',
                    reply_markup=builder.as_markup()
                )
        except ValueError:
            await message.answer(
                '<b>‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç 1 –∑–∞–¥–∞–Ω–∏—è!</b>\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ...',
                reply_markup=pr_menu_canc()
            )
    except Exception as e:
        logger.info(f"Error in link_task_count_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@tasks.callback_query(F.data == 'link_task_confirm')
async def link_task_confirm_handler(callback: types.CallbackQuery, state: FSMContext):
    """Handler for confirming task count and proceeding to link input"""
    await callback.message.edit_text(
        'üîó –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏. –Ø –∂–¥—É...',
        reply_markup=pr_menu_canc()
    )
    await state.set_state(LinkPromotionStates.link_task_create2)

@tasks.message(LinkPromotionStates.link_task_create2)
async def link_task_link_handler(message: types.Message, state: FSMContext):
    """Handler for processing the link input"""
    link = message.text.strip()
    
    if not link.startswith("https://t.me/"):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://t.me/.")
        return
    
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ü§ñ", 
            callback_data="auto_check"))
        builder.add(InlineKeyboardButton(
            text="–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ üë®‚Äçüíª", 
            callback_data="manual_check"))
        
        await message.answer(
            "üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"
            "ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞.\n"
            "üë®‚Äçüíª <b>–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=builder.as_markup()
        )
        
        data = await state.get_data()
        await state.update_data(
            link=link,
            amount=data['uscount'],
            price=data['price']
        )
        await state.set_state(LinkPromotionStates.link_task_create3)
    except Exception as e:
        logger.info(f"Error in link_task_link_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@tasks.callback_query(F.data == 'auto_check')
async def auto_check_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """Handler for auto verification type selection"""
    user_id = callback.from_user.id
    data = await state.get_data()
    
    try:
        link = data['link']
        amount = data['amount']
        price = data['price']
        
        # Deduct balance
        new_balance = await DB.update_balance(user_id, -price)
        
        # Create task with auto verification (other=0)
        await DB.add_task(
            user_id=user_id,
            target_id=link,
            amount=amount,
            task_type=5,  # Link task type
            other=VERIFICATION_TYPES['auto']  # 0 for auto verification
        )
        
        # Add transaction record
        await DB.add_transaction(
            user_id=user_id,
            amount=-price,
            description="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ (–∞–≤—Ç–æ)",
            additional_info=None
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", 
            callback_data="back_menu"))
        
        await callback.message.answer(
            "ü•≥ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üòâ",
            reply_markup=builder.as_markup()
        )
        
        # Notify admin channel
        await bot.send_message(
            TASKS_CHAT_ID,
            f'''üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
üí∏ –¶–µ–Ω–∞: {LINK_TASK_PRICE} 
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}'''
        )
        
        await state.clear()
        await RedisTasksManager.refresh_task_cache(bot, 'link')
    except Exception as e:
        logger.info(f"Error in auto_check_handler: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@tasks.callback_query(F.data == 'manual_check')
async def manual_check_handler(callback: types.CallbackQuery, state: FSMContext):
    """Handler for manual verification type selection"""
    await callback.message.answer(
        "üìù <b>–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ:</b>\n\n"
        "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–≤–µ—Ç–∞.'</em>",
        reply_markup=pr_menu_canc()
    )
    await state.set_state(LinkPromotionStates.link_task_create4)

@tasks.message(LinkPromotionStates.link_task_create4)
async def manual_description_handler(message: types.Message, state: FSMContext, bot: Bot):
    """Handler for processing manual verification description"""
    user_id = message.from_user.id
    description = message.text.strip()
    data = await state.get_data()
    
    try:
        link = data['link']
        amount = data['amount']
        price = data['price']
        
        # Deduct balance
        new_balance = await DB.update_balance(user_id, -price)
        
        # Create task with manual verification (other="1|description")
        await DB.add_task(
            user_id=user_id,
            target_id=link,
            amount=amount,
            task_type=5,  # Link task type
            other=f"{VERIFICATION_TYPES['manual']}|{description}"  # 1 for manual verification
        )
        
        # Add transaction record
        await DB.add_transaction(
            user_id=user_id,
            amount=-price,
            description="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ (—Ä—É—á–Ω–∞—è)",
            additional_info=None
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", 
            callback_data="back_menu"))
        
        await message.answer(
            "ü•≥ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üòâ",
            reply_markup=builder.as_markup()
        )
        
        # Notify admin channel
        await bot.send_message(
            TASKS_CHAT_ID,
            f'''üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ, —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚ùóÔ∏è –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {description}
üí∏ –¶–µ–Ω–∞: {LINK_TASK_PRICE} 
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}'''
        )
        
        await state.clear()
        await RedisTasksManager.refresh_task_cache(bot, 'link')
    except Exception as e:
        logger.info(f"Error in manual_description_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- Task Execution Handlers ---

@tasks.callback_query(F.data == 'work_link')
async def works_link_handler(callback: types.CallbackQuery, bot: Bot):
    """Handler for showing available link tasks"""
    user_id = callback.from_user.id
    
    try:
        # Get cached tasks
        all_tasks = await RedisTasksManager.get_cached_tasks('link') or []
        
        # Filter tasks by verification type and completion status
        auto_tasks = []
        manual_tasks = []
        
        for task in all_tasks:
            try:
                # Skip if completed or failed
                if (await DB.is_task_completed(user_id, task['id']) or 
                    await DB.is_task_failed(user_id, task['id'])):
                    continue
                
                # Check verification type from 'other' field
                if str(task.get('other', '')).startswith(f"{VERIFICATION_TYPES['manual']}|"):
                    manual_tasks.append(task)
                else:
                    auto_tasks.append(task)
            except Exception as e:
                logger.info(f"Error processing task {task.get('id')}: {e}")
                continue
        
        # Prepare response
        status_text = (
            "üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ:</b>\n\n"
            f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {len(auto_tasks)} –∑–∞–¥–∞–Ω–∏–π\n"
            f"üë®‚Äçüíª <b>–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {len(manual_tasks)} –∑–∞–¥–∞–Ω–∏–π\n\n"
            "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏:</i>"
        )
        
        # Create keyboard
        builder = InlineKeyboardBuilder()
        
        # Add buttons with counts
        builder.add(InlineKeyboardButton(
                text=f"–ê–≤—Ç–æ ü§ñ ({len(auto_tasks)})", 
                callback_data="work_link_auto"))
        
        builder.add(InlineKeyboardButton(
                text=f"–†—É—á–Ω–∞—è üë®‚Äçüíª ({len(manual_tasks)})", 
                callback_data="work_link_manual"))

        
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥", 
            callback_data="work_menu"))
        
        builder.adjust(1)
        
        await callback.message.edit_text(
            status_text,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.info(f"Error in works_link_handler: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏—è—Ö",
            reply_markup=back_work_menu_kb(user_id)
        )

@tasks.callback_query(F.data == 'work_link_auto')
async def work_link_auto_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    """Handler for auto verification link tasks"""
    user_id = callback.from_user.id
    
    try:
        # Get cached tasks
        all_tasks = await RedisTasksManager.get_cached_tasks('link') or []
        
        # Filter auto verification tasks
        available_tasks = []
        for task in all_tasks:
            try:
                # Skip if completed or failed
                if not await DB.is_task_available_for_user(user_id, task['id']):
                    continue
                
                # Check for auto verification (other doesn't start with "1|")
                logger.info(task)
                logger.info(VERIFICATION_TYPES['manual'])
                logger.info(str(task.get('other', '')).startswith(f"{VERIFICATION_TYPES['manual']}|"))
                if not str(task.get('other', '')).startswith(f"{VERIFICATION_TYPES['manual']}|"):
                    available_tasks.append(task)
            except Exception as e:
                logger.info(f"Error processing task {task.get('id')}: {e}")
                continue
        
        if not available_tasks:
            await callback.message.edit_text(
                "‚è≥ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π",
                reply_markup=back_work_menu_kb(user_id))
            return
        
        # Select random task
        task = random.choice(available_tasks)
        
        # Save task data in state
        await state.set_state(LinkPromotionStates.performing_task)
        await state.update_data(
            task_id=task['id'],
            target_link=task['target_id'],
            task_type=VERIFICATION_TYPES['auto']  # 0 for auto verification
        )

        await callback.message.edit_text(
            f"üîó <b>–ó–∞–¥–∞–Ω–∏–µ:</b> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{task['target_id']}\n\n"
            "‚û°Ô∏è –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_link_{task['id']}")],
                [InlineKeyboardButton(text="‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç", callback_data=f"report_link_{task['id']}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"work_link")]
            ]),
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.info(f"Error in work_link_auto_handler: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_work_menu_kb(user_id)
        )

@tasks.callback_query(F.data == 'work_link_manual')
async def work_link_manual_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    """Handler for manual verification link tasks"""
    user_id = callback.from_user.id
    
    try:
        # Get cached tasks
        all_tasks = await RedisTasksManager.get_cached_tasks('link') or []
        
        # Filter manual verification tasks
        available_tasks = []
        for task in all_tasks:
            try:
                # Skip if completed or failed
                if not await DB.is_task_available_for_user(user_id, task['id']):
                    continue
                
                # Check for manual verification (other starts with "1|")
                if str(task.get('other', '')).startswith(f"{VERIFICATION_TYPES['manual']}|"):
                    available_tasks.append(task)
            except Exception as e:
                logger.info(f"Error processing task {task.get('id')}: {e}")
                continue
        
        if not available_tasks:
            await callback.message.edit_text(
                "‚è≥ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π",
                reply_markup=back_work_menu_kb(user_id))
            return
        
        # Select random task
        task = random.choice(available_tasks)
        
        # Extract description from other field
        description = str(task.get('other', '')).split('|', 1)[1] if '|' in str(task.get('other', '')) else "–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"
        
        # Save task data in state
        await state.set_state(LinkPromotionStates.performing_task)
        await state.update_data(
            task_id=task['id'],
            target_link=task['target_id'],
            task_type=VERIFICATION_TYPES['manual'],  # 1 for manual verification
            description=description
        )

        await callback.message.edit_text(
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {task['target_id']}\n\n"
            f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {description}\n\n"
            f"üì∑ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data=f"send_link_screenshot_{task['id']}")],
                [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_link_{task['id']}")],
                [InlineKeyboardButton(text="‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç", callback_data=f"report_link_{task['id']}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"work_link")]
            ]),
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.info(f"Error in work_link_manual_handler: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_work_menu_kb(user_id)
        )

@tasks.message(F.forward_from, LinkPromotionStates.performing_task)
async def check_forwarded_message(message: types.Message, bot: Bot, state: FSMContext):
    """Handler for checking forwarded message (auto verification)"""
    user_id = message.from_user.id
    forwarded_from = message.forward_from
    
    if not forwarded_from:
        await message.answer("‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º –æ—Ç –±–æ—Ç–∞.")
        return
    
    data = await state.get_data()
    task_id = data.get("task_id")
    target_link = data.get("target_link")
    task_type = data.get("task_type")
    
    if not task_id or not target_link or task_type != VERIFICATION_TYPES['auto']:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    try:
        # Extract bot username from link
        bot_username = target_link.split("/")[-1].split("?")[0]
        
        if forwarded_from.username == bot_username:
            # Task completed successfully
            await DB.add_completed_task(
                user_id=user_id,
                task_id=task_id,
                target_id=target_link,
                task_sum=LINK_TASK_PRICE,
                owner_id=user_id,
                status=0
            )
            
            # Update user balance
            await DB.add_balance(user_id, LINK_TASK_PRICE)
            
            # Update statistics
            await update_dayly_and_weekly_tasks_statics(user_id)
            await DB.increment_statistics(1, 'links')
            await DB.increment_statistics(2, 'links')
            await DB.increment_statistics(1, 'all_taasks')
            await DB.increment_statistics(2, 'all_taasks')
            
            await message.answer(
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {LINK_TASK_PRICE} MITcoin.\n\n"
                f"üîó –°—Å—ã–ª–∫–∞: {target_link}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è≠Ô∏è", callback_data="work_link_auto")]]
                ))
            
            # Decrease task amount
            task = await DB.get_task_by_id(task_id)
            if task and task[3] > 0:
                await DB.update_task_amount2(task_id, task[3] - 1)
            
            await state.clear()
        else:
            await message.answer("‚ùå –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–∏—é.")
    except Exception as e:
        logger.info(f"Error in check_forwarded_message: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@tasks.message(F.photo, LinkPromotionStates.performing_task)
async def handle_screenshot(message: types.Message, state: FSMContext, bot: Bot):
    """Handler for processing screenshot (manual verification)"""
    user_id = message.from_user.id
    data = await state.get_data()
    task_id = data.get('task_id')
    target_link = data.get('target_link')
    task_type = data.get('task_type')
    description = data.get('description', '')
    
    if task_type != VERIFICATION_TYPES['manual']:
        await message.answer("‚ùå –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
    
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return
    
    try:
        screenshot_id = message.photo[-1].file_id
        
        # Add to pending tasks
        await DB.add_pending_reaction_task(
            user_id=user_id,
            task_id=task_id,
            target_id=target_link,
            post_id=0,
            reaction=0,
            screenshot=screenshot_id
        )
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚è≠ –î–∞–ª–µ–µ', callback_data='work_link_manual')],
            [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='work_menu')]
        ])
        
        await message.answer(
            "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=kb
        )
        
        # Send to admin for verification
        builder = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                callback_data=f"confirm_link_{task_id}_{user_id}")],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                callback_data=f"reject_link_{task_id}_{user_id}")]
        ])

        await bot.send_photo(
            CHECK_CHAT_ID,
            photo=screenshot_id,
            caption=(
                f"#—Å—Å—ã–ª–∫–∞\n"
                f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {user_id})\n"
                f"üîó –°—Å—ã–ª–∫–∞: {target_link}\n"
                f"üìù –£—Å–ª–æ–≤–∏–µ: {description}\n"
                f"üí∏ –ù–∞–≥—Ä–∞–¥–∞: {LINK_TASK_PRICE} MITcoin\n"
                f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
            ),
            reply_markup=builder
        )
        
        await state.clear()
    except Exception as e:
        logger.info(f"Error in handle_screenshot: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@tasks.callback_query(F.data.startswith('confirm_link_'))
async def confirm_link_handler(callback: types.CallbackQuery, bot: Bot):
    """Handler for admin confirming a link task"""
    try:
        parts = callback.data.split('_')
        task_id = int(parts[2])
        user_id = int(parts[3])
        
        # Get pending task
        pending_task = await DB.get_pending_reaction_task(task_id, user_id)
        if not pending_task:
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # Mark as completed
        await DB.add_completed_task(
            user_id=user_id,
            task_id=task_id,
            target_id=pending_task[3],  # target_id
            task_sum=LINK_TASK_PRICE,
            owner_id=user_id,
            status=0
        )
        
        # Delete pending task
        await DB.delete_pending_reaction_task(task_id, user_id)
        
        # Update user balance
        await DB.add_balance(user_id, LINK_TASK_PRICE)
        
        # Decrease task amount
        task = await DB.get_task_by_id(task_id)
        if task and task[3] > 0:
            await DB.update_task_amount2(task_id, task[3] - 1)
        
        # Notify user
        await bot.send_message(
            user_id,
            f"üéâ <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
            f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {LINK_TASK_PRICE} MITcoin\n"
            f"üîó –°—Å—ã–ª–∫–∞: {pending_task[3]}\n"
            f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
        )
        
        # Update statistics
        await update_dayly_and_weekly_tasks_statics(user_id)
        await DB.increment_statistics(1, 'links')
        await DB.increment_statistics(2, 'links')
        await DB.increment_statistics(1, 'all_taasks')
        await DB.increment_statistics(2, 'all_taasks')
        
        await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
    except Exception as e:
        logger.info(f"Error in confirm_link_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")

@tasks.callback_query(F.data.startswith('reject_link_'))
async def reject_link_handler(callback: types.CallbackQuery, bot: Bot):
    """Handler for admin rejecting a link task"""
    try:
        parts = callback.data.split('_')
        task_id = int(parts[2])
        user_id = int(parts[3])
        
        # Get pending task
        pending_task = await DB.get_pending_reaction_task(task_id, user_id)
        if not pending_task:
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # Mark as failed
        await DB.add_failed_task(user_id, task_id)
        
        # Delete pending task
        await DB.delete_pending_reaction_task(task_id, user_id)
        
        # Notify user
        await bot.send_message(
            user_id,
            f"‚ùå <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</b>\n\n"
            f"üîó –°—Å—ã–ª–∫–∞: {pending_task[3]}\n"
            f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        )
        
        # Notify admin
        await bot.send_message(
            CHECK_CHAT_ID,
            f"‚ùå <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n"
            f"üîó –°—Å—ã–ª–∫–∞: {pending_task[3]}\n"
            f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
        )
        
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.info(f"Error in reject_link_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")