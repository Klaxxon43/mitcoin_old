from .tasks import *

@tasks.callback_query(F.data == 'link_task_button')
async def link_task_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    maxcount = balance // all_price['link']
    await callback.message.edit_text(f'''
üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ

üíµ {all_price['link']} MITcoin = 1 –∑–∞–¥–∞–Ω–∏–µ

–±–∞–ª–∞–Ω—Å: <b>{balance}</b>; –í—Å–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å <b>{maxcount}</b> –∑–∞–¥–∞–Ω–∏–π

<b>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∑–∞–¥–∞–Ω–∏–π</b>‚ùì

<em>–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {all_price['link']} MITcoin</em>
    ''', reply_markup=pr_menu_canc())
    await state.set_state(LinkPromotionStates.link_task_create)

@tasks.message(LinkPromotionStates.link_task_create)
async def link_task2(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id) 
    balance = user['balance']
    if balance is None:
        balance = 0
    try:
        uscount = int(message.text.strip())
        if uscount >= 1:
            price = all_price['link'] * uscount
            await state.update_data(uscount=uscount, price=price, balance=balance)
            if balance >= price:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="link_task_confirm"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üëç <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {uscount}</b>\nüí∞<b> –°—Ç–æ–∏–º–æ—Å—Ç—å - {price} MITcoin</b>\n\n<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...</em>',
                    reply_markup=builder.as_markup())
            else:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="cancel_all"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b> \n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin\n<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π...</em>',
                    reply_markup=builder.as_markup())
        else:
            await message.answer('<b>‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç 1 –∑–∞–¥–∞–Ω–∏—è!</b>\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ...',
                                 reply_markup=pr_menu_canc())
    except ValueError:
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ...', reply_markup=pr_menu_canc())

@tasks.callback_query(F.data == 'link_task_confirm')
async def link_task3(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    uscount = data.get('uscount')
    price = data.get('price')
    balance = data.get('balance')
    await state.clear()
    await callback.message.edit_text(f'''
üîó –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏. –Ø –∂–¥—É...
    ''', reply_markup=pr_menu_canc())
    await state.set_state(LinkPromotionStates.link_task_create2)
    await state.update_data(uscount=uscount, price=price, balance=balance)

@tasks.message(LinkPromotionStates.link_task_create2)
async def link_task4(message: types.Message, state: FSMContext, bot: Bot):
    async with task_creation_lock:
        user_id = message.from_user.id
        data = await state.get_data()
        amount = data.get('uscount')
        price = data.get('price')
        balance = data.get('balance')

        link = message.text.strip()
        if not link.startswith("https://t.me/"):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://t.me/.")
            return

        try:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ü§ñ", callback_data="auto_check"))
            builder.add(InlineKeyboardButton(text="–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ üë®‚Äçüíª", callback_data="manual_check"))
            await message.answer(
                "üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"
                "ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞.\n"
                "üë®‚Äçüíª <b>–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=builder.as_markup())
            await state.update_data(link=link, amount=amount, price=price, balance=balance)
            await state.set_state(LinkPromotionStates.link_task_create3)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@tasks.callback_query(F.data == 'auto_check')
async def auto_check_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_id = callback.from_user.id
    link = data.get('link')
    amount = data.get('amount')
    price = data.get('price')
    balance = data.get('balance')

    try:
        task_type = 5
        other = 0  # 0 - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        new_balance = balance - price
        await DB.update_balance(user_id, balance=new_balance)
        await DB.add_task(user_id=user_id, target_id=link, amount=amount, task_type=task_type, other=other)

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
        await callback.message.answer(
            "ü•≥ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>\n\n–ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üòâ",
            reply_markup=builder.as_markup())
        await DB.add_transaction(
            user_id=callback.from_user.id,
            amount=price, 
            description="—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ",
            additional_info=None
        )

        await bot.send_message(TASKS_CHAT_ID, f'''
üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
üí∏ –¶–µ–Ω–∞: {all_price['link']} 
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {amount * all_price['link']} 
''')
        await state.clear()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@tasks.callback_query(F.data == 'manual_check')
async def manual_check_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    link = data.get('link')
    amount = data.get('amount')
    price = data.get('price')
    balance = data.get('balance')

    try:
        await callback.message.answer(
            "üìù <b>–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ:</b>\n\n"
            "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–≤–µ—Ç–∞.'</em>",
            reply_markup=pr_menu_canc())
        await state.set_state(LinkPromotionStates.link_task_create4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@tasks.message(LinkPromotionStates.link_task_create4)
async def link_task5(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    data = await state.get_data()
    link = data.get('link')
    amount = data.get('amount')
    price = data.get('price')
    balance = data.get('balance')
    description = message.text.strip()

    try:
        task_type = 5
        other = f"1|{description}"  # 1 - —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, | - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        new_balance = balance - price
        await DB.update_balance(user_id, balance=new_balance)
        await DB.add_task(user_id=user_id, target_id=link, amount=amount, task_type=task_type, other=other)

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
        await message.answer(
            "ü•≥ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>\n\n–ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üòâ",
            reply_markup=builder.as_markup())
        await DB.add_transaction(
            user_id=message.from_user.id,
            amount=price, 
            description="—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ",
            additional_info=None
        )

        await bot.send_message(TASKS_CHAT_ID, f'''
üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ, —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚ùóÔ∏è –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {description}
üí∏ –¶–µ–Ω–∞: {all_price['link']} 
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {price / all_price['link']}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} 
''')
        await state.clear()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")




















@tasks.callback_query(F.data == 'work_link')
async def works_link_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ü§ñ", callback_data="work_link_auto"))
    builder.add(InlineKeyboardButton(text="–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ üë®‚Äçüíª", callback_data="work_link_manual"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>",
        reply_markup=builder.as_markup()
    )

@tasks.callback_query(F.data == 'work_link_auto')
async def work_link_auto_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ Redis –∏–ª–∏ –ë–î
        all_tasks = await RedisTasksManager.get_cached_tasks('link')
        if not all_tasks:
            all_tasks = await DB.select_link_tasks()
            if all_tasks:
                await RedisTasksManager.cache_tasks('link', all_tasks)

        if all_tasks:
            available_tasks = [
                task for task in all_tasks
                if not await DB.is_task_completed(user_id, task[0])
                and not await DB.is_task_failed(user_id, task[0])
                and not await DB.is_task_pending(user_id, task[0])
                and task[6] == 0  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            ]
            
            if not available_tasks:
                await callback.message.edit_text(
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π",
                    reply_markup=back_work_menu_kb(user_id)
                )
                return 
            
            random_task = random.choice(available_tasks)
            task_id, target_link, amount = random_task[0], random_task[2], random_task[3]

            await state.set_state(LinkPromotionStates.performing_task)
            await state.update_data(task_id=task_id, target_link=target_link, task_type=0)

            await callback.message.answer(
                f"üîó <b>–ó–∞–¥–∞–Ω–∏–µ:</b> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {target_link}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_link")],
                    [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_task_{task_id}")],
                    [InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"report_link_{task_id}")]
                ]))
        else:
            await callback.message.edit_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                reply_markup=back_work_menu_kb(user_id)
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ work_link_auto_handler: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_work_menu_kb(user_id)
        )

@tasks.callback_query(F.data == 'work_link_manual')
async def work_link_manual_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ Redis –∏–ª–∏ –ë–î
        all_tasks = await RedisTasksManager.get_cached_tasks('link')
        if not all_tasks:
            all_tasks = await DB.select_link_tasks()
            if all_tasks:
                await RedisTasksManager.cache_tasks('link', all_tasks)

        if all_tasks:
            available_tasks = [
                task for task in all_tasks
                if not await DB.is_task_completed(user_id, task[0])
                and not await DB.is_task_failed(user_id, task[0])
                and not await DB.is_task_pending(user_id, task[0])
                and task[6] != 0  # –¢–æ–ª—å–∫–æ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            ]
            
            if not available_tasks:
                await callback.message.edit_text(
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π",
                    reply_markup=back_work_menu_kb(user_id)
                )
                return
            
            random_task = random.choice(available_tasks)
            task_id, target_link, amount, other = random_task[0], random_task[2], random_task[3], random_task[6]
            
            try:
                description = str(other).split("|")[1] if "|" in str(other) else "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞–Ω–∏—è"
            except:
                description = "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞–Ω–∏—è"

            await state.set_state(LinkPromotionStates.performing_task)
            await state.update_data(
                task_id=task_id,
                target_link=target_link,
                task_type=1,
                description=description
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_link")],
                [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç üì∑", callback_data=f"link_{task_id}")],
                [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_task_{task_id}")],
                [InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"report_link_{task_id}")]
            ])

            await callback.message.answer(
                f"üîó <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {target_link}\n\n"
                f"üìù <b>–£—Å–ª–æ–≤–∏–µ:</b> {description}\n\n"
                f"üí∏ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {all_price['link']} MITcoin\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                reply_markup=back_work_menu_kb(user_id)
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ work_link_manual_handler: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_work_menu_kb(user_id)
        )


@tasks.callback_query(F.data.startswith('link_'))
async def link_task_screenshot_handler(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split('_')[1])
    await state.update_data(task_id=task_id)
    
    data = await state.get_data()
    task_type = data.get("task_type")
    
    if task_type == 0:
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    else:
        await callback.message.answer("üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    
    await state.set_state(LinkPromotionStates.performing_task)


@tasks.message(F.forward_from, LinkPromotionStates.performing_task)
async def check_forwarded_message(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    forwarded_from = message.forward_from

    if not forwarded_from:
        await message.answer("‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º –æ—Ç –±–æ—Ç–∞.")
        return

    data = await state.get_data()
    task_id = data.get("task_id")
    target_link = data.get("target_link")
    task_type = data.get("task_type")

    if not task_id or not target_link or task_type != 0:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    task = await DB.get_task_by_id(task_id)
    if not task:
        await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    try:
        bot_username = target_link.split("/")[-1].split("?")[0]
    except Exception as e:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞.")
        return

    await DB.increment_statistics(1, 'links')
    await DB.increment_statistics(2, 'links')
    await DB.increment_statistics(1, 'all_taasks')
    await DB.increment_statistics(2, 'all_taasks')

    if forwarded_from.username == bot_username:
        try:
            await DB.add_completed_task(user_id, task_id, task[2], all_price['link'], task[1], status=0)
            await DB.add_balance(user_id, int(all_price['link']))
            await update_dayly_and_weekly_tasks_statics(user_id)
            await message.answer(
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {all_price['link']} MITcoin.\n\n"
                f"üîó –°—Å—ã–ª–∫–∞: {target_link}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è≠Ô∏è", callback_data="work_link_auto")]]
                ))
            await state.clear()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("‚ùå –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–∏—é.")

@tasks.message(F.photo, LinkPromotionStates.performing_task)
async def handle_screenshot(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    data = await state.get_data()
    task_id = data.get('task_id')
    target_link = data.get('target_link')
    task_type = data.get('task_type')

    if task_type != 1:
        await message.answer("‚ùå –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return

    screenshot_id = message.photo[-1].file_id

    task = await DB.get_task_by_id(task_id)
    if not task:
        await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    description = str(task[6]).split("|")[1] if task[6] else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    await DB.add_pending_reaction_task(
        user_id=user_id,
        task_id=task_id,
        target_id=target_link,
        post_id = 0,
        reaction = 0,
        screenshot=screenshot_id
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚è≠ –î–∞–ª–µ–µ', callback_data='work_link_manual')],
        [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='work_menu')]
    ])
    await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=kb)

    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_link_{task_id}_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_link_{task_id}_{user_id}")]
    ])

    await bot.send_photo(
        CHECK_CHAT_ID,
        photo=screenshot_id,
        caption=(
            f"#—Å—Å—ã–ª–∫–∞\n"
            f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {user_id})\n"
            f"üîó –°—Å—ã–ª–∫–∞: {target_link}\n"
            f"üìù –£—Å–ª–æ–≤–∏–µ: {description}\n"
            f"üí∏ –ù–∞–≥—Ä–∞–¥–∞: {all_price['link']} MITcoin\n"
            f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
        ),
        reply_markup=builder
    )

    await state.clear()

@tasks.callback_query(F.data.startswith('confirm_link_'))
async def confirm_comment_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split('_')
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
        return

    task_id = int(parts[-2])
    user_id = int(parts[-1])

    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if not pending_task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    pending_id, user_id, task_id, target_id, _, _, screenshot, status = pending_task

    await DB.add_completed_task(
        user_id=user_id,
        task_id=task_id,
        target_id=target_id,
        task_sum=all_price['link'],
        owner_id=user_id,
        status=0,
        other=0
    )

    await DB.delete_pending_reaction_task(task_id, user_id)
    await DB.add_balance(amount=1000, user_id=user_id)

    task = await DB.get_task_by_id(task_id)
    if task:
        new_amount = task[3] - 1
        await DB.update_task_amount2(task_id, new_amount)

    await bot.send_message(
        user_id,
        f"üéâ <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
        f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {all_price['link']} MITcoin\n"
        f"üîó –°—Å—ã–ª–∫–∞: {target_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )
    
    creator_id = user_id
    # await bot.send_message(
    #     creator_id,
    #     f"üéâ <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
    #     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n" 
    #     f"üîó –°—Å—ã–ª–∫–∞: {target_id}\n"
    #     f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    # )
    
    await update_dayly_and_weekly_tasks_statics(user_id)
    await DB.increment_statistics(1, 'links')
    await DB.increment_statistics(2, 'links')
    await DB.increment_statistics(1, 'all_taasks')
    await DB.increment_statistics(2, 'all_taasks')

    await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")

@tasks.callback_query(F.data.startswith('reject_link_'))
async def reject_comment_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split('_')
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
        return

    task_id = int(parts[-2])
    user_id = int(parts[-1])

    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if not pending_task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    pending_id, user_id, task_id, target_id, _, _, screenshot, status = pending_task

    await DB.add_failed_task(user_id, task_id)
    await DB.delete_pending_reaction_task(task_id, user_id)

    await bot.send_message(
        user_id,
        f"‚ùå <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</b>\n\n"
        f"üîó –°—Å—ã–ª–∫–∞: {target_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    )

    await bot.send_message(
        CHECK_CHAT_ID,
        f"‚ùå <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n"
        f"üîó –°—Å—ã–ª–∫–∞: {target_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )

    await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

















