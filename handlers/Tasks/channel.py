from .tasks import *

@tasks.message(ChannelPromotionStates.awaiting_subscribers_count)
async def pr_chanel2(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    try:
        uscount = int(message.text.strip())
        if uscount >= 1:
            price = 1500 * uscount
            await state.update_data(uscount=uscount, price=price, balance=balance)
            if balance >= price:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="pr_chanel_confirm"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {uscount}</b>\nüí∞<b> –°—Ç–æ–∏–º–æ—Å—Ç—å - {price} MITcoin</b>\n\n<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...</em>',
                    reply_markup=builder.as_markup())
            else:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="cancel_all"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                builder.adjust(1)
                await message.answer(
                    f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b> \n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin\n<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫...</em>',
                    reply_markup=builder.as_markup())
        else:
            await message.answer('<b>‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç 1 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞!</b>\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ...',
                                 reply_markup=pr_menu_canc())
    except ValueError:
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ...', reply_markup=pr_menu_canc())


@tasks.callback_query(F.data == 'chanel_pr_button')
async def pr_chanel_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    maxcount = balance // 1500
    await callback.message.edit_text(f'''
üì¢ –†–µ–∫–ª–∞–º–∞ –∫–∞–Ω–∞–ª–∞

üíπ 1500 MITcoin = 1 –ø–æ–¥–ø–∏—Å—á–∏–∫

–±–∞–ª–∞–Ω—Å: {balance}; –í—Å–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å {maxcount} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

<b>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>‚ùì

<em>–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1500 MitCoin</em>
    ''', reply_markup=pr_menu_canc())
    await state.set_state(ChannelPromotionStates.awaiting_subscribers_count)

@tasks.callback_query(F.data == 'pr_chanel_confirm')
async def pr_chanel3(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    uscount = data.get('uscount')
    price = data.get('price')
    balance = data.get('balance')

    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, KeyboardButtonRequestChat
    from aiogram.enums import ChatType

    kb = ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(
                text="üì¢ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª",
                request_chat=KeyboardButtonRequestChat(
                    request_id=1,
                    chat_is_channel=True,
                    user_administrator_rights=types.ChatAdministratorRights(
                                                            is_anonymous=False,
                                                            can_manage_chat=False,
                                                            can_delete_messages=False,
                                                            can_manage_video_chats=False,
                                                            can_restrict_members=False,
                                                            can_promote_members=False,
                                                            can_change_info=False,
                                                            can_invite_users=True,
                                                            can_post_stories=False,
                                                            can_edit_stories=False,
                                                            can_delete_stories=False,
                                                            can_post_messages=True,
                                                            can_edit_messages=False,
                                                            can_pin_messages=False
                                                        ),
                    bot_administrator_rights=types.ChatAdministratorRights(
                                                        is_anonymous=False,
                                                        can_manage_chat=False,
                                                        can_delete_messages=False,
                                                        can_manage_video_chats=False,
                                                        can_restrict_members=False,
                                                        can_promote_members=False,
                                                        can_change_info=False,
                                                        can_invite_users=True,
                                                        can_post_stories=False,
                                                        can_edit_stories=False,
                                                        can_delete_stories=False,
                                                        can_post_messages=True,
                                                        can_edit_messages=False,
                                                        can_pin_messages=False
                                                    )
                )
            )
        ]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await callback.message.answer(
        "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=kb
    )

    await state.set_state(ChannelPromotionStates.awaiting_channel_selection)
    await state.update_data(uscount=uscount, price=price, balance=balance)

@tasks.message(ChannelPromotionStates.awaiting_channel_selection)
async def handle_channel_selection(message: types.Message, state: FSMContext, bot: Bot):
    if not message.chat_shared:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    chat_id = message.chat_shared.chat_id
    user_id = message.from_user.id
    data = await state.get_data()
    price = data.get('price')
    amount = data.get('uscount')

    try:
        chat = await bot.get_chat(chat_id)
        bot_info = await bot.get_me()
        member = await bot.get_chat_member(chat_id, bot_info.id)

        # üîí –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å
        if member.status != "administrator" or not member.can_invite_users:
            await state.update_data(pending_channel_id=chat_id)

            invite_link = f"https://t.me/{bot_info.username}?startchannel&admin=invite_users+manage_chat"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω—ã", url=invite_link)],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_admin_rights")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_menu")]
            ])

            await message.answer(
                f"üòï –ë–æ—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ <b>{chat.title}</b>, –Ω–æ –µ–º—É <u>–Ω–µ –≤—ã–¥–∞–Ω—ã –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞</u> –∏–ª–∏ <u>–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</u>.\n\n"
                f"üîß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω—ã –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b>.",
                reply_markup=keyboard
            )
            return

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞:", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # ‚úÖ –í—Å—ë —Ö–æ—Ä–æ—à–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ
    await DB.add_balance(user_id, -price)
    await DB.add_transaction(user_id=user_id, amount=price, description="—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏", additional_info=None)
    task_id = await DB.add_task(user_id=user_id, target_id=chat_id, amount=amount, task_type=1)

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª <b>{chat.title}</b> —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")]
        ])
    )

    bot_username = (await bot.get_me()).username
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üéØ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", 
            url=f"https://t.me/{bot_username}?start=channel_{task_id}"
        )]
    ])

    await bot.send_message(
        TASKS_CHAT_ID,
        f'''
üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: üì¢ –ö–∞–Ω–∞–ª
üí¨ –ö–∞–Ω–∞–ª: {chat.title}
üí∏ –¶–µ–Ω–∞: {price // amount}
üë• –ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}
    ''',
        reply_markup=keyboard
    )

@tasks.callback_query(F.data == "check_admin_rights")
async def check_admin_rights(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    data = await state.get_data()
    user_id = callback.from_user.id
    chat_id = data.get("pending_channel_id")
    price = data.get('price')
    amount = data.get('uscount')

    try:
        chat = await bot.get_chat(chat_id)
        bot_info = await bot.get_me()
        member = await bot.get_chat_member(chat_id, bot_info.id)

        if member.status != "administrator" or not member.can_invite_users:
            await callback.message.edit_text(
                f"‚õî –ë–æ—Ç—É –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –≤—ã–¥–∞–Ω—ã –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ <b>{chat.title}</b>.\n\n"
                f"üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω <b>–∞–¥–º–∏–Ω</b> –∏ –º–æ–∂–µ—Ç <b>–ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>.",
                reply_markup=callback.message.reply_markup
            )
            return

        # ‚úÖ –í—Å—ë –æ–∫ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ
        await DB.add_balance(user_id, -price)
        await DB.add_transaction(user_id=user_id, amount=price, description="—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏", additional_info=None)
        task_id = await DB.add_task(user_id=user_id, target_id=chat_id, amount=amount, task_type=1)

        await callback.message.edit_text(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª <b>{chat.title}</b> —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")]
            ])
        )

        bot_username = (await bot.get_me()).username
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üéØ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", 
                url=f"https://t.me/{bot_username}?start=channel_{task_id}"
            )]
        ])

        await bot.send_message(
            TASKS_CHAT_ID,
            f'''
        üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
        ‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: üì¢ –ö–∞–Ω–∞–ª
        üí¨ –ö–∞–Ω–∞–ª: {chat.title}
        üí∏ –¶–µ–Ω–∞: {price // amount}
        üë• –ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {amount}
        üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}
        ''',
            reply_markup=keyboard
        )

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ check_admin_rights:", e)
        await callback.message.edit_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@tasks.message(ChannelPromotionStates.awaiting_members_count)
async def pr_chat2(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    try:
        uscount = int(message.text.strip())
        if uscount >= 1:
            price = 1500 * uscount
            await state.update_data(uscount=uscount, price=price, balance=balance)
            if balance >= price:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="pr_chat_confirm"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {uscount}</b>\nüí∞<b> –°—Ç–æ–∏–º–æ—Å—Ç—å - {price} MITcoin</b>\n\n<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...</em>',
                    reply_markup=builder.as_markup())
            else:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="cancel_all"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b> \n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin\n<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</em>',
                    reply_markup=builder.as_markup())
        else:
            await message.answer('<b>‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç 1 —É—á–∞—Å—Ç–Ω–∏–∫–∞!</b>\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ...',
                                 reply_markup=pr_menu_canc())
    except ValueError:
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ...', reply_markup=pr_menu_canc())

@tasks.message(ChannelPromotionStates.awaiting_post_message)
async def pr_post4(message: types.Message, state: FSMContext, bot: Bot):
    async with task_creation_lock:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        user_id = message.from_user.id
        data = await state.get_data()
        amount = data.get('uscount')
        price = data.get('price')
        balance = data.get('balance')
        if amount is None:
            amount = 1
        if balance is None:
            user = await DB.select_user(user_id)
            balance = user['balance']
        if price is None:
            price = 600

        if message.forward_from_chat:
            message_id = message.forward_from_message_id
            chat_id = message.forward_from_chat.id
            target_id_code = f'{chat_id}:{message_id}'

            try:
                await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)
                task_type = 3  # –ø–æ—Å—Ç
                new_balance = balance - price
                await DB.update_balance(user_id, balance=new_balance)
                await DB.add_task(user_id=user_id, target_id=target_id_code, amount=amount, task_type=task_type)

                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="my_works"))
                await message.answer(
                    "ü•≥ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>\n\n–ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üòâ",
                    reply_markup=builder.as_markup())
                await DB.add_transaction(
                        user_id=user_id,
                        amount=price,
                        description="—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä",
                        additional_info= None
                    )
                
                
                await bot.send_message(TASKS_CHAT_ID, f'''
üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: üëÄ –ü–æ—Å—Ç
üí∏ –¶–µ–Ω–∞: 600
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {amount * 600} 
''')
                await state.clear()
            except:
                bot_username = (await bot.get_me()).username
                invite_link = f"http://t.me/{bot_username}?startchannel&admin=invite_users+manage_chat"
                add_button = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª", url=invite_link)
                add_button1 = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='pr_menu_cancel')
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1]])
                await message.answer(
                    'üò∂ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ...',
                    reply_markup=keyboard)
                
semaphore = asyncio.Semaphore(2)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
@tasks.callback_query(F.data.startswith('work_chanel'))
async def taskss_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    current_time = int(time.time())

    try:
        from handlers.client.client import get_available_tasks, task_cache
        all_tasks = task_cache.get('all_tasks', [])
        print(f'–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à–µ - {len(all_tasks)}')

        tasks = await get_available_tasks(user_id, all_tasks)
        print(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - {len(tasks)}')

        if tasks:
            random.shuffle(tasks)
            keyboard = await generate_tasks_keyboard_chanel(tasks, bot, current_time)

            try:
                await callback.message.edit_text(
                    "üì¢ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
                    "üé¢ –ö–∞–Ω–∞–ª—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                    "‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>\n\n"
                    f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}",
                    reply_markup=keyboard
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    await callback.answer("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∞–∫—Ç—É–∞–ª–µ–Ω")
                else:
                    raise
        else:
            await callback.message.edit_text(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                reply_markup=back_work_menu_kb(user_id)
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ taskss_handler: {e}")
        markup = InlineKeyboardBuilder()
        markup.row(InlineKeyboardButton(
            text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
            callback_data=f"work_chanel_{current_time}"
        ))
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.",
            reply_markup=markup.as_markup()
        )


async def generate_tasks_keyboard_chanel(tasks, bot, timestamp=None):
    builder = InlineKeyboardBuilder()
    timestamp = timestamp or int(time.time())

    for task in tasks[:5]:
        try:
            chat = await bot.get_chat(task[2])
            button_text = f"{chat.title} | +1500"
            builder.row(InlineKeyboardButton(
                text=button_text,
                callback_data=f"chaneltask_{task[0]}_{timestamp}"
            ))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {task[2]}: {e}")
            continue

    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"work_chanel_{timestamp}")
    )
    return builder.as_markup()


@tasks.callback_query(lambda c: c.data.startswith("chaneltask_"))
async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    try:
        parts = callback.data.split('_')
        task_id = int(parts[1])
        timestamp = parts[2] if len(parts) > 2 else None

        task = await DB.get_task_by_id(task_id)
        if not task:
            await callback.message.edit_text("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        amount = task[3]
        invite_link = await check_admin_and_get_invite_link_chanel(bot, task[2])
        chat = await bot.get_chat(task[2])

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chanelcheck_{task_id}"))
        builder.add(InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_task_{task_id}"))
        builder.add(InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"report_channel_{task_id}"))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_chanel"))
        builder.adjust(1, 2, 1)

        task_info = (
            f"üì¢ {chat.title} | <i>{amount}</i>\n"
            f"<i>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É -</i> <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b> üîÑÔ∏è\n\n"
            f"{invite_link}"
        )
        await callback.message.edit_text(task_info, reply_markup=builder.as_markup())

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ task_detail_handler: {e}")
@tasks.callback_query(F.data.startswith('chanelcheck_'))
async def check_subscription_chanel(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    if task is None:
        await callback.message.edit_text("‚ùó –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", reply_markup=back_menu_kb(callback.from_user.id))
        await asyncio.sleep(1)
        return

    user_id = callback.from_user.id
    target_id = task[2]
    invite_link = await check_admin_and_get_invite_link_chanel(bot, task[2])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    try: 
        chat_member = await bot.get_chat_member(target_id, user_id)
        if chat_member.status not in ["member", "administrator", "creator"]:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_chanel"))
            builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chanelcheck_{task_id}"))
            await callback.message.edit_text(
                f"üö© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</b> –ø–æ —Å—Å—ã–ª–∫–µ {invite_link} –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                reply_markup=builder.as_markup())
            return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_chanel"))
        builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chanelcheck_{task_id}"))
        await callback.message.edit_text(
            f"üö© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</b> –ø–æ —Å—Å—ã–ª–∫–µ {invite_link} –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
            reply_markup=builder.as_markup())
        return

    if not await DB.is_task_completed(user_id, task[0]):
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–∞ 1
        new_amount = task[3] - 1
        await DB.update_task_amount(task_id, new_amount)
        
        await DB.add_completed_task(user_id, task_id, target_id, 1500, task[1], status=1)
        await DB.add_balance(amount=1500, user_id=user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        if new_amount <= 0:
            creator_id = task[1]
            await DB.delete_task(task_id)
            await bot.send_message(
                creator_id, 
                "üéâ –û–¥–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
                reply_markup=back_menu_kb(creator_id)
            )

        await DB.increment_statistics(1, 'all_subs_chanel')
        await DB.increment_statistics(2, 'all_subs_chanel')
        await DB.increment_statistics(1, 'all_taasks')
        await DB.increment_statistics(2, 'all_taasks')
        await update_dayly_and_weekly_tasks_statics(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="–î–∞–ª—å—à–µ ‚è≠Ô∏è", 
            callback_data="work_chanel"
        ))
        await callback.message.edit_text(
            "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +1500 MITcoin",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text(
            "‚Äº –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ", 
            reply_markup=back_menu_kb(user_id))

async def check_admin_and_get_invite_link_chanel(bot: Bot, target_id: int):
    try:
        chat_info = await bot.get_chat(target_id)
        return chat_info.invite_link or f"https://t.me/{chat_info.username}"
    except Exception as e:
        print(e)
        return "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    

@tasks.callback_query(F.data.startswith('skip_task_'))
async def skip_task_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    try:
        task_id = int(callback.data.split('_')[2])
        await DB.skip_task(user_id, task_id)
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")

        all_tasks = task_cache.get('all_tasks', [])
        from ..client.client import get_available_tasks
        tasks = await get_available_tasks(user_id, all_tasks)

        if tasks:
            random.shuffle(tasks)
            keyboard = await generate_tasks_keyboard_chanel(tasks, bot)
            await callback.message.edit_text(
                "üì¢ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n\nüé¢ –ö–∞–Ω–∞–ª—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                "‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                reply_markup=back_work_menu_kb(user_id)
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ skip_task_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)

