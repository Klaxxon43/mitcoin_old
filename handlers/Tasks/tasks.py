from untils.Imports import *
from .states import *

task_cache = {}
task_cache_chat = {}



task_creation_lock = asyncio.Lock()
reaction_task_lock = asyncio.Lock()
available_reaction_tasks = [] # REACTIONS 

tasks = Router()


all_price = {
    "channel": 1500,
    "chat": 1500,
    "post": 250,
    "comment": 750,
    "reaction": 500,
    "link": 1500,
    "boost": 5000
}



@tasks.callback_query(F.data == 'pr_menu')
async def pr_menu_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    channels = await DB.all_channels_op()
    not_subscribed = []

    for channel in channels:
        channel_id = channel[0]
        try:
            chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                not_subscribed.append(channel)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}") 

    if not_subscribed:
        print(f'https://t.me/{channel[0].replace("@", "")}')
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã
        keyboard = InlineKeyboardBuilder()
        for channel in not_subscribed:
            keyboard.add(InlineKeyboardButton(
                text=f"üì¢ {channel[1]}",
                url=f"https://t.me/{channel[0].replace('@', '')}"
            ))
        keyboard.add(InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
            callback_data="op_proverka"
        ))
        keyboard.adjust(1)
        await callback.message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=keyboard.as_markup()
        )
    else:

        await callback.answer()
        await callback.message.edit_text(
            "üìã <b>–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è</b>\n–ß—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=pr_menu_kb(user_id))

@tasks.callback_query(F.data == 'pr_menu_cancel')
async def cancel_pr(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await pr_menu_handler(callback, bot)


async def auto_confirm_task(task_id: int, user_id: int, bot: Bot, username, state: FSMContext):
    # –ñ–¥–µ–º 24 —á–∞—Å–∞
    await asyncio.sleep(24 * 60 * 60)  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞—è–≤–∫–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if pending_task:
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤—Å—ë –µ—â—ë –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –µ—ë
        pending_id, user_id, task_id, target_id, post_id, reaction, screenshot, status = pending_task

        # –†–∞–∑–¥–µ–ª—è–µ–º target_id –Ω–∞ channel_username –∏ post_id
        channel_username, post_id = target_id.split(':')

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É completed_tasks
        await DB.add_completed_task(
            user_id=user_id,
            task_id=task_id,
            target_id=target_id,
            task_sum=all_price['reaction'],
            owner_id=user_id,
            status=0,
            other=0
        )

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
        await DB.delete_pending_reaction_task(task_id, user_id)

        # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await DB.add_balance(amount=all_price['reaction'], user_id=user_id)

        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è –Ω–∞ 1
        task = await DB.get_task_by_id(task_id)
        if task:
            new_amount = task[3] - 1  # task[3] ‚Äî —ç—Ç–æ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
            await DB.update_task_amount2(task_id, new_amount)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            f"üéâ <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
            f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {all_price['reaction']} MITcoin\n"
            f"üìå –ü–æ—Å—Ç: https://t.me/{channel_username}/{post_id}\n"
            f"üéØ –†–µ–∞–∫—Ü–∏—è: {reaction if reaction else '–õ—é–±–∞—è'}\n"
            f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω–∏—è
        creator_id = user_id
        await bot.send_message(
            creator_id,
            f"üéâ <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"üìå –ü–æ—Å—Ç: https://t.me/{channel_username}/{post_id}\n"
            f"üéØ –†–µ–∞–∫—Ü–∏—è: {reaction if reaction else '–õ—é–±–∞—è'}\n"
            f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        data = await state.get_data()
        admin_message_id = data.get('admin_message_id')
        if admin_message_id:
            await bot.delete_message(CHECK_CHAT_ID, admin_message_id)


async def update_dayly_and_weekly_tasks_statics(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—É—é –∏ –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        await DB.increment_daily_completed_task_count(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        await DB.increment_weekly_completed_task_count(user_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á: {e}")
        return False

