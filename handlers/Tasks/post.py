from .tasks import *

active_tasks={}

@tasks.callback_query(F.data == 'post_pr_button')
async def pr_post_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    maxcount = balance // 300
    await callback.message.edit_text(f'''
üëÄ –†–µ–∫–ª–∞–º–∞ –ø–æ—Å—Ç–∞

üíµ 300 MITcoin = 1 –ø—Ä–æ—Å–º–æ—Ç—Ä

–±–∞–ª–∞–Ω—Å: <b>{balance}</b>; –í—Å–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å <b>{maxcount}</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

<b>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</b>‚ùì

<em>–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 300 MITcoin</em>
    ''', reply_markup=pr_menu_canc())
    await state.set_state(PostPromotionStates.awaiting_views_count)

@tasks.message(PostPromotionStates.awaiting_views_count)
async def pr_post2(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    try:
        uscount = int(message.text.strip())
        if uscount >= 1:
            price = 300 * uscount
            await state.update_data(uscount=uscount, price=price, balance=balance)
            if balance >= price:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="pr_post_confirm"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üëÄ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {uscount}</b>\nüí∞<b> –°—Ç–æ–∏–º–æ—Å—Ç—å - {price} MITcoin</b>\n\n<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...</em>',
                    reply_markup=builder.as_markup())
            else:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="cancel_all"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer( 
                    f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b> \n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin\n<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤...</em>',
                    reply_markup=builder.as_markup())
        else:
            await message.answer('<b>‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç 1 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!</b>\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ...',
                                 reply_markup=pr_menu_canc())
    except ValueError:
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ...', reply_markup=pr_menu_canc())

@tasks.callback_query(F.data == 'pr_post_confirm')
async def pr_post3(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    uscount = data.get('uscount')
    price = data.get('price')
    balance = data.get('balance')
    await state.clear()
    await callback.message.edit_text(f'''
üëæ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏ –û–î–ò–ù –ø–æ—Å—Ç (‚Äº –µ—Å–ª–∏ –ø–æ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ - –ø–µ—Ä–µ—à–ª–∏—Ç–µ –û–î–ù–£ –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø–æ—Å—Ç –±—É–¥—É—Ç –∑–∞—Å—á–∏—Ç–∞–Ω—ã), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å. –Ø –∂–¥—É...
    ''', reply_markup=pr_menu_canc())
    await state.set_state(PostPromotionStates.awaiting_post_message)
    await state.update_data(uscount=uscount, price=price, balance=balance)

@tasks.message(PostPromotionStates.awaiting_post_message)
async def pr_post4(message: types.Message, state: FSMContext, bot: Bot):
    async with task_creation_lock:
        user_id = message.from_user.id
        data = await state.get_data()
        amount = data.get('uscount')
        price = data.get('price')
        balance = data.get('balance')
        
        if message.forward_from_chat:
            message_id = message.forward_from_message_id
            chat_id = message.forward_from_chat.id
            target_id_code = f'{chat_id}:{message_id}'

            try:
                await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)
                task_type = 3  # –ø–æ—Å—Ç
                new_balance = balance - price
                await DB.update_balance(user_id, balance=new_balance)
                await DB.add_task(user_id=user_id, target_id=target_id_code, amount=amount, task_type=task_type)

                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="my_works"))
                await message.answer(
                    "ü•≥ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>\n\n–ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üòâ",
                    reply_markup=builder.as_markup())
                
                await DB.add_transaction(
                    user_id=user_id,
                    amount=price,
                    description="—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä",
                    additional_info=None
                )
                
                await bot.send_message(TASKS_CHAT_ID, f'''
üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: üëÄ –ü–æ—Å—Ç
üí∏ –¶–µ–Ω–∞: 600
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {amount * 600} 
''')
                await state.clear()
                # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
                await RedisTasksManager.refresh_task_cache(bot, "post")
                await RedisTasksManager.update_common_tasks_count(bot)

            except:
                bot_username = (await bot.get_me()).username
                invite_link = f"http://t.me/{bot_username}?startchannel&admin=invite_users+manage_chat"
                add_button = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª", url=invite_link)
                add_button1 = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='pr_menu_cancel')
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1]])
                await message.answer(
                    'üò∂ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ...',
                    reply_markup=keyboard)
                


@tasks.callback_query(F.data == 'work_post')
async def works_post_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î
        cached_tasks = await RedisTasksManager.get_cached_tasks('post')
        if not cached_tasks:
            db_tasks = await DB.select_post_tasks()
            if db_tasks:
                await RedisTasksManager.cache_tasks('post', db_tasks)
                cached_tasks = db_tasks

        if not cached_tasks:
            await callback.message.edit_text(
                "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–æ—Å—Ç—ã",
                reply_markup=back_work_menu_kb(user_id)
            )
            return

        # 2. –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        available_tasks = []
        for task in cached_tasks:
            try:
                # –ï—Å–ª–∏ task –≤ –≤–∏–¥–µ tuple (–∏–∑ –ë–î), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
                if isinstance(task, (list, tuple)):
                    task = {
                        'id': task[0],
                        'user_id': task[1],
                        'target_id': task[2],
                        'amount': task[3],
                        'type': task[4],
                        'status': task[5]
                    }

                if await DB.is_task_completed(user_id, task['id']):
                    continue

                task_data = {
                    'id': task['id'],
                    'user_id': task['user_id'],
                    'link': task['target_id'],
                    'amount': task['amount'],
                    'type': task['type'],
                    'status': task['status'],
                }

                if not task_data['link'] or ':' not in task_data['link']:
                    print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏: {task_data['link']}")
                    continue

                channel_id, message_id_str = task_data['link'].split(':', 1)
                message_id = int(message_id_str)

                try:
                    chat = await bot.get_chat(chat_id=channel_id)
                    if not chat:
                        print(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        continue

                    try:
                        member = await bot.get_chat_member(channel_id, bot.id)
                        if not member.can_post_messages:
                            print(f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                            continue
                    except:
                        print(f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                        continue

                    try:
                        await bot.forward_message(chat_id=INFO_ID, from_chat_id=channel_id, message_id=message_id)
                        task_data['channel_accessible'] = True
                        task_data['post_accessible'] = True
                        available_tasks.append(task_data)
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞ {message_id}: {str(e)}")
                        continue

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {str(e)}")
                    continue

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
                continue

        if not available_tasks:
            await callback.message.edit_text(
                "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                reply_markup=back_work_menu_kb(user_id)
            )
            return

        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        task = available_tasks[0]

        try:
            channel_id, message_id_str = task['link'].split(':', 1)
            message_id = int(message_id_str)

            await bot.forward_message(
                chat_id=user_id,
                from_chat_id=channel_id,
                message_id=message_id
            )

            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))
            keyboard.add(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è≠Ô∏è", callback_data="work_post"))
            keyboard.add(InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"postreport_{task['id']}"))

            await callback.message.answer_sticker(
                'CAACAgIAAxkBAAENFeZnLS0EwvRiToR0f5njwCdjbSmWWwACTgEAAhZCawpt1RThO2pwgjYE'
            )
            await asyncio.sleep(3)

            await DB.add_balance(amount=250, user_id=user_id)
            await DB.add_completed_task(
                user_id=user_id,
                task_id=task['id'],
                target_id=message_id,
                task_sum=250,
                owner_id=task['user_id'],
                status=0
            )

            await callback.message.answer(
                "üëÄ <b>–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–æ—Å—Ç! +250 MITcoin</b>",
                reply_markup=keyboard.as_markup()
            )

            await DB.update_task_amount(task['id'], int(task['amount'])-1)
            updated_task = await DB.get_task_by_id(task['id'])

            if updated_task[3] == 0:
                await DB.delete_task(task['id'])
                await RedisTasksManager.invalidate_cache('post')
                await bot.send_message(
                    updated_task[1],
                    "üéâ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
                    reply_markup=back_menu_kb(updated_task[1])
                )
            await RedisTasksManager.refresh_task_cache(bot, "post")
            await RedisTasksManager.update_common_tasks_count(bot)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞: {str(e)}")
            await callback.message.answer(
                "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞",
                reply_markup=back_work_menu_kb(user_id)
            )

    except Exception as e:
        print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {str(e)}")
        await callback.message.edit_text(
            "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_work_menu_kb(user_id)
        )

# # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# active_tasks = {} 

# @tasks.callback_query(F.data == 'work_post')
# async def works_post_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
#     user_id = callback.from_user.id

#     # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
#     from handlers.client.client import processed_tasks

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     if user_id in active_tasks:
#         await callback.answer("–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞–¥–∞–Ω–∏–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", show_alert=True)
#         return

#     if processed_tasks:
#         # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª
#         available_tasks = [task for task in processed_tasks if not await DB.is_task_completed(user_id, task[0])]

#         if not available_tasks:
#             await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
#                                              reply_markup=back_work_menu_kb(user_id))
#             return

#         # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
#         task = available_tasks[0]
#         task_id, target_id, amount = task[0], task[2], task[3]
#         chat_id, message_id = map(int, target_id.split(":"))

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         active_tasks[user_id] = task_id

#         try:
#             builder = InlineKeyboardBuilder()
#             builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))
#             builder.add(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è≠Ô∏è", callback_data=f"work_post"))
#             # builder.add(InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"report_post_{task_id}"))

#             # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#             await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)

#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
#             await callback.message.answer_sticker(
#                 'CAACAgIAAxkBAAENFeZnLS0EwvRiToR0f5njwCdjbSmWWwACTgEAAhZCawpt1RThO2pwgjYE')
#             await asyncio.sleep(3)

#             # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞
#             await DB.add_balance(amount=250, user_id=user_id)
#             await DB.add_completed_task(user_id, task_id, target_id, 250, task[1], status=0)

#             # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
#             await DB.increment_statistics(1, 'all_see')
#             await DB.increment_statistics(2, 'all_see')
#             await DB.increment_statistics(1, 'all_taasks')
#             await DB.increment_statistics(2, 'all_taasks')
#             await update_dayly_and_weekly_tasks_statics(user_id)

#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
#             await callback.message.answer(
#                 f"üëÄ <b>–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–æ—Å—Ç! +250 MITcoin</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞",
#                 reply_markup=builder.as_markup())

#             # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#             await DB.update_task_amount(task_id)
#             updated_task = await DB.get_task_by_id(task_id)

#             # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
#             if updated_task[3] == 0:
#                 delete_task = await DB.get_task_by_id(task_id)
#                 creator_id = delete_task[1]
#                 await DB.delete_task(task_id)
#                 await bot.send_message(creator_id, f"üéâ –û–¥–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–æ—Å—Ç –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
#                                        reply_markup=back_menu_kb(user_id))

#         except Exception as e:
#             print(f"–û—à–∏–±–∫–∞: {e}")
#             await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
#                                              reply_markup=back_work_menu_kb(user_id))
#         finally:
#             # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#             if user_id in active_tasks:
#                 del active_tasks[user_id]
#     else:
#         await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–æ—Å—Ç—ã –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
#                                          reply_markup=back_work_menu_kb(user_id))



# class PostReport(StatesGroup):
#     desc = State()

# @tasks.callback_query(F.data.startswith('postreport_'))
# async def request_post_report_description(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
#     task_id = int(callback.data.split('_')[1])
#     await callback.answer()

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     await state.update_data(task_id=task_id)

#     # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
#     await callback.message.edit_text(
#         "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."
#     )
#     await state.set_state(PostReport.desc)

# @tasks.message(PostReport.desc)
# async def save_post_report_description(message: types.Message, bot: Bot, state: FSMContext):
#     user_id = message.from_user.id
#     description = message.text

#     # –ü–æ–ª—É—á–∞–µ–º task_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#     data = await state.get_data()
#     task_id = data.get("task_id")

#     if task_id:
#         task = await DB.get_task_by_id(task_id)
#         if task:
#             target_id = task[2]

#             # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#             await DB.add_report(task_id=task_id, chat_id=target_id, user_id=user_id, description=description)

#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
#             await message.answer("‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
#             await asyncio.sleep(1)

#             # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π
#             all_tasks = await DB.select_post_tasks()
#             if all_tasks:
#                 available_tasks = [task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])]
#                 if not available_tasks:
#                     await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
#                                          reply_markup=back_work_menu_kb(user_id))
#                     return

#                 for task in available_tasks:
#                     task_id, target_id, amount = task[0], task[2], task[3]
#                     chat_id, message_id = map(int, target_id.split(":"))
#                     try:
#                         builder = InlineKeyboardBuilder()
#                         builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))
#                         builder.add(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è≠Ô∏è", callback_data=f"work_post"))
#                         builder.add(InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"postreport_{task_id}"))
#                         await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)
#                         await message.answer_sticker(
#                             'CAACAgIAAxkBAAENFeZnLS0EwvRiToR0f5njwCdjbSmWWwACTgEAAhZCawpt1RThO2pwgjYE')
#                         await asyncio.sleep(5)

#                         await message.answer(
#                             f"üëÄ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–æ—Å—Ç! +250 MITcoin</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞",
#                             reply_markup=builder.as_markup())

#                         await DB.update_task_amount(task_id)
#                         updated_task = await DB.get_task_by_id(task_id)

#                         await DB.add_completed_task(user_id, task_id, target_id, 250, task[1], status=0)
#                         await DB.add_balance(amount=250, user_id=user_id)

#                         if updated_task[3] == 0:
#                             delete_task = await DB.get_task_by_id(task_id)
#                             creator_id = delete_task[1]
#                             await DB.delete_task(task_id)
#                             await DB.increment_all_see()
#                             await DB.increment_all_taasks()
#                             await bot.send_message(creator_id, f"üéâ –û–¥–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–æ—Å—Ç –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
#                                                    reply_markup=back_menu_kb(user_id))

#                         return
#                     except Exception as e:
#                         print(f"–û—à–∏–±–∫–∞: {e}")
#                         continue

#                 # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã
#                 await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
#                                      reply_markup=back_work_menu_kb(user_id))
#             else:
#                 await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–æ—Å—Ç—ã –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
#                                      reply_markup=back_work_menu_kb(user_id))
#         else:
#             await message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#     else:
#         await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞–Ω–∏–∏.")

#     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     await state.clear()












async def process_tasks_periodically(bot: Bot):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    while True:
        try:
            all_tasks = await DB.select_post_tasks()
            random.shuffle(all_tasks)
            
            new_processed_tasks = []
            for task in all_tasks:
                try:
                    channel_id, post_id = map(int, task[2].split(':'))
                    await bot.forward_message(chat_id=INFO_ID, from_chat_id=channel_id, message_id=post_id)
                    new_processed_tasks.append(task)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å—Ç–∞ {task[2]}: {e}")
                    continue
            from handlers.Background.bg_tasks import post_cache_lock
            with post_cache_lock:
                global processed_tasks
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–æ–≤—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
                processed_tasks = new_processed_tasks if new_processed_tasks else processed_tasks
                print(f"–ü–æ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω–æ: {len(processed_tasks)}")

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_tasks_periodically: {e}")

        await asyncio.sleep(600)