from utils.Imports import *
import asyncio
from typing import Optional, List, Dict, Any

from utils.Imports import *
import asyncio
from typing import Optional, List, Dict, Any

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
task_cache = {
    'tasks': {},
    'common_tasks_count': None,
    'cache_expiry': {}
}

all_price = {
    "channel": 1500,
    "chat": 1500,
    "post": 250,
    "comment": 750,
    "reaction": 500,
    "link": 1500,
    "boost": 5000
}

class RedisTasksManager:
    @staticmethod
    async def start_periodic_check(bot: Bot):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π"""
        while True:
            try:
                await RedisTasksManager.check_all_tasks(bot)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏–π: {e}")
            await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç

    @staticmethod
    async def check_all_tasks(bot: Bot):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π"""
        task_types = ['channel', 'chat', 'post', 'comment', 'link', 'reaction', 'boost']
        
        for task_type in task_types:
            await RedisTasksManager.check_tasks_of_type(bot, task_type)
        
        await RedisTasksManager.update_common_tasks_count(bot)

    @staticmethod
    async def check_tasks_of_type(bot: Bot, task_type: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            print(f"\n–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞: {task_type}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—ç—à (–µ—Å–ª–∏ –µ—Å—Ç—å)
            old_cache = await RedisTasksManager.get_cached_tasks(task_type) or []
            print(f"–¢–µ–∫—É—â–∏–π –∫—ç—à ({task_type}): {len(old_cache)} –∑–∞–¥–∞–Ω–∏–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ë–î
            task_mapping = {
                'channel': DB.select_chanel_tasks,
                'chat': DB.select_chat_tasks,
                'post': DB.select_post_tasks,
                'comment': DB.select_like_comment,
                'link': DB.select_link_tasks,
                'reaction': DB.select_reaction_tasks,
                'boost': DB.select_boost_tasks
            }
            
            db_tasks = await task_mapping[task_type]()
            print(f"–ó–∞–¥–∞–Ω–∏–π –≤ –ë–î ({task_type}): {len(db_tasks)}")
            
            if not db_tasks:
                print(f"–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –≤ –ë–î –¥–ª—è —Ç–∏–ø–∞ {task_type}, –æ—á–∏—â–∞–µ–º –∫—ç—à")
                await RedisTasksManager.invalidate_cache(task_type)
                return

            valid_tasks = []
            invalid_tasks = []

            for task in db_tasks:
                try:
                    is_valid = await RedisTasksManager.is_task_valid(bot, task_type, task)
                    print(f"–ó–∞–¥–∞–Ω–∏–µ {task[0]} - {'–≤–∞–ª–∏–¥–Ω–æ' if is_valid else '–Ω–µ–≤–∞–ª–∏–¥–Ω–æ'}")
                    
                    if is_valid:
                        task_data = await RedisTasksManager.prepare_task_data(bot, task_type, task)
                        if task_data:
                            valid_tasks.append(task_data)
                    else:
                        invalid_tasks.append(task)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è {task[0]}: {e}")
                    invalid_tasks.append(task)

            print(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(valid_tasks)}, –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_tasks)}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            for task in invalid_tasks:
                await RedisTasksManager.handle_invalid_task(task_type, task, bot)

            if valid_tasks:
                print(f"–û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è {task_type} —Å {len(valid_tasks)} –∑–∞–¥–∞–Ω–∏—è–º–∏")
                await RedisTasksManager.cache_tasks(task_type, valid_tasks)
            elif not old_cache:
                print(f"–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏ –Ω–µ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞, –æ—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è {task_type}")
                await RedisTasksManager.invalidate_cache(task_type)
            else:
                print(f"–û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –¥–ª—è {task_type} ({len(old_cache)} –∑–∞–¥–∞–Ω–∏–π)")

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞ {task_type}: {e}")

    @staticmethod
    async def is_task_valid(bot: Bot, task_type: str, task: tuple) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏ –ª–æ–≥–∞–º–∏"""
        try:
            print(f"\nüîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è (—Ç–∏–ø: {task_type})")

            if task_type == 'boost':
                task_id, user_id, target_id, amount, task_type_db, status, days = task[:7]
            else:
                task_id, user_id, target_id, amount, task_type_db, status = task[:6]

            print(f"üìå –ó–∞–¥–∞–Ω–∏–µ ID: {task_id}, User: {user_id}, Target: {target_id}, Amount: {amount}")

            # –û–±—â–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if not all([task_id, user_id, target_id, amount]):
                print("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è.")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ç–∏–ø—É
            if task_type == 'channel':
                print("‚û° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª...")
                return await RedisTasksManager._check_channel_task(bot, target_id)
            elif task_type == 'chat':
                print("‚û° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —á–∞—Ç...")
                return await RedisTasksManager._check_chat_task(bot, target_id)
            elif task_type == 'boost':
                print("‚û° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –±—É—Å—Ç...")
                return await RedisTasksManager._check_boost_task(bot, target_id)
            elif task_type in ['post', 'reaction']:
                print("‚û° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–æ—Å—Ç/—Ä–µ–∞–∫—Ü–∏—é...")
                return await RedisTasksManager._check_post_reaction_task(bot, target_id)
            elif task_type in ['comment', 'link']:
                print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–¥–∞–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º.")
                return True

            print("‚úÖ –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è: {e}")
            return False


    @staticmethod
    async def _check_channel_task(bot: Bot, target_id: int) -> bool:
        try:
            chat = await bot.get_chat(target_id)
            print(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title} ({chat.id})")

            bot_member = await bot.get_chat_member(chat.id, (await bot.get_me()).id)
            print(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {bot_member.status}")

            if bot_member.status == "administrator" and bot_member.can_invite_users:
                print("‚úÖ –ë–æ—Ç –∞–¥–º–∏–Ω –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å.")
                return True
            else:
                print("‚ùå –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å.")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞: {e}")
            return False


    @staticmethod
    async def _check_chat_task(bot: Bot, target_id: int) -> bool:
        return True
        # try:
        #     chat = await bot.get_chat(target_id)
        #     print(f"‚úÖ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω: {chat.title} ({chat.id})")

        #     try:
        #         member = await bot.get_chat_member(target_id, (await bot.get_me()).id)
        #         print(f"‚úÖ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞ (—Å—Ç–∞—Ç—É—Å: {member.status})")
        #         return True
        #     except Exception:
        #         print("‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.")
        #         return False

        # except Exception as e:
        #     print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞: {e}")
        #     return False


    @staticmethod
    async def _check_boost_task(bot: Bot, target_id: int) -> bool:
        return True
        # try:
        #     chat = await bot.get_chat(target_id)
        #     print(f"‚úÖ –ß–∞—Ç/–∫–∞–Ω–∞–ª –¥–ª—è –±—É—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω: {chat.title} ({chat.id})")

        #     bot_member = await bot.get_chat_member(chat.id, (await bot.get_me()).id)
        #     print(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {bot_member.status}, –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∏—Ç—å: {bot_member.can_post_messages}")

        #     if bot_member.status == "administrator" and bot_member.can_post_messages:
        #         print("‚úÖ –ë–æ—Ç –∞–¥–º–∏–Ω –∏ –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        #         return True
        #     else:
        #         print("‚ùå –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        #         return False
        # except Exception as e:
        #     print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞ –¥–ª—è –±—É—Å—Ç–∞: {e}")
        #     return False

    @staticmethod
    async def _check_post_reaction_task(bot: Bot, target_id: str) -> bool:
        try:
            if ':' not in target_id:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç target_id, –æ–∂–∏–¥–∞–ª–æ—Å—å 'username:message_id'")
                return False

            chat_part, message_id_str = target_id.split(':')
            message_id = int(message_id_str)

            # –ü—Ä–∏–≤–æ–¥–∏–º chat_part –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –≤–∏–¥—É
            try:
                # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ ‚Äî —ç—Ç–æ ID
                chat_id = int(chat_part)
            except ValueError:
                # –ò–Ω–∞—á–µ —ç—Ç–æ username, –¥–æ–±–∞–≤–∏–º @ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                chat_id = f"@{chat_part}" if not chat_part.startswith("@") else chat_part

            print(f"üì® –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_id}, ID: {message_id}")

            try:
                await bot.forward_message(INFO_ID, chat_id, message_id)
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ, –¥–æ—Å—Ç—É–ø–Ω–æ.")
                return True
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å—Ç–∞/—Ä–µ–∞–∫—Ü–∏–∏: {e}")
            return False


    @staticmethod
    async def print_cache_status():
        """–í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞"""
        print("\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞:")
        for task_type in ['channel', 'chat', 'post', 'comment', 'link', 'reaction', 'boost']:
            cached_tasks = await RedisTasksManager.get_cached_tasks(task_type) or []
            print(f"{task_type.upper()}: {len(cached_tasks)} –∑–∞–¥–∞–Ω–∏–π")
            
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            for i, task in enumerate(cached_tasks[:3]):
                print(f"  –ó–∞–¥–∞–Ω–∏–µ {i+1}: ID={task.get('id')}, target={task.get('target_id')}, amount={task.get('amount')}")
        
        common_counts = task_cache.get('common_tasks_count', {}).get('data', {})
        print("\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º:")
        for task_type, count in common_counts.items():
            print(f"{task_type}: {count}")

    @staticmethod
    async def check_all_tasks(bot: Bot):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π —Å –≤—ã–≤–æ–¥–æ–º —Å—Ç–∞—Ç—É—Å–∞"""
        task_types = ['channel', 'chat', 'post', 'comment', 'link', 'reaction', 'boost']
        
        for task_type in task_types:
            await RedisTasksManager.check_tasks_of_type(bot, task_type)
        
        await RedisTasksManager.update_common_tasks_count(bot)
        await RedisTasksManager.print_cache_status()  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            
    @staticmethod
    async def prepare_task_data(bot: Bot, task_type: str, task: tuple) -> Optional[Dict[str, Any]]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫—ç—à–∞"""
        try:
            if task_type == 'boost':
                task_id, user_id, target_id, amount, task_type_db, status, days = task[:7]
            else:
                task_id, user_id, target_id, amount, task_type_db, status = task[:6]

            task_data = {
                'id': task_id,
                'user_id': user_id,
                'target_id': target_id,
                'amount': amount,
                'type': task_type_db,
                'status': status,
                'is_active': True
            }

            if task_type in ['channel', 'chat', 'boost']:
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º target_id, –µ—Å–ª–∏ —ç—Ç–æ username –±–µ–∑ @
                    if isinstance(target_id, str) and not target_id.startswith("@"):
                        target_id = f"@{target_id}"

                    print(f"‚û° –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç target_id={target_id}")
                    chat = await bot.get_chat(target_id)

                    task_data.update({
                        'title': chat.title,
                        'username': getattr(chat, 'username', None),
                        'invite_link': getattr(chat, 'invite_link', None)
                    })

                    if task_type == 'boost':
                        task_data['days'] = days

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ target_id={target_id}: {e}")
                    return None

            elif task_type == 'reaction':
                reaction_type = task[6] if len(task) > 6 else None
                task_data['reaction_type'] = reaction_type

            return task_data

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è: {e}")
            return None


    @staticmethod
    async def handle_invalid_task(task_type: str, task: tuple, bot: Bot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: —É–¥–∞–ª–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            task_id = task[0]
            user_id = task[1]
            amount = task[3]

            print(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è #{task_id} (—Ç–∏–ø: {task_type})")

            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –ë–î
            await DB.delete_task(task_id)
            print(f"üóë –ó–∞–¥–∞–Ω–∏–µ #{task_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã")

            # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
            refund_amount = amount * all_price.get(task_type, 0)
            if refund_amount > 0:
                await DB.add_balance(user_id, refund_amount)
                await DB.add_transaction(
                    user_id=user_id,
                    amount=refund_amount,
                    description=f"–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ #{task_id}",
                    additional_info=None
                )
                print(f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {refund_amount} MITcoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await bot.send_message(
                        user_id,
                        f"‚ö†Ô∏è –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ #{task_id} (—Ç–∏–ø: {task_type}) –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n"
                        f"üí∏ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {refund_amount} MITcoin –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
                    )
                    print(f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–¥–æ–º–ª—ë–Ω")
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")


    @staticmethod
    async def get_cached_tasks(task_type: str) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫—ç—à–∞ –ø–æ —Ç–∏–ø—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –∏ –∏—Ö –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            if task_type in task_cache['tasks']:
                cached_data = task_cache['tasks'][task_type]
                if 'expiry' in cached_data and cached_data['expiry'] < asyncio.get_event_loop().time():
                    del task_cache['tasks'][task_type]  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    return None
                return cached_data.get('data', None)
            return None
        except Exception as e:
            print(f"Get cached tasks error: {e}")
            return None

    @staticmethod
    async def cache_tasks(task_type: str, tasks: List[Dict[str, Any]], ttl: int = 1800) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à"""
        try:
            expiry_time = asyncio.get_event_loop().time() + ttl if ttl > 0 else None
            task_cache['tasks'][task_type] = {
                'data': tasks,
                'expiry': expiry_time
            }
            return True
        except Exception as e:
            print(f"Cache tasks error: {e}")
            return False

    @staticmethod
    async def invalidate_cache(task_type: str) -> None:
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        try:
            if task_type in task_cache['tasks']:
                del task_cache['tasks'][task_type]
        except Exception as e:
            print(f"Invalidate cache error: {e}")

    @staticmethod
    async def add_new_task_to_cache(task_type: str, task_data: Dict[str, Any]) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –∫—ç—à"""
        try:
            current_tasks = await RedisTasksManager.get_cached_tasks(task_type) or []
            current_tasks.append(task_data)
            return await RedisTasksManager.cache_tasks(task_type, current_tasks)
        except Exception as e:
            print(f"Error adding new task to cache: {e}")
            return False

    async def refresh_task_cache(bot: Bot, task_type: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∑–∞–¥–∞–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞)"""
        try:
            task_mapping = {
                'channel': DB.select_chanel_tasks,
                'chat': DB.select_chat_tasks,
                'post': DB.select_post_tasks,
                'comment': DB.select_like_comment,
                'link': DB.select_link_tasks,
                'reaction': DB.select_reaction_tasks,
                'boost': DB.select_boost_tasks
            }

            if task_type not in task_mapping:
                print(f"Unknown task type: {task_type}")
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—ç—à (–µ—Å–ª–∏ –µ—Å—Ç—å)
            old_cache = await RedisTasksManager.get_cached_tasks(task_type) or []
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ë–î
            db_tasks = await task_mapping[task_type]()
            if not db_tasks:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –≤ –ë–î, —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –∫—ç—à
                await RedisTasksManager.invalidate_cache(task_type)
                return True

            valid_tasks = []
            for task in db_tasks:
                try:
                    if await RedisTasksManager.is_task_valid(bot, task_type, task):
                        task_data = await RedisTasksManager.prepare_task_data(bot, task_type, task)
                        if task_data:
                            valid_tasks.append(task_data)
                except Exception as e:
                    print(f"Error processing task {task[0]}: {e}")
                    continue

            if valid_tasks:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                temp_cache = {
                    'data': valid_tasks,
                    'expiry': asyncio.get_event_loop().time() + 1800
                }
                
                # –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                task_cache['tasks'][task_type] = temp_cache
                return True
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –Ω–æ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π –∫—ç—à - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
            if old_cache:
                return True
                
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –Ω–æ–≤—ã—Ö, –Ω–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π - –æ—á–∏—â–∞–µ–º –∫—ç—à
            await RedisTasksManager.invalidate_cache(task_type)
            return False

        except Exception as e:
            print(f"Critical error in refresh_task_cache: {e}")
            return False

    @staticmethod
    async def check_tasks_of_type(bot: Bot, task_type: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—ç—à (–µ—Å–ª–∏ –µ—Å—Ç—å)
            old_cache = await RedisTasksManager.get_cached_tasks(task_type) or []
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ë–î
            task_mapping = {
                'channel': DB.select_chanel_tasks,
                'chat': DB.select_chat_tasks,
                'post': DB.select_post_tasks,
                'comment': DB.select_like_comment,
                'link': DB.select_link_tasks,
                'reaction': DB.select_reaction_tasks,
                'boost': DB.select_boost_tasks
            }
            
            db_tasks = await task_mapping[task_type]()
            if not db_tasks:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –≤ –ë–î, —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –∫—ç—à
                await RedisTasksManager.invalidate_cache(task_type)
                return

            valid_tasks = []
            invalid_tasks = []

            for task in db_tasks:
                try:
                    if await RedisTasksManager.is_task_valid(bot, task_type, task):
                        task_data = await RedisTasksManager.prepare_task_data(bot, task_type, task)
                        if task_data:
                            valid_tasks.append(task_data)
                    else:
                        invalid_tasks.append(task)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è {task[0]}: {e}")
                    invalid_tasks.append(task)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            for task in invalid_tasks:
                await RedisTasksManager.handle_invalid_task(task_type, task, bot)

            if valid_tasks:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                temp_cache = {
                    'data': valid_tasks,
                    'expiry': asyncio.get_event_loop().time() + 1800
                }
                
                # –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                task_cache['tasks'][task_type] = temp_cache
            elif not old_cache:
                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –Ω–æ–≤—ã—Ö, –Ω–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π - –æ—á–∏—â–∞–µ–º –∫—ç—à
                await RedisTasksManager.invalidate_cache(task_type)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞ {task_type}: {e}")

    @staticmethod
    async def update_common_tasks_count(bot: Bot) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π"""
        try:
            task_types = ['channel', 'chat', 'post', 'comment', 'link', 'reaction', 'boost']
            counts = {}
            
            for task_type in task_types:
                cached_tasks = await RedisTasksManager.get_cached_tasks(task_type)
                if cached_tasks is None:
                    await RedisTasksManager.refresh_task_cache(bot, task_type)
                    cached_tasks = await RedisTasksManager.get_cached_tasks(task_type) or []
                
                counts[task_type] = len(cached_tasks)
            
            total = sum(counts.values())
            counts['total'] = total
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            task_cache['common_tasks_count'] = {
                'data': counts,
                'expiry': asyncio.get_event_loop().time() + 1800  # TTL 5 –º–∏–Ω—É—Ç
            }
            return True
        except Exception as e:
            print(f"Error updating common tasks count: {e}")
            return False

async def set_cached_data(key: str, value: Any, ttl: int = 1800) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
    try:
        expiry_time = asyncio.get_event_loop().time() + ttl if ttl > 0 else None
        if key not in task_cache:
            task_cache[key] = {}
        task_cache[key] = {
            'data': value,
            'expiry': expiry_time
        }
        return True
    except Exception as e:
        print(f"Set cached data error: {e}")
        return False