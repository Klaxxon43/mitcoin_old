from .tasks import *
from handlers.Background.chat import check_admin_and_get_invite_link_chat

@tasks.callback_query(F.data == 'chat_pr_button')
async def pr_chat_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    maxcount = balance // 1500
    await callback.message.edit_text(f'''
üë• –†–µ–∫–ª–∞–º–∞ —á–∞—Ç–∞

üíµ 1500 $MICO = 1 —É—á–∞—Å—Ç–Ω–∏–∫

–±–∞–ª–∞–Ω—Å: <b>{balance}</b>; –í—Å–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å <b>{maxcount}</b> —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

<b>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>‚ùì

<em>–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1500 MITcoin</em>
    ''', reply_markup=pr_menu_canc())
    await state.set_state(ChatPromotionStates.awaiting_members_count)

@tasks.message(ChatPromotionStates.awaiting_members_count)
async def pr_chat2(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    try:
        uscount = int(message.text.strip())
        if uscount >= 1:
            price = 1500 * uscount
            await state.update_data(uscount=uscount, price=price, balance=balance)
            if balance >= price:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="pr_chat_confirm"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {uscount}</b>\nüí∞<b> –°—Ç–æ–∏–º–æ—Å—Ç—å - {price} MITcoin</b>\n\n<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...</em>',
                    reply_markup=builder.as_markup())
            else:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="cancel_all"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b> \n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin\n<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</em>',
                    reply_markup=builder.as_markup())
        else:
            await message.answer('<b>‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç 1 —É—á–∞—Å—Ç–Ω–∏–∫–∞!</b>\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ...',
                                 reply_markup=pr_menu_canc())
    except ValueError:
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ...', reply_markup=pr_menu_canc())

@tasks.callback_query(F.data == 'pr_chat_confirm')
async def pr_chat3(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    uscount = data.get('uscount')
    price = data.get('price')
    balance = data.get('balance')

    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, KeyboardButtonRequestChat
    from aiogram.enums import ChatType

    kb = ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(
                text="üí¨ –í—ã–±—Ä–∞—Ç—å —á–∞—Ç",
                request_chat=KeyboardButtonRequestChat(
                    request_id=1,
                    chat_is_channel=False,
                    chat_is_group=True,
                    user_administrator_rights=types.ChatAdministratorRights(
                        is_anonymous=False,
                        can_manage_chat=True,
                        can_delete_messages=False,
                        can_manage_video_chats=False,
                        can_restrict_members=False,
                        can_promote_members=False,
                        can_change_info=False,
                        can_invite_users=True,
                        can_post_stories=False,
                        can_edit_stories=False,
                        can_delete_stories=False,
                        can_post_messages=True,
                        can_edit_messages=False,
                        can_pin_messages=False
                    ),
                    bot_administrator_rights=types.ChatAdministratorRights(
                        is_anonymous=False,
                        can_manage_chat=True,
                        can_delete_messages=False,
                        can_manage_video_chats=False,
                        can_restrict_members=False,
                        can_promote_members=False,
                        can_change_info=False,
                        can_invite_users=True,
                        can_post_stories=False,
                        can_edit_stories=False,
                        can_delete_stories=False,
                        can_post_messages=True,
                        can_edit_messages=False,
                        can_pin_messages=False
                    )
                )
            )
        ]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await callback.message.answer(
        "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=kb
    )

    await state.set_state(ChatPromotionStates.awaiting_chat_selection)
    await state.update_data(uscount=uscount, price=price, balance=balance)

@tasks.message(ChatPromotionStates.awaiting_chat_selection)
async def handle_chat_selection(message: types.Message, state: FSMContext, bot: Bot):
    if not message.chat_shared:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    chat_id = message.chat_shared.chat_id
    user_id = message.from_user.id
    data = await state.get_data()
    price = data.get('price')
    amount = data.get('uscount')

    try:
        chat = await bot.get_chat(chat_id)
        bot_info = await bot.get_me()
        member = await bot.get_chat_member(chat_id, bot_info.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
        if member.status != "administrator" or not member.can_invite_users or not member.can_manage_chat:
            await state.update_data(pending_chat_id=chat_id)

            invite_link = f"https://t.me/{bot_info.username}?startgroup&admin=invite_users+manage_chat"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω—ã", url=invite_link)],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_chat_admin_rights")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_menu")]
            ])

            await message.answer(
                f"üòï –ë–æ—Ç –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ <b>{chat.title}</b>, –Ω–æ –µ–º—É <u>–Ω–µ –≤—ã–¥–∞–Ω—ã –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞</u>\n\n"
                f"üîß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω—ã –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b>.",
                reply_markup=keyboard
            )
            return

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞:", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    await DB.add_balance(user_id, -price)
    await DB.add_transaction(user_id=user_id, amount=price, description="—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç", additional_info=None)
    await DB.add_task(user_id=user_id, target_id=chat_id, amount=amount, task_type=2)  # 2 - —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è "—á–∞—Ç"
    await RedisTasksManager.refresh_task_cache(bot, "chat")
    await RedisTasksManager.update_common_tasks_count(bot)

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —á–∞—Ç <b>{chat.title}</b> —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")]
        ])
    )

    await bot.send_message(TASKS_CHAT_ID, f'''
üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: üí¨ –ß–∞—Ç
üí¨ –ß–∞—Ç: {chat.title}
üí∏ –¶–µ–Ω–∞: {price // amount}
üë• –ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}
''')

    await state.clear()

@tasks.callback_query(F.data == "check_chat_admin_rights")
async def check_chat_admin_rights(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    data = await state.get_data()
    user_id = callback.from_user.id
    chat_id = data.get("pending_chat_id")
    price = data.get('price')
    amount = data.get('uscount')

    try:
        chat = await bot.get_chat(chat_id)
        bot_info = await bot.get_me()
        member = await bot.get_chat_member(chat_id, bot_info.id)

        if member.status != "administrator" or not member.can_invite_users or not member.can_manage_chat:
            await callback.message.edit_text(
                f"‚õî –ë–æ—Ç—É –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –≤—ã–¥–∞–Ω—ã –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ <b>{chat.title}</b>.\n\n"
                f"üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω <b>–∞–¥–º–∏–Ω</b> –∏ –º–æ–∂–µ—Ç <b>–ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Ç–æ–º</b>.",
                reply_markup=callback.message.reply_markup
            )
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        await DB.add_balance(user_id, -price)
        await DB.add_transaction(user_id=user_id, amount=price, description="—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç", additional_info=None)
        await DB.add_task(user_id=user_id, target_id=chat_id, amount=amount, task_type=2)
        await RedisTasksManager.refresh_task_cache(bot, "chat")
        await RedisTasksManager.update_common_tasks_count(bot)
        
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —á–∞—Ç <b>{chat.title}</b> —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")]
            ])
        )

        await bot.send_message(TASKS_CHAT_ID, f'''
üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: üí¨ –ß–∞—Ç
üí¨ –ß–∞—Ç: {chat.title}
üí∏ –¶–µ–Ω–∞: {price // amount}
üë• –ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}
''')

        await state.clear()

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ check_chat_admin_rights:", e)
        await callback.message.edit_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        


@tasks.callback_query(F.data == 'work_chat')
async def tasksschat_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ Redis –∏–ª–∏ –ë–î
        all_tasks = await RedisTasksManager.get_cached_tasks('chat') or []
        if not all_tasks:
            await RedisTasksManager.refresh_task_cache(bot, 'chat')
            all_tasks = await RedisTasksManager.get_cached_tasks('chat') or []

        print("–ó–∞–¥–∞–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", all_tasks)

        filtered_tasks = []
        for task in all_tasks:
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è:", task)
            try:
                task_id = task["id"]
                if not await DB.is_task_completed(user_id, task_id):
                    filtered_tasks.append(task)
            except Exception as inner_e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è {task}: {inner_e}")

        tasks = filtered_tasks


        if tasks:
            random.shuffle(tasks)
            keyboard = await generate_tasks_keyboard_chat(tasks, bot)

            await callback.message.edit_text(
                "üë§ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —á–∞—Ç—ã:</b>\n\nüé¢ –ß–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫–∏–¥–∞—Ç—å —á–∞—Ç —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                reply_markup=back_work_menu_kb(user_id)
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ tasksschat_handler: {e}")
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="work_chat"))
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.",
            reply_markup=builder.as_markup()
        )

        

async def generate_tasks_keyboard_chat(tasks, bot):
    builder = InlineKeyboardBuilder()

    # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    for task in tasks[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        chat_id = task["target_id"]
        task_id = task["id"]
        try:
            chat = await bot.get_chat(chat_id)
            chat_title = chat.title
        except Exception:
            chat_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"

        button_text = f"{chat_title} | +1500"
        builder.row(InlineKeyboardButton(text=button_text, callback_data=f"chattask_{task_id}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))

    # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
    builder.row(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="work_chat"))

    return builder.as_markup()


@tasks.callback_query(lambda c: c.data.startswith("chattask_"))
async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)

    amount = task[3]

    invite_link = await check_admin_and_get_invite_link_chat(bot, task[2])
    chat_id = task[2]
    chat = await bot.get_chat(chat_id)
    task_info = f"""
üë§ {chat.title} | <i>{amount}</i>
<i>–í—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É -</i> <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b> üîÑÔ∏è

{invite_link}    
    """
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chatcheck_{task_id}"))
    builder.add(InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_task_{task_id}"))
    builder.add(InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"report_chat_{task_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_chat"))
    builder.adjust(1, 2, 1)
    await callback.message.edit_text(task_info, reply_markup=builder.as_markup())


@tasks.callback_query(F.data.startswith('chatcheck_'))
async def check_subscription_chat(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    if task is None:
        await callback.message.edit_text("‚ùó –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", reply_markup=back_menu_kb(user_id))
        await asyncio.sleep(1)
        return

    user_id = callback.from_user.id
    target_id = task[2]
    invite_link = await check_admin_and_get_invite_link_chat(bot, task[2])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —á–∞—Ç
    try:
        bot_member = await bot.get_chat_member(target_id, callback.message.chat.id)
        if bot_member.status != "member":
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_chat"))
            builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chatcheck_{task_id}"))
            await callback.message.edit_text(
                f"üö© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç</b> –ø–æ —Å—Å—ã–ª–∫–µ {invite_link} –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                reply_markup=builder.as_markup())
            return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_chat"))
        builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chatcheck_{task_id}"))

        await callback.message.edit_text(
            f"üö© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç</b> –ø–æ —Å—Å—ã–ª–∫–µ {invite_link} –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
            reply_markup=builder.as_markup())
        return

    if not await DB.is_task_completed(user_id, task[0]):
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ (–≤—ã—á–∏—Ç–∞–µ–º amount –Ω–∞ 1)
        await DB.update_task_amount(task_id)
        await DB.add_completed_task(user_id, task_id, target_id, 1500, task[1], status=1)
        await DB.add_balance(amount=1500, user_id=user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        updated_task = await DB.get_task_by_id(task_id)
        if updated_task[3] == 0:
            delete_task = await DB.get_task_by_id(task_id)
            creator_id = delete_task[1]
            await DB.delete_task(task_id)
            await RedisTasksManager.refresh_task_cache(bot, "chat")
            await bot.send_message(creator_id, f"üéâ –û–¥–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
                                   reply_markup=back_menu_kb(user_id))


        await DB.increment_statistics(1, 'all_subs_groups')
        await DB.increment_statistics(2, 'all_subs_groups')
        await DB.increment_statistics(1, 'all_taasks')
        await DB.increment_statistics(2, 'all_taasks')
        await update_dayly_and_weekly_tasks_statics(user_id)
        await callback.message.edit_text("‚úÖ")
        await callback.answer("+1500")
        await asyncio.sleep(2)
    else:
        await callback.message.edit_text("‚Äº –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ", reply_markup=back_menu_kb(user_id))
        await asyncio.sleep(3)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    all_tasks = await RedisTasksManager.get_cached_tasks('chat') or []
    tasks = [
        task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])
    ]

    if tasks:
        random.shuffle(tasks)
        keyboard = await generate_tasks_keyboard_chat(tasks, bot)
        await callback.message.edit_text(
            "üë§ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —á–∞—Ç—ã:</b>\n\nüé¢ –ß–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫–∏–¥–∞—Ç—å —á–∞—Ç —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
            reply_markup=back_work_menu_kb(user_id)
        )


class ChatReport(StatesGroup):
    desc = State()

@tasks.callback_query(F.data.startswith('chatreport_'))
async def request_chat_report_description(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    target_id = task[2]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(task_id=task_id, target_id=target_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    await callback.message.edit_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å —ç—Ç–∏–º —á–∞—Ç–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.")
    await state.set_state(ChatReport.desc)

@tasks.message(ChatReport.desc)
async def save_chat_report_description(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    description = message.text

    # –ü–æ–ª—É—á–∞–µ–º task_id –∏ target_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    task_id = data.get("task_id")
    target_id = data.get("target_id")

    if task_id and target_id:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await DB.add_report(task_id=task_id, chat_id=target_id, user_id=user_id, description=description)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        chat = await bot.get_chat(target_id)
        await message.answer(f'‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ —á–∞—Ç <b>{chat.title}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')
        await asyncio.sleep(1)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π
        all_tasks = await RedisTasksManager.get_cached_tasks('chat') or []
        tasks = [task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])]

        if tasks:
            random.shuffle(tasks)
            chatpage = 1
            keyboard = await generate_tasks_keyboard_chat(tasks, bot)
            await message.answer(
                "üë§ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —á–∞—Ç—ã:</b>\n\nüé¢ –ß–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫–∏–¥–∞—Ç—å —á–∞—Ç —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>",
                reply_markup=keyboard)
        else:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                                 reply_markup=back_work_menu_kb(user_id))
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞–Ω–∏–∏.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
async def check_admin_and_get_invite_link_chating(bot, chat_id):
    try:
        chat_administrators = await bot.get_chat_administrators(chat_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        for admin in chat_administrators:
            if admin.user.id == bot.id:
                # –ï—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                invite_link = await bot.export_chat_invite_link(chat_id)
                return invite_link
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω
        return "üòë –û—à–∏–±–∫–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ..."
    except:
        return "üòë –û—à–∏–±–∫–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ..."
    














