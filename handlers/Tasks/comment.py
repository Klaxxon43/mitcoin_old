from .tasks import *

@tasks.callback_query(F.data == 'comment_pr_button')
async def like_post_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    maxcount = balance // all_price["comment"]
    await callback.message.edit_text(f'''
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º

üíµ {all_price["comment"]} MITcoin = 1 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

–±–∞–ª–∞–Ω—Å: <b>{balance}</b>; –í—Å–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å <b>{maxcount}</b> –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

<b>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</b>‚ùì

<em>–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {all_price["comment"]} MITcoin</em>
    ''', reply_markup=pr_menu_canc())
    await state.set_state(CommentPromotionStates.awaiting_comments_count)

@tasks.message(CommentPromotionStates.awaiting_comments_count)
async def like_post2(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    try:
        uscount = int(message.text.strip())
        if uscount >= 1:
            price = all_price["comment"] * uscount
            await state.update_data(uscount=uscount, price=price, balance=balance)
            if balance >= price:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="comment_post_confirm"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üëç <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {uscount}</b>\nüí∞<b> –°—Ç–æ–∏–º–æ—Å—Ç—å - {price} MITcoin</b>\n\n<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...</em>',
                    reply_markup=builder.as_markup())
            else:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="cancel_all"))
                builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b> \n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin\n<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...</em>',
                    reply_markup=builder.as_markup())
        else:
            await message.answer('<b>‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç 1 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è!</b>\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ...',
                                 reply_markup=pr_menu_canc())
    except ValueError:
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ...', reply_markup=pr_menu_canc())

@tasks.callback_query(F.data == 'comment_post_confirm')
async def like_post3(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    uscount = data.get('uscount')
    price = data.get('price')
    balance = data.get('balance')
    await state.clear()
    await callback.message.edit_text(f'''
üëç –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –Ø –∂–¥—É...
    ''', reply_markup=pr_menu_canc())
    await state.set_state(CommentPromotionStates.awaiting_post_for_comments)
    await state.update_data(uscount=uscount, price=price, balance=balance)

@tasks.message(CommentPromotionStates.awaiting_post_for_comments)
async def like_post4(message: types.Message, state: FSMContext, bot: Bot):
    async with task_creation_lock:
        user_id = message.from_user.id
        data = await state.get_data()
        amount = data.get('uscount')
        price = data.get('price')
        balance = data.get('balance')

        if message.forward_from_chat:
            message_id = message.forward_from_message_id
            chat_id = message.forward_from_chat.id
            target_id_code = f'{chat_id}:{message_id}'

            try:
                await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)
                task_type = 4  # –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–æ–º–º–µ–Ω—Ç—ã
                new_balance = balance - price
                await DB.update_balance(user_id, balance=new_balance)
                await DB.add_task(user_id=user_id, target_id=target_id_code, amount=amount, task_type=task_type)

                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
                await message.answer(
                    "ü•≥ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>\n\n–ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üòâ",
                    reply_markup=builder.as_markup())
                
                await DB.add_transaction(
                    user_id=message.from_user.id,
                    amount=price, 
                    description="—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    additional_info=None
                )

                await bot.send_message(TASKS_CHAT_ID, f'''
üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
üí∏ –¶–µ–Ω–∞: {all_price["comment"]}
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {amount * all_price["comment"]} 
''')
                await state.clear()
            except:
                bot_username = (await bot.get_me()).username
                invite_link = f"http://t.me/{bot_username}?startchannel&admin=invite_users+manage_chat"
                add_button = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª", url=invite_link)
                add_button1 = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='pr_menu_cancel')
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1]])
                await message.answer(
                    'üò∂ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ...',
                    reply_markup=keyboard)


















@tasks.callback_query(F.data == 'work_comment')
async def works_like_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    all_tasks = await DB.select_like_comment()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

    if all_tasks:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
        available_tasks = [
            task for task in all_tasks
            if not await DB.is_task_completed(user_id, task[0])  # –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
            and not await DB.is_task_failed(user_id, task[0])  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ
            and not await DB.is_task_pending(user_id, task[0])  # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
        ]
        
        if not available_tasks:
            await callback.message.edit_text(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                reply_markup=back_work_menu_kb(user_id)
            )
            return 
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        random_task = random.choice(available_tasks)
        task_id, target_id, amount = random_task[0], random_task[2], random_task[3]
        chat_id, message_id = map(int, target_id.split(":"))
        
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)
            await callback.message.answer_sticker(
                'CAACAgIAAxkBAAENFeZnLS0EwvRiToR0f5njwCdjbSmWWwACTgEAAhZCawpt1RThO2pwgjYE')
            await asyncio.sleep(3)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"comment_{task_id}"))
            builder.add(InlineKeyboardButton(text="‚úã–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data=f"2comment_{task_id}"))
            builder.add(InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_task_{task_id}"))
            builder.add(InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"report_comment_{task_id}"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))

            builder.adjust(2, 2, 1)

            await callback.message.answer(
                "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b>, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.\n\n"
                "<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ–¥–∑–∏, —Å—Ç–∏–∫–µ—Ä–æ–º, GIF –∏–ª–∏ –¥—Ä—É–≥–∏–º –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.</em>\n"
                "<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–º–µ –ø–æ—Å—Ç–∞.</em>\n"
                "<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ.</em>\n\n",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_work_menu_kb(user_id)
            )
    else:
        await callback.message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
            reply_markup=back_work_menu_kb(user_id)
        )

@tasks.callback_query(F.data.startswith('comment_'))
async def check_like_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    task_id = int(callback.data.split('_')[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    task = await DB.get_task_by_id(task_id)
    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    target_id = task[2]
    chat_id, message_id = map(int, target_id.split(":"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫
    like_detected = None #await comment(user_id, chat_id, message_id)

    if like_detected:
        # # –õ–∞–π–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω
        await DB.increment_statistics(1, 'comments')
        await DB.increment_statistics(2, 'comments')
        await DB.increment_statistics(1, 'all_taasks')
        await DB.increment_statistics(2, 'all_taasks')

        await callback.message.answer(
            f"üëç <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞—Å—á–∏—Ç–∞–Ω! +{all_price["comment"]} MITcoin</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è≠Ô∏è", callback_data="work_comment")]]
            )
        ) 

        await update_dayly_and_weekly_tasks_statics(user_id)
        await DB.update_task_amount(task_id)
        updated_task = await DB.get_task_by_id(task_id)
        await DB.add_completed_task(user_id, task_id, target_id, all_price["comment"], task[1], status=0)
        await DB.add_balance(amount=all_price["comment"], user_id=user_id)

        if updated_task[3] == 0:
            delete_task = await DB.get_task_by_id(task_id)
            creator_id = delete_task[1]
            await DB.delete_task(task_id)
            await bot.send_message(creator_id, f"üéâ –û–¥–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
                                   reply_markup=back_menu_kb(user_id))
    else:
        # –õ–∞–π–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω
        await callback.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –±—ã–ª –Ω–∞–ø–∏—Å–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "2comment_"
@tasks.callback_query(F.data.startswith('2comment_'))
async def _(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    task_id = int(callback.data.split('_')[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    task = await DB.get_task_by_id(task_id)
    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    target_id = task[2]
    chat_id, message_id = map(int, target_id.split(":"))
    await callback.message.answer(
        'üòû –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?\n'
        '‚úåÔ∏è –ù–∞–º –∂–∞–ª—å, —á—Ç–æ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π, –∞ –ø–æ–∫–∞ –º—ã —Ä–µ—à–∞–µ–º –µ—ë, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n'
        '‚ùóÔ∏è –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –ú—ã –∑–∞–º–µ—Ç–∏–º —ç—Ç–æ –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∏—Å–ª–∏–º –≤–∞–º –Ω–∞–≥—Ä–∞–¥—É!'
    )
    await state.set_state(CommentProof.waiting_for_screenshot)
    await state.update_data(task_id=task_id, target_id=target_id, chat_id=chat_id, message_id=message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@tasks.message(CommentProof.waiting_for_screenshot)
async def handle_screenshot(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    data = await state.get_data()
    task_id = data.get('task_id')
    target_id = data.get('target_id')
    chat_id = data.get('chat_id')
    message_id = data.get('message_id')

    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return

    screenshot_id = message.photo[-1].file_id  # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await DB.add_pending_reaction_task( 
        user_id=user_id,
        task_id=task_id,
        target_id=target_id,
        post_id=chat_id,
        reaction=message_id,
        screenshot=screenshot_id
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    kb = InlineKeyboardBuilder()
    kb.button(text='‚è≠ –î–∞–ª–µ–µ', callback_data='work_comment')
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='work_menu')
    await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=kb.as_markup())

    chat: Chat = await bot.get_chat(chat_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_comment_{task_id}_{user_id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_comment_{task_id}_{user_id}"))
    builder.add(InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=f"https://t.me/{chat.username}/{message_id}"))
    builder.adjust(1)

    sent_message = await bot.send_photo(
        CHECK_CHAT_ID,
        photo=screenshot_id,
        caption=(
            f"#–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n"
            f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {user_id})\n"
            f"üìå –ü–æ—Å—Ç: https://t.me/{chat.username}/{message_id}\n"
            f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
        ),
        reply_markup=builder.as_markup()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ state
    await state.update_data(admin_message_id=sent_message.message_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    asyncio.create_task(auto_confirm_comment_task(task_id, user_id, bot, message.from_user.username, state))

    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
async def auto_confirm_comment_task(task_id, user_id, bot, username, state):
    await asyncio.sleep(24 * 3600)  # –ñ–¥–µ–º 24 —á–∞—Å–∞
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if pending_task:
        await confirm_comment_handler(task_id, user_id, bot, username, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
@tasks.callback_query(F.data.startswith('confirm_comment_'))
async def confirm_comment_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split('_')
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
        return

    task_id = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî task_id
    user_id = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî user_id

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if not pending_task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    pending_id, user_id, task_id, target_id, chat_id, message_id, screenshot, status = pending_task

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É completed_tasks
    await DB.add_completed_task(
        user_id=user_id,
        task_id=task_id,
        target_id=target_id,
        task_sum=all_price["comment"],
        owner_id=user_id,
        status=0,
        other=0
    )

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    await DB.delete_pending_reaction_task(task_id, user_id)

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await DB.add_balance(amount=all_price["comment"], user_id=user_id)

    task = await DB.get_task_by_id(task_id)
    if task:
        new_amount = task[3] - 1  # task[3] ‚Äî —ç—Ç–æ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        await DB.update_task_amount2(task_id, new_amount)

    chat: Chat = await bot.get_chat(chat_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        f"üéâ <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
        f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {all_price["comment"]} MITcoin\n"
        f"üìå –ü–æ—Å—Ç: https://t.me/{chat.username}/{message_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )

    await update_dayly_and_weekly_tasks_statics(user_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω–∏—è
    creator_id = user_id
    # await bot.send_message(
    #     creator_id,
    #     f"üéâ <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
    #     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n" 
    #     f"üìå –ü–æ—Å—Ç: https://t.me/{chat.username}/{message_id}\n"
    #     f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    # )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    data = await state.get_data()
    admin_message_id = data.get('admin_message_id')
    if admin_message_id:
        await bot.delete_message(CHECK_CHAT_ID, admin_message_id)

    await DB.increment_statistics(1, 'comments')
    await DB.increment_statistics(2, 'comments')
    await DB.increment_statistics(1, 'all_taasks')
    await DB.increment_statistics(2, 'all_taasks')

    await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
@tasks.callback_query(F.data.startswith('reject_comment_'))
async def reject_comment_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split('_')
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
        return

    task_id = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî task_id
    user_id = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî user_id

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if not pending_task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    pending_id, user_id, task_id, target_id, chat_id, message_id, screenshot, status = pending_task

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await DB.add_failed_task(user_id, task_id)

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    await DB.delete_pending_reaction_task(task_id, user_id)

    chat: Chat = await bot.get_chat(chat_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        f"‚ùå <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</b>\n\n"
        f"üìå –ü–æ—Å—Ç: https://t.me/{chat.username}/{message_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await bot.send_message(
        CHECK_CHAT_ID,
        f"‚ùå <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n"
        f"üìå –ü–æ—Å—Ç: https://t.me/{chat.username}/{message_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    data = await state.get_data()
    admin_message_id = data.get('admin_message_id')
    if admin_message_id:
        await bot.delete_message(CHECK_CHAT_ID, admin_message_id)

    await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")








@tasks.callback_query(F.data == 'work_comment')
async def works_like_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    all_tasks = await DB.select_like_comment()

    if all_tasks:
        available_tasks = [
            task for task in all_tasks
            if not await DB.is_task_completed(user_id, task[0])
            and not await DB.is_task_failed(user_id, task[0])
            and not await DB.is_task_pending(user_id, task[0])
        ]
        
        if not available_tasks:
            await callback.message.edit_text(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                reply_markup=back_work_menu_kb(user_id)
            )
            return 
        
        random_task = random.choice(available_tasks)
        task_id, target_id, amount = random_task[0], random_task[2], random_task[3]
        chat_id, message_id = map(int, target_id.split(":"))
        
        try:
            await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)
            await callback.message.answer_sticker(
                'CAACAgIAAxkBAAENFeZnLS0EwvRiToR0f5njwCdjbSmWWwACTgEAAhZCawpt1RThO2pwgjYE')
            await asyncio.sleep(3)

            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"comment_{task_id}"))
            builder.add(InlineKeyboardButton(text="‚úã–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data=f"2comment_{task_id}"))
            builder.add(InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_task_{task_id}"))
            builder.add(InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"report_comment_{task_id}"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))
            builder.adjust(2, 2, 1)

            await callback.message.answer(
                "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b>, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.\n\n"
                "<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ–¥–∑–∏, —Å—Ç–∏–∫–µ—Ä–æ–º, GIF –∏–ª–∏ –¥—Ä—É–≥–∏–º –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.</em>\n"
                "<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–º–µ –ø–æ—Å—Ç–∞.</em>\n"
                "<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ.</em>\n\n",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_work_menu_kb(user_id))
    else:
        await callback.message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
            reply_markup=back_work_menu_kb(user_id))
        







@tasks.callback_query(F.data == 'work_comment')
async def works_like_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    all_tasks = await DB.select_like_comment()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

    if all_tasks:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
        available_tasks = [
            task for task in all_tasks
            if not await DB.is_task_completed(user_id, task[0])  # –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
            and not await DB.is_task_failed(user_id, task[0])  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ
            and not await DB.is_task_pending(user_id, task[0])  # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
        ]
        
        if not available_tasks:
            await callback.message.edit_text(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                reply_markup=back_work_menu_kb(user_id)
            )
            return 
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        random_task = random.choice(available_tasks)
        task_id, target_id, amount = random_task[0], random_task[2], random_task[3]
        chat_id, message_id = map(int, target_id.split(":"))
        
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)
            await callback.message.answer_sticker(
                'CAACAgIAAxkBAAENFeZnLS0EwvRiToR0f5njwCdjbSmWWwACTgEAAhZCawpt1RThO2pwgjYE')
            await asyncio.sleep(3)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"comment_{task_id}"))
            builder.add(InlineKeyboardButton(text="‚úã–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data=f"2comment_{task_id}"))
            builder.add(InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_task_{task_id}"))
            builder.add(InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"report_comment_{task_id}"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))

            builder.adjust(2, 2, 1)

            await callback.message.answer(
                "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b>, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.\n"
                "<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ–¥–∑–∏, —Å—Ç–∏–∫–µ—Ä–æ–º, GIF –∏–ª–∏ –¥—Ä—É–≥–∏–º –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.</em>\n"
                "<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–º–µ –ø–æ—Å—Ç–∞.</em>\n"
                "<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ.</em>\n\n",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_work_menu_kb(user_id)
            )
    else:
        await callback.message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
            reply_markup=back_work_menu_kb(user_id)
        )

@tasks.callback_query(F.data.startswith('comment_'))
async def check_like_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    task_id = int(callback.data.split('_')[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    task = await DB.get_task_by_id(task_id)
    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    target_id = task[2]
    chat_id, message_id = map(int, target_id.split(":"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫
    like_detected = None #await comment(user_id, chat_id, message_id)

    if like_detected:
        # # –õ–∞–π–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω
        await DB.increment_statistics(1, 'comments')
        await DB.increment_statistics(2, 'comments')
        await DB.increment_statistics(1, 'all_taasks')
        await DB.increment_statistics(2, 'all_taasks')

        await callback.message.answer(
            f"üëç <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞—Å—á–∏—Ç–∞–Ω! +{all_price["comment"]} MITcoin</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è≠Ô∏è", callback_data="work_comment")]]
            )
        ) 

        await DB.update_task_amount(task_id)
        updated_task = await DB.get_task_by_id(task_id)
        await DB.add_completed_task(user_id, task_id, target_id, all_price["comment"], task[1], status=0)
        await DB.add_balance(amount=all_price["comment"], user_id=user_id)

        if updated_task[3] == 0:
            delete_task = await DB.get_task_by_id(task_id)
            creator_id = delete_task[1]
            await DB.delete_task(task_id)
            await bot.send_message(creator_id, f"üéâ –û–¥–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
                                   reply_markup=back_menu_kb(user_id))
    else:
        # –õ–∞–π–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω
        await callback.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –±—ã–ª –Ω–∞–ø–∏—Å–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
class CommentProof(StatesGroup):
    waiting_for_screenshot =State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "2comment_"
@tasks.callback_query(F.data.startswith('2comment_'))
async def _(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    task_id = int(callback.data.split('_')[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    task = await DB.get_task_by_id(task_id)
    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    target_id = task[2]
    chat_id, message_id = map(int, target_id.split(":"))
    await callback.message.answer(
        'üòû –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?\n'
        '‚úåÔ∏è –ù–∞–º –∂–∞–ª—å, —á—Ç–æ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π, –∞ –ø–æ–∫–∞ –º—ã —Ä–µ—à–∞–µ–º –µ—ë, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n'
        '‚ùóÔ∏è –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –ú—ã –∑–∞–º–µ—Ç–∏–º —ç—Ç–æ –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∏—Å–ª–∏–º –≤–∞–º –Ω–∞–≥—Ä–∞–¥—É')
    await state.set_state(CommentProof.waiting_for_screenshot)                                                                          
    await state.update_data(task_id=task_id, target_id=target_id, chat_id=chat_id, message_id=message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@tasks.message(CommentProof.waiting_for_screenshot)
async def handle_screenshot(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    data = await state.get_data()
    task_id = data.get('task_id')
    target_id = data.get('target_id')
    chat_id = data.get('chat_id')
    message_id = data.get('message_id')

    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return

    screenshot_id = message.photo[-1].file_id  # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await DB.add_pending_reaction_task( 
        user_id=user_id,
        task_id=task_id,
        target_id=target_id,
        post_id=chat_id,
        reaction=message_id,
        screenshot=screenshot_id
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    kb = InlineKeyboardBuilder()
    kb.button(text='‚è≠ –î–∞–ª–µ–µ', callback_data='work_comment')
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='work_menu')
    await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=kb.as_markup())

    chat: Chat = await bot.get_chat(chat_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_comment_{task_id}_{user_id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_comment_{task_id}_{user_id}"))
    builder.add(InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=f"https://t.me/{chat.username}/{message_id}"))
    builder.adjust(1)

    sent_message = await bot.send_photo(
        CHECK_CHAT_ID,
        photo=screenshot_id,
        caption=(
            f"#–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n"
            f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {user_id})\n"
            f"üìå –ü–æ—Å—Ç: https://t.me/{chat.username}/{message_id}\n"
            f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
        ),
        reply_markup=builder.as_markup()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ state
    await state.update_data(admin_message_id=sent_message.message_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    asyncio.create_task(auto_confirm_comment_task(task_id, user_id, bot, message.from_user.username, state))

    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
async def auto_confirm_comment_task(task_id, user_id, bot, username, state):
    await asyncio.sleep(24 * 3600)  # –ñ–¥–µ–º 24 —á–∞—Å–∞
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if pending_task:
        await confirm_comment_handler(task_id, user_id, bot, username, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
@tasks.callback_query(F.data.startswith('confirm_comment_'))
async def confirm_comment_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split('_')
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
        return

    task_id = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî task_id
    user_id = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî user_id

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if not pending_task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    pending_id, user_id, task_id, target_id, chat_id, message_id, screenshot, status = pending_task

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É completed_tasks
    await DB.add_completed_task(
        user_id=user_id,
        task_id=task_id,
        target_id=target_id,
        task_sum=all_price["comment"],
        owner_id=user_id,
        status=0,
        other=0
    )

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    await DB.delete_pending_reaction_task(task_id, user_id)

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await DB.add_balance(amount=all_price["comment"], user_id=user_id)

    task = await DB.get_task_by_id(task_id)
    if task:
        new_amount = task[3] - 1  # task[3] ‚Äî —ç—Ç–æ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        await DB.update_task_amount2(task_id, new_amount)

    chat: Chat = await bot.get_chat(chat_id)
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        f"üéâ <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
        f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {all_price["comment"]} MITcoin\n"
        f"üìå –ü–æ—Å—Ç: https://t.me/{chat.username}/{message_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω–∏—è
    creator_id = user_id
    await bot.send_message(
        creator_id,
        f"üéâ <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n" 
        f"üìå –ü–æ—Å—Ç: https://t.me/{chat.username}/{message_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    data = await state.get_data()
    admin_message_id = data.get('admin_message_id')
    if admin_message_id:
        await bot.delete_message(CHECK_CHAT_ID, admin_message_id)

    await DB.increment_statistics(1, 'comments')
    await DB.increment_statistics(2, 'comments')
    await DB.increment_statistics(1, 'all_taasks')
    await DB.increment_statistics(2, 'all_taasks')

    await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
@tasks.callback_query(F.data.startswith('reject_comment_'))
async def reject_comment_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split('_')
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
        return

    task_id = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî task_id
    user_id = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî user_id

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if not pending_task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    pending_id, user_id, task_id, target_id, chat_id, message_id, screenshot, status = pending_task

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await DB.add_failed_task(user_id, task_id)

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    await DB.delete_pending_reaction_task(task_id, user_id)

    chat: Chat = await bot.get_chat(chat_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        f"‚ùå <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</b>\n\n"
        f"üìå –ü–æ—Å—Ç: https://t.me/{chat.username}/{message_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await bot.send_message(
        CHECK_CHAT_ID,
        f"‚ùå <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n"
        f"üìå –ü–æ—Å—Ç: https://t.me/{chat.username}/{message_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    data = await state.get_data()
    admin_message_id = data.get('admin_message_id')
    if admin_message_id:
        await bot.delete_message(CHECK_CHAT_ID, admin_message_id)

    await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")