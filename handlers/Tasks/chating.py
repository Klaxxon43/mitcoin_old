from .tasks import *
from handlers.client import *
from handlers.client.my_works import check_admin_and_get_invite_link

@tasks.callback_query(F.data == 'work_chating')
async def chating_tasks_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    tasks = await DB.get_chating_tasks()

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    vchatingpage = 1
    tasks_on_page, total_pages = paginate_tasks(tasks, vchatingpage)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard_chating(tasks_on_page, vchatingpage, total_pages, bot)

    await callback.message.edit_text(
        "üî• <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –Ω–µ–≥–æ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ $MICO –∑–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
        reply_markup=keyboard)
    

@tasks.callback_query(lambda c: c.data.startswith("vchatingpage_"))
async def vchange_page_handler(callback: types.CallbackQuery, bot: Bot):
    vchatingpage = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    tasks = await DB.get_chating_tasks()

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    tasks_on_page, total_pages = paginate_tasks(tasks, vchatingpage)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard_chating(tasks_on_page, vchatingpage, total_pages, bot)

    await callback.message.edit_text(
        "üî• <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –Ω–µ–≥–æ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ MITcoin –∑–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
        reply_markup=keyboard)
    


@tasks.callback_query(lambda c: c.data.startswith("vchatingtask_"))
async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_chating_task_by_id(task_id)

    price = task[2]

    invite_link = await check_admin_and_get_invite_link(bot, task[1])
    chat_id = task[1]
    chat = await bot.get_chat(chat_id)
    task_info = f"""
<b>{chat.title}</b>

<em>–í—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç, –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ MITcoin</em>

üí∞ –ü–ª–∞—Ç–∞ –∑–∞ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ - {price} MITcoin 

{invite_link}    
    """
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_chating"))

    await callback.message.edit_text(task_info, reply_markup=builder.as_markup())

async def generate_tasks_keyboard_chating(chating_tasks, vchatingpage, total_pages, bot):
    builder = InlineKeyboardBuilder()

    # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    for task in chating_tasks:
        chat_id = task[1]
        chat = await bot.get_chat(chat_id)
        price = task[2]
        chat_title = chat.title
        button_text = f"{chat_title} | {price}"
        # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        builder.row(InlineKeyboardButton(text=button_text, callback_data=f"vchatingtask_{task[0]}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = []
    if vchatingpage > 1:
        pagination.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"vchatingpage_{vchatingpage - 1}"))
    pagination.append(InlineKeyboardButton(text=str(vchatingpage), callback_data="current_page"))
    if vchatingpage < total_pages:
        pagination.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"vchatingpage_{vchatingpage + 1}"))

    builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    return builder.as_markup()