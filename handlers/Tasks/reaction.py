from .tasks import *

@tasks.callback_query(F.data == 'reaction_pr_button')
async def reaction_post_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance'] if user['balance'] is not None else 0
    
    if balance >= all_price['reaction']:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–õ—é–±–∞—è —Ä–µ–∞–∫—Ü–∏—è", callback_data="reaction_any"))
        builder.add(InlineKeyboardButton(text="–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è", callback_data="reaction_specific"))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
        builder.adjust(2, 1)
        await callback.message.edit_text(
            f'üé≠ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏–∏\n\nüíµ {all_price["reaction"]} MITcoin\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏:',
            reply_markup=builder.as_markup()
        )
    else:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="cancel_all"))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
        await callback.message.edit_text(
            f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b> –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin\n<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å...</em>',
            reply_markup=builder.as_markup()
        )

@tasks.callback_query(F.data.startswith('reaction_'))
async def reaction_post2(callback: types.CallbackQuery, state: FSMContext):
    reaction_type = callback.data.split('_')[1]
    await state.update_data(reaction_type=reaction_type)
    
    if reaction_type == 'specific':
        await callback.message.edit_text(
            'üé≠ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é (—ç–º–æ–¥–∑–∏), –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å:',
            reply_markup=pr_menu_canc()
        )
        await state.set_state(ReactionPromotionStates.reaction_task_create2)
    else:
        await callback.message.edit_text(
            'üé≠ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è (–æ—Ç 1 –¥–æ 1000):',
            reply_markup=pr_menu_canc()
        )
        await state.set_state(ReactionPromotionStates.reaction_task_create3)

@tasks.message(ReactionPromotionStates.reaction_task_create2)
async def reaction_post3(message: types.Message, state: FSMContext):
    if len(message.text.strip()) > 2 or message.text.strip() not in emoji.EMOJI_DATA:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏')
        return
    
    await state.update_data(specific_reaction=message.text.strip())
    await message.answer(
        'üé≠ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è (–æ—Ç 1 –¥–æ 1000):',
        reply_markup=pr_menu_canc()
    )
    await state.set_state(ReactionPromotionStates.reaction_task_create3)

@tasks.message(ReactionPromotionStates.reaction_task_create3)
async def reaction_post4(message: types.Message, state: FSMContext, bot: Bot):
    try:
        executions = int(message.text.strip())
        if not 1 <= executions <= 1000:
            await message.answer('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000')
            return
        
        user_id = message.from_user.id
        user = await DB.select_user(user_id)
        balance = user['balance'] if user['balance'] is not None else 0
        
        total_cost = executions * all_price['reaction']
        if balance < total_cost:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
            await message.answer(
                f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {total_cost} MITcoin\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin',
                reply_markup=builder.as_markup()
            )
            await state.clear()
            return
        
        await state.update_data(executions=executions, balance=balance)
        await message.answer(
            'üé≠ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞, –≥–¥–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é:',
            reply_markup=pr_menu_canc()
        )
        await state.set_state(ReactionPromotionStates.reaction_task_create4)
    except ValueError:
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000')

@tasks.message(ReactionPromotionStates.reaction_task_create4)
async def reaction_post5(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    data = await state.get_data()
    reaction_type = data.get('reaction_type')
    specific_reaction = data.get('specific_reaction')
    executions = data.get('executions')
    balance = data.get('balance')
    
    if not message.forward_from_chat or message.forward_from_chat.type != 'channel':
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–º–µ–Ω–Ω–æ —Å –∫–∞–Ω–∞–ª–∞.')
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(message.forward_from_chat.id)
        channel_id = chat.id
        channel_username = chat.username
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=bot.id)
        if chat_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            raise Exception("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç—É
        try:
            await bot.forward_message(
                chat_id=user_id,
                from_chat_id=channel_id,
                message_id=message.forward_from_message_id
            )
        except Exception as e:
            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
            return
            
    except Exception as e:
        bot_username = (await bot.get_me()).username
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª", 
            url=f"http://t.me/{bot_username}?startchannel&admin=invite_users+manage_chat"
        ))
        builder.add(InlineKeyboardButton(text='üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data="retryreaction_task"))
        builder.adjust(1)
        await message.answer(
            f"‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=builder.as_markup()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    target_id = f"{channel_id}:{message.forward_from_message_id}"
    task_type = 7
    total_cost = executions * all_price['reaction']
    
    try:
        await DB.update_balance(user_id, balance - total_cost)
        
        await DB.add_task(
            user_id=user_id,
            target_id=target_id,
            amount=executions,
            task_type=task_type,
            other=specific_reaction if reaction_type == 'specific' else None,
        )
        
        await DB.add_transaction(
            user_id=user_id,
            amount=total_cost, 
            description="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ä–µ–∞–∫—Ü–∏–∏",
            additional_info=None
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
        
        # –ü–æ–ª—É—á–∞–µ–º username –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        channel_link = f"https://t.me/{channel_username}/{message.forward_from_message_id}" if channel_username else f"ID –∫–∞–Ω–∞–ª–∞: {channel_id}"
        
        await message.answer(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"üìå –ü–æ—Å—Ç: {channel_link}\n"
            f"üéØ –†–µ–∞–∫—Ü–∏—è: {specific_reaction if specific_reaction else '–õ—é–±–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è'}\n"
            f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {executions}\n"
            f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {total_cost} MITcoin",
            reply_markup=builder.as_markup()
        )
        
        await bot.send_message(
            TASKS_CHAT_ID,
            f"üîî –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏–∏\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
            f"üìå –ü–æ—Å—Ç: {channel_link}\n"
            f"üéØ –†–µ–∞–∫—Ü–∏—è: {specific_reaction if specific_reaction else '–õ—é–±–∞—è'}\n"
            f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {executions}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} MITcoin"
        )
        # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        await RedisTasksManager.refresh_task_cache(bot, "reaction")
        await RedisTasksManager.update_common_tasks_count(bot)

    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    
    await state.clear()












@tasks.callback_query(F.data == 'work_reaction')
async def works_reaction_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫—ç—à–∞
        cached_tasks = await RedisTasksManager.get_cached_tasks('reaction') or []
        
        # 2. –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        available_tasks = []
        for task in cached_tasks:
            try:
                task_id = task.get('id') or task.get('task_id')
                if not task_id:
                    continue

                if await DB.is_task_available_for_user(user_id, task['id']):
                    if task.get('is_active', True):
                        available_tasks.append(task)
            except Exception:
                continue

        if not available_tasks:
            await callback.message.edit_text(
                "üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ä–µ–∞–∫—Ü–∏–∏!",
                reply_markup=back_work_menu_kb(user_id))
            return

        # 3. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        task = random.choice(available_tasks)
        task_id = task.get('id') or task.get('task_id')
        target_id = str(task.get('target_id', ''))
        reaction_type = task.get('other', '–õ—é–±–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è')
        amount = abs(task.get('amount', 0))

        # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º target_id (–∫–∞–Ω–∞–ª:–ø–æ—Å—Ç)
        if ':' in target_id:
            channel_part, post_id = target_id.split(':')
        else:
            channel_part = target_id
            post_id = None

        # 5. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç –ø–æ ID (–µ—Å–ª–∏ channel_part —á–∏—Å–ª–æ)
            try:
                chat_id = int(channel_part)
                chat = await bot.get_chat(chat_id)
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ - –ø—Ä–æ–±—É–µ–º –∫–∞–∫ username
                username = channel_part.lstrip('@')
                chat = await bot.get_chat(f"@{username}")
            
            channel_name = chat.title
            channel_username = chat.username
            chat_id = chat.id
        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_part}: {e}")
            await callback.answer("‚ö† –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return

        # 6. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
        if channel_username:
            if post_id:
                post_link = f"https://t.me/{channel_username}/{post_id}"
            else:
                post_link = f"https://t.me/{channel_username}"
        else:
            if post_id:
                post_link = f"tg://openmessage?chat_id={chat_id}&message_id={post_id}"
            else:
                post_link = f"tg://resolve?domain={chat_id}"

        # 7. –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–¥–∞–Ω–∏—è
        builder = InlineKeyboardBuilder()
        
        if post_link:
            builder.row(InlineKeyboardButton(
                text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é", 
                url=post_link
            ))
        
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                callback_data=f"checkreaction_{task_id}"
            ),
            InlineKeyboardButton(
                text="‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–¥–∞–Ω–∏–µ–º", 
                callback_data=f"report_reaction_{task_id}"
            )
        )
        builder.row(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥", 
            callback_data="work_menu"
        ))

        # 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        await callback.message.answer_sticker(
            'CAACAgIAAxkBAAENFeZnLS0EwvRiToR0f5njwCdjbSmWWwACTgEAAhZCawpt1RThO2pwgjYE'
        )
        
        message_text = [
            "üé≠ <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é</b>\n\n",
            f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> <a href='{post_link}'>{channel_name}</a>",
            f"üí∏ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> <code>{all_price['reaction']}</code> $MICO",
            f"üëç <b>–†–µ–∞–∫—Ü–∏—è:</b> {reaction_type if reaction_type else '–õ—é–±–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è'}\n\n",
            "<em>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ, –æ—Å—Ç–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–¥–∞–Ω–∏–µ–º'</em>"
        ]
        
        await callback.message.answer(
            "\n".join(message_text),
            reply_markup=builder.as_markup(),
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–µ–∞–∫—Ü–∏–π: {e}")
        await callback.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.message.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=back_work_menu_kb(user_id))
        

@tasks.callback_query(F.data.startswith('checkreaction_'))
async def check_reaction_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    
    try:
        task_id = int(callback.data.split('_')[-1])
        task = await DB.get_task_by_id(task_id)
        
        if not task or len(task) < 7:
            raise ValueError("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
            
        target_id = task[2]
        specific_reaction = task[6]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º target_id
        if ':' in target_id:
            channel_part, post_id = target_id.split(':')
            post_id = int(post_id)
        else:
            channel_part = target_id
            post_id = None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç –∫–∞–∫ ID (–µ—Å–ª–∏ channel_part —á–∏—Å–ª–æ)
            try:
                chat_id = int(channel_part)
                chat = await bot.get_chat(chat_id)
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ - –ø—Ä–æ–±—É–µ–º –∫–∞–∫ username
                username = channel_part.lstrip('@')
                chat = await bot.get_chat(f"@{username}")
            
            channel_id = chat.id
            channel_username = chat.username
            channel_title = chat.title
        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_part}: {e}")
            await callback.answer("‚ö† –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        if channel_username:
            if post_id:
                post_link = f"https://t.me/{channel_username}/{post_id}"
            else:
                post_link = f"https://t.me/{channel_username}"
        else:
            if post_id:
                post_link = f"tg://openmessage?chat_id={channel_id}&message_id={post_id}"
            else:
                post_link = f"tg://resolve?domain={channel_id}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        builder = InlineKeyboardBuilder()
        
        if post_link:
            builder.row(InlineKeyboardButton(
                text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é", 
                url=post_link
            ))
        
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                callback_data=f"checkreaction_{task_id}"
            ),
            InlineKeyboardButton(
                text="‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–¥–∞–Ω–∏–µ–º", 
                callback_data=f"report_reaction_{task_id}"
            )
        )
        builder.row(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥", 
            callback_data="work_reaction"  # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∑–∞–¥–∞–Ω–∏—è
        ))

        message_text = (
            f"üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç</b> —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º (—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç).\n\n"
            f"<i>–°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–ª–∂–µ–Ω —á–µ—Ç–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –Ω—É–∂–Ω—ã–π –ø–æ—Å—Ç</i>"
        )

        await callback.message.answer(message_text, reply_markup=builder.as_markup())
        await state.set_state(ReactionProof.waiting_for_screenshot)
        await state.update_data(
            task_id=task_id,
            channel_id=channel_id,
            post_id=post_id,
            specific_reaction=specific_reaction,
            channel_username=channel_username,
            channel_title=channel_title,
            post_link=post_link
        )
        await callback.answer()
        
    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ –≤ check_reaction_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@tasks.message(ReactionProof.waiting_for_screenshot)
async def handle_screenshot(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    data = await state.get_data()
    task_id = data.get('task_id')
    channel_id = data.get('channel_id')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º channel_id –≤–º–µ—Å—Ç–æ target_id
    post_id = data.get('post_id')
    specific_reaction = data.get('specific_reaction')
    channel_username = data.get('channel_username')
    
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return
    
    screenshot_id = message.photo[-1].file_id
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º target_id –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    target_id = f"{channel_id}:{post_id}" if post_id else str(channel_id)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await DB.add_pending_reaction_task(
            user_id=user_id,
            task_id=task_id,
            target_id=target_id,  # –¢–µ–ø–µ—Ä—å target_id –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω
            post_id=post_id,
            reaction=specific_reaction,
            screenshot=screenshot_id
        ) 
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        kb = InlineKeyboardBuilder()
        kb.button(text='‚è≠ –î–∞–ª–µ–µ', callback_data='work_reaction')
        kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='work_menu')
        await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=kb.as_markup())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å post_id)
        if post_id:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_reaction_{task_id}_{user_id}"))
            builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_reaction_{task_id}_{user_id}"))
            builder.add(InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=f"https://t.me/{channel_username}/{post_id}"))
            builder.adjust(1)
            
            sent_message = await bot.send_photo(
                CHECK_CHAT_ID,
                photo=screenshot_id,
                caption=f"#—Ä–µ–∞–∫—Ü–∏—è\n" 
                        f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {user_id})\n"
                        f"üìå –ü–æ—Å—Ç: https://t.me/{channel_username}/{post_id}\n"
                        f"üéØ –†–µ–∞–∫—Ü–∏—è: {specific_reaction if specific_reaction else '–õ—é–±–∞—è'}\n"
                        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:",
                reply_markup=builder.as_markup()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ state
            await state.update_data(admin_message_id=sent_message.message_id)
        
        await state.clear()
        
    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@tasks.callback_query(F.data.startswith('confirm_reaction_'))
async def confirm_reaction_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split('_')
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    task_id = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî task_id
    user_id = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî user_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if not pending_task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    pending_id, user_id, task_id, target_id, post_id, reaction, screenshot, status = pending_task
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º target_id –Ω–∞ ID –∫–∞–Ω–∞–ª–∞ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
        channel_id, post_id = target_id.split(':')
        channel_id = int(channel_id)
        post_id = int(post_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(channel_id)
        channel_username = chat.username if chat.username else f"c/{chat.id}"
    except Exception as e:
        channel_username = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É completed_tasks
    await DB.add_completed_task(
        user_id=user_id,
        task_id=task_id,
        target_id=target_id,
        task_sum=all_price['reaction'],
        owner_id=user_id,
        status=0,
        other=0
    )

    await update_dayly_and_weekly_tasks_statics(user_id)
    await DB.increment_statistics(1, 'likes')
    await DB.increment_statistics(2, 'likes')
    await DB.increment_statistics(1, 'all_taasks')
    await DB.increment_statistics(2, 'all_taasks')
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    await DB.delete_pending_reaction_task(task_id, user_id)
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await DB.add_balance(amount=all_price['reaction'], user_id=user_id)

    task = await DB.get_task_by_id(task_id)
    if task:
        new_amount = task[3] - 1  # task[3] ‚Äî —ç—Ç–æ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        await DB.update_task_amount2(task_id, new_amount)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        f"üéâ <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
        f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {all_price['reaction']} MITcoin\n"
        f"üìå –ü–æ—Å—Ç: https://t.me/{channel_username}/{post_id}\n"
        f"üéØ –†–µ–∞–∫—Ü–∏—è: {reaction if reaction else '–õ—é–±–∞—è'}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )
    
    # # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω–∏—è
    # creator_id = user_id
    # await bot.send_message(
    #     creator_id,
    #     f"üéâ <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
    #     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n"
    #     f"üìå –ü–æ—Å—Ç: https://t.me/{channel_username}/{post_id}\n"
    #     f"üéØ –†–µ–∞–∫—Ü–∏—è: {reaction if reaction else '–õ—é–±–∞—è'}\n"
    #     f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    # )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    data = await state.get_data()
    admin_message_id = data.get('admin_message_id')
    if admin_message_id:
        await bot.delete_message(CHECK_CHAT_ID, admin_message_id)
    
    await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    await RedisTasksManager.refresh_task_cache(bot, "reaction")


@tasks.callback_query(F.data.startswith('reject_reaction_'))
async def reject_reaction_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split('_')
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    task_id = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî task_id
    user_id = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî user_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if not pending_task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    pending_id, user_id, task_id, target_id, post_id, reaction, screenshot, status = pending_task
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º target_id –Ω–∞ ID –∫–∞–Ω–∞–ª–∞ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
        channel_id, post_id = target_id.split(':')
        channel_id = int(channel_id)
        post_id = int(post_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(channel_id)
        channel_username = chat.username if chat.username else f"c/{chat.id}"
    except Exception as e:
        channel_username = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await DB.add_failed_task(user_id, task_id)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    await DB.delete_pending_reaction_task(task_id, user_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        f"‚ùå <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</b>\n\n"
        f"üìå –ü–æ—Å—Ç: https://t.me/{channel_username}/{post_id}\n"
        f"üéØ –†–µ–∞–∫—Ü–∏—è: {reaction if reaction else '–õ—é–±–∞—è'}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    data = await state.get_data()
    admin_message_id = data.get('admin_message_id')
    if admin_message_id:
        await bot.delete_message(CHECK_CHAT_ID, admin_message_id)
    
    await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")


















