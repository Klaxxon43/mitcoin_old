from .tasks import *

@tasks.callback_query(F.data == 'boost_pr_button')
async def boost_post_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    if balance >= all_price['boost']:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="boost_1_day"))
        builder.add(InlineKeyboardButton(text="1 –Ω–µ–¥–µ–ª—è", callback_data="boost_7_days"))
        builder.add(InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data="boost_30_days"))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
        builder.adjust(3, 1)
        await callback.message.edit_text(f'''
üì¢ –ë—É—Å—Ç –∫–∞–Ω–∞–ª–∞

üíµ {all_price['boost']} MITcoin

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –±—É—Å—Ç–∞:
        ''', reply_markup=builder.as_markup())
    else:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="cancel_all"))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
        await callback.message.edit_text(
            f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b> –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin\n<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å...</em>',
            reply_markup=builder.as_markup())

@tasks.callback_query(F.data.startswith('boost_'))
async def boost_post2(callback: types.CallbackQuery, state: FSMContext):
    days = int(callback.data.split('_')[1])
    await state.update_data(days=days)
    await callback.message.edit_text('''
üì¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—É—Å—Ç):
    ''', reply_markup=pr_menu_canc())
    await state.set_state(BoostPromotionStates.boost_task_create2)

@tasks.message(BoostPromotionStates.boost_task_create2)
async def boost_post3(message: types.Message, state: FSMContext, bot: Bot):
    try:
        executions = int(message.text.strip())
        if executions < 1:
            await message.answer('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            return
        
        user_id = message.from_user.id
        user = await DB.select_user(user_id)
        balance = user.get('balance', 0)
        
        total_cost = executions * all_price['boost']
        
        if balance < total_cost:
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_menu")
            )
            await message.answer(
                f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n\n'
                f'–¢—Ä–µ–±—É–µ—Ç—Å—è: {total_cost} MITcoin\n'
                f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin',
                reply_markup=builder.as_markup()
            )
            return
        
        await state.update_data(
            executions=executions,
            total_cost=total_cost,
            current_balance=balance
        )
        
        kb = types.ReplyKeyboardMarkup(
            keyboard=[[
                types.KeyboardButton(
                    text="üì¢ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª",
                    request_chat=types.KeyboardButtonRequestChat(
                        request_id=1,
                        chat_is_channel=True,
                        user_administrator_rights=types.ChatAdministratorRights(
                                                            is_anonymous=False,
                                                            can_manage_chat=False,
                                                            can_delete_messages=False,
                                                            can_manage_video_chats=False,
                                                            can_restrict_members=False,
                                                            can_promote_members=False,
                                                            can_change_info=False,
                                                            can_invite_users=True,
                                                            can_post_stories=False,
                                                            can_edit_stories=False,
                                                            can_delete_stories=False,
                                                            can_post_messages=True,
                                                            can_edit_messages=False,
                                                            can_pin_messages=False
                                                        ),
                        bot_administrator_rights=types.ChatAdministratorRights(
                                                        is_anonymous=False,
                                                        can_manage_chat=False,
                                                        can_delete_messages=False,
                                                        can_manage_video_chats=False,
                                                        can_restrict_members=False,
                                                        can_promote_members=False,
                                                        can_change_info=False,
                                                        can_invite_users=True,
                                                        can_post_stories=False,
                                                        can_edit_stories=False,
                                                        can_delete_stories=False,
                                                        can_post_messages=True,
                                                        can_edit_messages=False,
                                                        can_pin_messages=False
                                                    )
                    )
                )
            ]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            'üì¢ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –±—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç—ã.\n\n'
            '–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.',
            reply_markup=kb
        )
        await state.set_state(BoostPromotionStates.boost_task_create3)
        
    except ValueError:
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.')

@tasks.message(BoostPromotionStates.boost_task_create3)
async def boost_post4(message: types.Message, state: FSMContext, bot: Bot):
    if not message.chat_shared:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    chat_id = message.chat_shared.chat_id
    user_id = message.from_user.id
    data = await state.get_data()
    executions = data.get('executions')
    total_cost = data.get('total_cost')

    try:
        chat = await bot.get_chat(chat_id)
        bot_info = await bot.get_me()
        member = await bot.get_chat_member(chat_id, bot_info.id)

        if member.status != "administrator" or not member.can_post_messages:
            await state.update_data(pending_channel_id=chat_id)
            invite_link = f"https://t.me/{bot_info.username}?startchannel&admin=post_messages+invite_users"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω—ã", url=invite_link)],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_boost_admin_rights")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_menu")]
            ])
            await message.answer(
                f"üòï –ë–æ—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ <b>{chat.title}</b>, –Ω–æ –µ–º—É –Ω–µ –≤—ã–¥–∞–Ω—ã –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞.",
                reply_markup=keyboard
            )
            return

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞:", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await DB.add_balance(user_id, -total_cost)
    await DB.add_transaction(
        user_id=user_id,
        amount=total_cost,
        description="—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –±—É—Å—Ç",
        additional_info=None
    )
    
    task_id = await DB.add_task(
        user_id=user_id,
        target_id=chat_id,
        amount=executions,
        task_type=6,  # –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è "–±—É—Å—Ç"
        other=data['days']
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∞
    task_data = {
        'id': task_id,
        'user_id': user_id,
        'target_id': chat_id,
        'amount': executions,
        'type': 6,
        'status': 1,
        'days': data['days'],
        'title': chat.title,
        'username': getattr(chat, 'username', None),
        'is_active': True
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    await RedisTasksManager.add_new_task_to_cache('boost', task_data)
    await RedisTasksManager.update_common_tasks_count(bot)

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –±—É—Å—Ç –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ <b>{chat.title}</b> —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")]]
        )
    )

    await bot.send_message(
        TASKS_CHAT_ID,
        f"üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï\n–¢–∏–ø: ‚≠êÔ∏è –ë—É—Å—Ç –ø–æ—Å—Ç–æ–≤\n–ö–∞–Ω–∞–ª: {chat.title}\n–¶–µ–Ω–∞: {all_price['boost']}\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {executions}"
    )

    await state.clear()

@tasks.callback_query(F.data == "check_boost_admin_rights")
async def check_boost_admin_rights(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    data = await state.get_data()
    user_id = callback.from_user.id
    chat_id = data.get("pending_channel_id")
    executions = data.get('executions')
    total_cost = data.get('total_cost')

    try:
        chat = await bot.get_chat(chat_id)
        bot_info = await bot.get_me()
        member = await bot.get_chat_member(chat_id, bot_info.id)

        if member.status != "administrator" or not member.can_post_messages:
            await callback.message.edit_text(
                f"‚õî –ë–æ—Ç—É –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –≤—ã–¥–∞–Ω—ã –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ <b>{chat.title}</b>.\n\n"
                f"üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω <b>–∞–¥–º–∏–Ω</b> –∏ –º–æ–∂–µ—Ç <b>–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è</b>.",
                reply_markup=callback.message.reply_markup
            )
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        await DB.add_balance(user_id, -total_cost)
        await DB.add_transaction(
            user_id=user_id,
            amount=total_cost,
            description="—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –±—É—Å—Ç –ø–æ—Å—Ç–æ–≤",
            additional_info=None
        )
        await DB.add_task(
            user_id=user_id,
            target_id=chat_id,
            amount=executions,
            task_type=6,
            other=data['days']
        )

        await callback.message.edit_text(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –±—É—Å—Ç –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ <b>{chat.title}</b> —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {executions}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")]
            ])
        )

        await bot.send_message(TASKS_CHAT_ID, f'''
üîî –°–û–ó–î–ê–ù–û –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï üîî
‚≠ïÔ∏è –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: ‚≠êÔ∏è –ë—É—Å—Ç –ø–æ—Å—Ç–æ–≤
üì¢ –ö–∞–Ω–∞–ª: {chat.title}
üí∏ –¶–µ–Ω–∞: {all_price['boost']}
üë• –ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {executions}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}
''')

        await state.clear()

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ check_boost_admin_rights:", e)
        await callback.message.edit_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@tasks.callback_query(F.data == "retry_boost_task")
async def retry_boost_task(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª </b>")
    await state.set_state(BoostPromotionStates.boost_task_create3)
    await callback.answer()









@tasks.callback_query(F.data == 'work_boost')
async def works_boost_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    
    if not callback.from_user.is_premium and user_id not in ADMINS_ID:
        kb = InlineKeyboardBuilder()
        kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='work_menu')
        await callback.message.edit_text('–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è <b>TG Premium</b>', reply_markup=kb.as_markup())
        return 

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫—ç—à–∞
    cached_tasks = await RedisTasksManager.get_cached_tasks('boost')
    
    if not cached_tasks:
        # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î –∏ –∫—ç—à–∏—Ä—É–µ–º
        if await RedisTasksManager.refresh_task_cache(bot):
            cached_tasks = await RedisTasksManager.get_cached_tasks('boost')
        else:
            cached_tasks = []

    if not cached_tasks:
        await callback.message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –±—É—Å—Ç –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
            reply_markup=back_work_menu_kb(user_id)
        )
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª
    available_tasks = [
        task for task in cached_tasks
        if not await DB.is_task_completed(user_id, task['id'])
        and not await DB.is_task_failed(user_id, task['id'])
        and not await DB.is_task_pending(user_id, task['id'])
    ]
    
    if not available_tasks:
        await callback.message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –±—É—Å—Ç –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
            reply_markup=back_work_menu_kb(user_id)
        )
        return
    
    random_task = random.choice(available_tasks)
    task_id, target_id, days = random_task['id'], random_task['target_id'], random_task['days']
    
    try:
        await callback.message.answer_sticker(
            'CAACAgIAAxkBAAENFeZnLS0EwvRiToR0f5njwCdjbSmWWwACTgEAAhZCawpt1RThO2pwgjYE'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏–∑ –∫—ç—à–∞
        channel_name = random_task.get('title', target_id)
        channel_username = random_task.get('username', None)
        
        builder = InlineKeyboardBuilder()
        if channel_username:
            builder.add(InlineKeyboardButton(text="üöÄ –ó–∞–±—É—Å—Ç–∏—Ç—å", url=f'https://t.me/boost/{channel_username}'))
        else:
            builder.add(InlineKeyboardButton(text="üöÄ –ó–∞–±—É—Å—Ç–∏—Ç—å", callback_data="no_username"))
            
        builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"checkboost_{task_id}"))
        builder.add(InlineKeyboardButton(text="‚úã–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data=f"2checkboost_{task_id}"))
        builder.add(InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_task_{task_id}"))
        builder.add(InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"report_boost_{task_id}"))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))
        builder.adjust(1, 2, 2, 1)
        
        await callback.message.answer(
            f"üì¢ –ë—É—Å—Ç –∫–∞–Ω–∞–ª–∞: {channel_name}\nüí∏ –¶–µ–Ω–∞: {all_price['boost']} $MICO\n–°—Ä–æ–∫: {days} –¥–µ–Ω—å\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b>, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_work_menu_kb(user_id))

@tasks.callback_query(F.data.startswith('checkboost_'))
async def check_boost_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    task_id = int(callback.data.split('_')[-1])
    task = await DB.get_task_by_id(task_id)
    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    target_id = task[2]
    chat = await get_chat_info(bot, target_id)
    if not chat:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ")
        return
    
    target_chat_id = chat.id
    boost_detected = await Boost.has_user_boosted_without_reward(user_id, target_chat_id)

    if boost_detected:
        await Boost.mark_boost_reward_given(user_id, target_chat_id)
        
        # –ü–µ—Ä–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ (—Å—Ä–∞–∑—É)
        first_payment = all_price['boost']
        await DB.add_balance(amount=first_payment, user_id=user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏
        await DB.add_completed_task(
            user_id=user_id,
            task_id=task_id,
            target_id=target_id,
            task_sum=first_payment,
            owner_id=task[1],
            status=1,
            other=task[6]
        )
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        new_amount = task[3] - 1
        await DB.update_task_amount(task_id, new_amount)
        
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –¥–Ω–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
        if task[6] > 1:
            await DB.add_bg_task(
                task_type='boost_check',
                task_data={
                    'task_id': task_id,
                    'user_id': user_id,
                    'chat_id': target_chat_id,
                    'days_checked': 1,  # –£–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
                    'total_days': task[6]
                },
                delay_seconds=86400*2  # –†–æ–≤–Ω–æ 24 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            )
        
        await callback.message.answer(
            f"üëç <b>–ë—É—Å—Ç –∑–∞—Å—á–∏—Ç–∞–Ω! +{first_payment} MITcoin</b>\n\n"
            f"–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å –±—É—Å—Ç–∞ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤, –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è –±—É—Å—Ç–∞, –¥–∞–ª–µ–µ —Å–ø—É—Å—Ç—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞" + 
            (f"\n–í—Å–µ–≥–æ –¥–Ω–µ–π –±—É—Å—Ç–∞: {task[6]}" if task[6] > 1 else ""),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è≠Ô∏è", callback_data="work_boost")]
            ])
        )
        RedisTasksManager.refresh_task_cache(bot)
        if new_amount <= 0:
            creator_id = task[1]
            await DB.delete_task(task_id)
            await bot.send_message(
                creator_id,
                f"üéâ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –±—É—Å—Ç –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
                reply_markup=back_menu_kb(user_id)
            )
    else:
        await callback.answer(
            "‚ùå –ë—É—Å—Ç –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –∑–∞—Å—á–∏—Ç–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", 
            show_alert=True
        )

@tasks.callback_query(F.data.startswith('2checkboost_'))
async def _(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    task_id = int(callback.data.split('_')[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    task = await DB.get_task_by_id(task_id)
    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    target_id = task[2]
    await callback.message.answer(
        'üòû –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±—É—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?\n'
        '‚úåÔ∏è –ù–∞–º –∂–∞–ª—å, —á—Ç–æ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π, –∞ –ø–æ–∫–∞ –º—ã —Ä–µ—à–∞–µ–º –µ—ë, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n'
        '‚ùóÔ∏è –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –ú—ã –∑–∞–º–µ—Ç–∏–º —ç—Ç–æ –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∏—Å–ª–∏–º –≤–∞–º –Ω–∞–≥—Ä–∞–¥—É!'
    )
    await state.set_state(BoostProof.waiting_for_screenshot)
    await state.update_data(task_id=task_id, target_id=target_id)


@tasks.message(BoostProof.waiting_for_screenshot)
async def handle_boost_screenshot(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    data = await state.get_data()
    task_id = data.get('task_id')
    target_id = data.get('target_id')

    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return

    screenshot_id = message.photo[-1].file_id  # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await DB.add_pending_reaction_task( 
        user_id=user_id,
        task_id=task_id,
        target_id=target_id,
        post_id =0,
        reaction= 0,
        screenshot=screenshot_id
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    kb = InlineKeyboardBuilder()
    kb.button(text='‚è≠ –î–∞–ª–µ–µ', callback_data='work_boost')
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='work_menu')
    await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=kb.as_markup())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_boost_{task_id}_{user_id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_boost_{task_id}_{user_id}"))
    builder.add(InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=f"https://t.me/{str(target_id).replace('@', '')}"))
    builder.adjust(1)

    sent_message = await bot.send_photo(
        CHECK_CHAT_ID,
        photo=screenshot_id,
        caption=(
            f"#–±—É—Å—Ç\n"
            f"üì¢ <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –±—É—Å—Ç –∫–∞–Ω–∞–ª–∞</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {user_id})\n"
            f"üìå –ö–∞–Ω–∞–ª: {target_id}\n"
            f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
        ),
        reply_markup=builder.as_markup()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ state
    await state.update_data(admin_message_id=sent_message.message_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    asyncio.create_task(auto_confirm_boost_task(task_id, user_id, bot, message.from_user.username, state))

    await state.clear()

async def auto_confirm_boost_task(task_id, user_id, bot, username, state):
    await asyncio.sleep(24 * 3600)  # –ñ–¥–µ–º 24 —á–∞—Å–∞
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if pending_task:
        await confirm_boost_handler(task_id, user_id, bot, username, state)

@tasks.callback_query(F.data.startswith('confirm_boost_'))
async def confirm_boost_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split('_')
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
        return

    task_id = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî task_id
    user_id = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî user_id

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if not pending_task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    pending_id, user_id, task_id, target_id, _, _, screenshot, status = pending_task

    try:
        target_chat = await bot.get_chat(f"@{target_id}")
    except:
        target_chat = await bot.get_chat(target_id)
    target_chat_id = target_chat.id

    # –ü–æ–º–µ—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—É—é
    await Boost.mark_boost_reward_given(user_id, target_chat_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É completed_tasks
    await DB.add_completed_task(
        user_id=user_id,
        task_id=task_id,
        target_id=target_id,
        task_sum=all_price['boost'],
        owner_id=user_id,
        status=1,
        other=0
    )

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    await DB.delete_pending_reaction_task(task_id, user_id)

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await DB.add_balance(amount=all_price['boost'], user_id=user_id)

    task = await DB.get_task_by_id(task_id)
    if task:
        new_amount = task[3] - 1  # task[3] ‚Äî —ç—Ç–æ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        await DB.update_task_amount2(task_id, new_amount)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        f"üéâ <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –±—É—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
        f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {all_price['boost']} MITcoin\n"
        f"üìå –ö–∞–Ω–∞–ª: {target_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )

    await update_dayly_and_weekly_tasks_statics(user_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω–∏—è
    creator_id = user_id
    await bot.send_message(
        creator_id,
        f"üéâ <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –±—É—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n" 
        f"üìå –ö–∞–Ω–∞–ª: {target_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    data = await state.get_data()
    admin_message_id = data.get('admin_message_id')
    if admin_message_id:
        await bot.delete_message(CHECK_CHAT_ID, admin_message_id)

    await DB.increment_statistics(1, 'boosts')
    await DB.increment_statistics(2, 'boosts')
    await DB.increment_statistics(1, 'all_taasks')
    await DB.increment_statistics(2, 'all_taasks')

    await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
    RedisTasksManager.refresh_task_cache(bot)

@tasks.callback_query(F.data.startswith('reject_boost_'))
async def reject_boost_handler(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split('_')
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö.")
        return

    task_id = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî task_id
    user_id = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî user_id

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    pending_task = await DB.get_pending_reaction_task(task_id, user_id)
    if not pending_task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    pending_id, user_id, task_id, target_id, _, _, screenshot, status = pending_task

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await DB.add_failed_task(user_id, task_id)

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞–Ω–∏—è
    await DB.delete_pending_reaction_task(task_id, user_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        f"‚ùå <b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –±—É—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</b>\n\n"
        f"üìå –ö–∞–Ω–∞–ª: @{target_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await bot.send_message(
        CHECK_CHAT_ID,
        f"‚ùå <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –±—É—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n"
        f"üìå –ö–∞–Ω–∞–ª: @{target_id}\n"
        f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    data = await state.get_data()
    admin_message_id = data.get('admin_message_id')
    if admin_message_id:
        await bot.delete_message(CHECK_CHAT_ID, admin_message_id)

    await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")



def is_user_boosting(chat_boost: ChatBoostUpdated, user_id: int, chat_id: int) -> bool:
    source = chat_boost.boost.source
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –±—É—Å—Ç–∞ - –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if isinstance(source, ChatBoostSourcePremium):
        return (
            source.user is not None
            and source.user.id == user_id
            and chat_boost.chat.id == chat_id
        )
    return False

@tasks.chat_boost()
async def on_chat_boost(chat_boost: ChatBoostUpdated, bot: Bot):
    source = chat_boost.boost.source
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É—Å—Ç—ã –æ—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if isinstance(source, ChatBoostSourcePremium):
        if source.user is None:
            return
            
        user_id = source.user.id
        chat_id = chat_boost.chat.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –±—É—Å—Ç–∞ –≤ –ë–î
        await Boost.add_user_boost(user_id=user_id, chat_id=chat_id)

@tasks.removed_chat_boost()
async def on_chat_boost_removed(removed_chat_boost: ChatBoostRemoved, bot: Bot):
    source = removed_chat_boost.source

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–Ω—è—Ç–∏–µ –±—É—Å—Ç–∞ –æ—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if isinstance(source, ChatBoostSourcePremium):
        if source.user is None:
            return

        user_id = source.user.id
        chat_id = removed_chat_boost.chat.id

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –±—É—Å—Ç–µ –≤ –ë–î
        await Boost.remove_user_boost(user_id=user_id, chat_id=chat_id)



async def get_chat_info(bot: Bot, target_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ ID –∏–ª–∏ username"""
    try:
        # –ï—Å–ª–∏ target_id - —á–∏—Å–ª–æ (ID –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ -100...)
        if isinstance(target_id, int) or (isinstance(target_id, str) and target_id.lstrip('-').isdigit()):
            chat_id = int(target_id)
            chat = await bot.get_chat(chat_id)
            return chat
            
        # –ï—Å–ª–∏ target_id - —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @ (username)
        elif isinstance(target_id, str) and target_id.startswith('@'):
            chat = await bot.get_chat(target_id)
            return chat
            
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ—è—Å–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ @)
        else:
            try:
                # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–π ID
                chat_id = int(target_id)
                chat = await bot.get_chat(chat_id)
                return chat
            except ValueError:
                # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ username (–¥–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
                username = target_id if target_id.startswith('@') else f'@{target_id}'
                chat = await bot.get_chat(username)
                return chat
                
    except Exception as e:
        print(f"Error getting chat info for {target_id}: {e}")
        return None

