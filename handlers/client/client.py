from utils.Imports import *
from utils.redis_utils import *
from handlers.client.states import *
# from handlers.Checks.menu import *

from handlers.Tasks.channel import generate_tasks_keyboard_chanel
from handlers.Tasks.tasks import *
from handlers.Tasks.post import *
from handlers.Tasks.comment import *
from handlers.Tasks.reaction import *
from handlers.Tasks.link import *
from handlers.Tasks.boost import *

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

task_cache = {}
task_cache_chat = {}
task_count_cache = {}

# –ù–∞–∑–Ω–∞—á–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
TASK_TYPES = {
    1: 'üì¢ –ö–∞–Ω–∞–ª',
    2: 'üë• –ß–∞—Ç',
    3: 'üëÄ –ü–æ—Å—Ç',
    4: 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
    5: 'üîó –ë–æ—Ç',
    6: '‚≠êÔ∏è –ë—É—Å—Ç',
    7: '‚ù§Ô∏è –†–µ–∞–∫—Ü–∏—è'
}

@router.callback_query(F.data == 'profile')
async def profile_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    if not await check_subs_op(user_id, bot):
        return
    
    if not await DB.get_break_status():
        await callback.message.answer('üõ†–ò–¥—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤üõ†\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ')
        return
    else:

        user_id = callback.from_user.id
        user = await DB.select_user(user_id)
        print(user)
        balance = user['balance']
        rub_balance = user['rub_balance']
        if balance is None:
            balance = 0
        await callback.answer()
        # if user['prem'] == True: 
        #     prem = '–ï—Å—Ç—å'
        # else:
        #     prem = '–ù–µ—Ç—É' 

        stars = await DB.get_stars(user_id)
        await callback.message.edit_text(f'''
üëÄ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>
                                         
‚≠êÔ∏è <b>TG Premium:</b> {'–ï—Å—Ç—å' if callback.from_user.is_premium == True else '–ù–µ—Ç—É'}
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ </b> <em>{user['reg_time']}</em>                                         
ü™™ <b>ID</b> - <code>{user_id}</code>

üí∞ –ë–∞–ª–∞–Ω—Å $MICO - {balance:.2f} MitCoin
üí≥ –ë–∞–ª–∞–Ω—Å —Ä—É–± - {rub_balance:.2f} ‚ÇΩ
‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å Stars - {stars}

üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {(await DB.get_task_counts(user_id))[0]}
        ''', reply_markup=profile_kb()) 


@router.callback_query(F.data == 'back_menu')
async def back_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    user_id = callback.from_user.id
    await callback.message.edit_text(
        "<b>üíé PR MIT</b> - <em>–º–æ—â–Ω—ã–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</em>\n\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=menu_kb(user_id))


@router.callback_query(F.data == 'rasslka_menu')
async def back_menu_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    await callback.message.edit_text(
        "–†–∞—Å—Å—ã–ª–∫–∞ –≤ –±–æ—Ç–µ - 1000 —Ä—É–±–ª–µ–π, –æ–±—Ä–∞—â–∞—Ç—å—Å—è - @Coin_var",
        reply_markup=back_menu_kb(user_id))


@router.callback_query(F.data == 'op_piar_menu')
async def back_menu_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    await callback.message.edit_text(
        "–†–µ–∫–ª–∞–º–∞ –≤ –û–ü - 500 —Ä—É–±–ª–µ–π –∑–∞ 1 –¥–µ–Ω—å, –æ–±—Ä–∞—â–∞—Ç—å—Å—è - @Coin_var",
        reply_markup=back_menu_kb(user_id))


@router.callback_query(F.data == 'cancel_all')
async def cancel_all(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await profile_handler(callback, bot)



@router.callback_query(F.data == 'menu_stats')
async def stats_menu_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    if not await check_subs_op(user_id, bot):
        return
    
    if not await DB.get_break_status():
        await callback.message.answer('üõ†–ò–¥—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤üõ†\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ')
        return
    else:

        user_count = len(await DB.select_all())
        # all_tasks = len(await DB.get_tasks())
        calculate_total_cost = await DB.calculate_total_cost()
        statics = await DB.get_statics() 
        id, chanels, groups, all, see, users, _, gift2, boosts, reactions, links, comments, mined, _, _, _, _, _, _, _, _ = statics[0]
        id2, chanels2, groups2, all2, see2, users, _, gift, boosts2, reactions2, links2, comments2, mined2, _, _, _, _, _, _, _, _ = statics[1] 
        balance = await DB.all_balance() 
        gifts = await DB.count_bonus_time_rows()
        today_gifts = await DB.count_today_gifts()  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        comment_stats = len(await DB.select_like_comment())
        

        cha1 = len(task_cache.get('all_tasks', [])) #chanel
        cha2 = len(task_cache_chat.get('all_tasks', []))  #chats       
        pos = len(processed_tasks)
        com= comment_stats
        rea = len(available_reaction_tasks)
        lin = len(available_tasks)
        boo = len(available_boost_tasks)

        all_tasks = cha1+cha2+pos+com+rea+lin+boo

        # prem_users = await DB.scount_premium_user() 

        all_minings = await  DB.get_mining_line()
 

        text = f""" 
        
    <b>üåê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üåê </b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}
‚õèÔ∏è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–∏–Ω–≥–æ–º: {all_minings} 

üíº –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {all_tasks}
üí∏ –í–æ–∑–º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å: {f"{calculate_total_cost:,}".replace(",", " ")} 

üóì<b>–ï–∂–µ–¥–Ω–µ–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>: 
üíº <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤:</b> {all2}
üì£ <b>–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b> {chanels2}
üë• <b>–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—ã:</b> {groups2}
üëÅÔ∏è <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> {see2}
üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b> {comments2}
üîó <b>–ü–µ—Ä–µ—Ö–æ–¥–æ–≤:</b> {links2}
üöÄ <b>–ë—É—Å—Ç–æ–≤:</b> {boosts2}
‚ù§Ô∏è <b>–†–µ–∞–∫—Ü–∏–π:</b> {reactions2}
üë§ <b>–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {users}
üéÅ <b>–ü–æ–¥–∞—Ä–∫–æ–≤ —Å–æ–±—Ä–∞–Ω–æ:</b> {gift} —Ä–∞–∑(–∞)
‚õèÔ∏è <b>–ù–∞–º–∞–π–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</b> {mined2:.2f}

üóì<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
üíº <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤:</b> {all}
üì£ <b>–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b> {chanels}
üë• <b>–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—ã:</b> {groups}
üëÅÔ∏è <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> {see} 
üí¨ <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b> {comments}
üîó <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:</b> {links} 
üöÄ <b>–ë—É—Å—Ç–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b> {boosts}
‚ù§Ô∏è <b>–†–µ–∞–∫—Ü–∏–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b> {reactions}
üí∏ <b>–ë–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {f"{balance:,.0f}".replace(",", " ")} $MICO
üéÅ <b>–°–æ–±—Ä–∞–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤:</b> {gift2} —Ä–∞–∑(–∞)
‚õèÔ∏è <b>–ù–∞–º–∞–π–Ω–µ–Ω–æ:</b> {f"{mined:.0f}".replace(',', ' ')} $MICO

    """
        build = InlineKeyboardBuilder()
        build.add(InlineKeyboardButton(text='üèÜ–†–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–∞–Ω—Å—É', callback_data='rating'))
        build.add(InlineKeyboardButton(text='üèÜ–†–µ–π—Ç–∏–Ω–≥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', callback_data='top_referrers')) 
        # build.add(InlineKeyboardButton(text='üèÜ–†–µ–π—Ç–∏–Ω–≥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞ 24 —á–∞—Å–∞', callback_data='referrers24hour')) 
        build.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu'))
        build.adjust(1)
        await callback.message.edit_text(text, reply_markup=build.as_markup())
        await callback.answer()


@router.callback_query(F.data == 'support')
async def refki_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    if not await check_subs_op(user_id, bot):
        return
    
    if not await DB.get_break_status():
        await callback.message.answer('üõ†–ò–¥—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤üõ†\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ')
        return
    
    else:
        await callback.answer()
        roadmap = "https://telegra.ph/Dorozhnaya-karta-proekta-Mit-Coin--Mit-Coin-Project-Roadmap-11-25"
        token = "https://telegra.ph/Tokenomika-monety-MitCoin-MICO-11-25"
        channel = "https://t.me/mitcoinnews"
        add_button01 = InlineKeyboardButton(text="üìã –û –Ω–∞—Å", url='https://telegra.ph/O-proekte-Mit-Coin-11-26')
        add_button0 = InlineKeyboardButton(text="üíé –ö–∞–Ω–∞–ª –±–æ—Ç–∞", url=channel)
        add_button = InlineKeyboardButton(text="üöô –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞", url=roadmap)
        add_button2 = InlineKeyboardButton(text="üí± –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞", url=token)
        add_button3 = InlineKeyboardButton(text="üõ†Ô∏è –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data='support_menu')
        add_button1 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button01], [add_button], [add_button2], [add_button0], [add_button3], [add_button1]])
        await callback.message.edit_text('''
    –¢—É—Ç –≤—ã –Ω–∞–π–¥–∏—Ç–µ –≤—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        ''', reply_markup=keyboard)

@router.callback_query(F.data == 'support_menu')
async def refki_handler(callback: types.CallbackQuery):
    support_link = "https://t.me/mitcoinmen"
    add_button3 = InlineKeyboardButton(text="üõ†Ô∏è –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url=support_link)
    add_button1 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button3], [add_button1]])
    await callback.message.edit_text('''
üõ†Ô∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥, –ø–∏—à–∏—Ç–µ /report. –ò–ª–∏ <a href='https://t.me/mitcoin_chat'>–≤ –Ω–∞—à –ß–ê–¢</a>. 
<b> ‚ùì –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /report ? </b>
–í—Å—ë –ø—Ä–æ—Å—Ç–æ! –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /report –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 
<blockquote> /report —è –Ω–∞—à—ë–ª –±–∞–≥ </blockquote>
–∏–ª–∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞
                                     
–ó–∞ –Ω–∞—Ö–æ–¥–∫—É –±–∞–≥–æ–≤ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.
–°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º - @Coin_var
        ''', reply_markup=keyboard)

@router.callback_query(F.data == 'op_help_menu')
async def refki_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    if not await check_subs_op(user_id, bot):
        return
    
    if not await DB.get_break_status():
        await callback.message.answer('üõ†–ò–¥—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤üõ†\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ')
        return
    
    else:

        await callback.answer()
        await callback.message.edit_text("""
    üë§ –û–ü (–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ü–æ–¥–ø–∏—Å–∫–∞) - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∞—Ç–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—à—É—Ç—Å—è –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã  

    <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–û–ü)</b>:

    1) –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏ –≤ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã—Ö (–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫ –ø–æ–¥–ø–∏—Å–∫–µ) –∫–∞–Ω–∞–ª–∞—Ö/—á–∞—Ç–∞—Ö üìõ
    2) –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup @–∫–∞–Ω–∞–ª 
    (‚åõ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –û–ü —Å —Ç–∞–π–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup @–∫–∞–Ω–∞–ª **h, –≥–¥–µ ** –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤)
    <i>–ø—Ä–∏–º–µ—Ä - /setup @mitcoinnews 12h</i>
    3) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –û–ü –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsetup 
    –∏–ª–∏ /unsetup @–∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ 
    4) —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –û–ü –≤ —á–∞—Ç–µ - /status
            """,reply_markup=back_menu_kb(user_id))

@router.callback_query(F.data == 'bonus_menu')
async def bonus_menu(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id
    if not await check_subs_op(user_id, bot):
        return

    if not await DB.get_break_status():
        await callback.message.answer('üõ†–ò–¥—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤üõ†\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ')
        return
    
    else:
        await callback.answer()
        user_id = callback.from_user.id
        ops = await DB.get_bonus_ops()


        unsubscribed_channels = []
        if ops:
            for op in ops:
                channel_id = op[1]
                link = op[2]
                if not await is_user_subscribed(user_id, channel_id, bot):
                    unsubscribed_channels.append(link)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        if unsubscribed_channels:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=channel) for channel in unsubscribed_channels],
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='bonus_proverka')],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')]
            ])

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            channels_list = "\n".join(
                [f"{channel}" for channel in unsubscribed_channels])

            await callback.message.edit_text(f"üéÅ <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞</b>\n<i>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞</i>\n\n{channels_list}", reply_markup=keyboard, disable_web_page_preview=True)
            return

        last_bonus_date = await DB.get_last_bonus_date(user_id)
        today = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")
        if last_bonus_date == today:
            await callback.message.edit_text("‚ùå <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n–ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞! \n\n<em>‚è∞ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö.</em>", reply_markup=back_menu_kb(user_id))
            return

        await DB.update_last_bonus_date(user_id)
        await DB.add_balance(user_id, 5000)
        await DB.increment_statistics(1, 'gifts')
        await DB.increment_statistics(2, 'gifts')
        await callback.answer('+5000 $MICO')
        await callback.message.edit_text(f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> üéâ\nüéÅ–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ‚Äî <b>5000 $MICO!</b> ‚ú®\nüí∞ –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ.\n\n>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º! ", reply_markup=back_menu_kb(user_id))
        



@router.callback_query(F.data == 'bonus_proverka')
async def bonus_menu(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    user_id = callback.from_user.id
    ops = await DB.get_bonus_ops()


    unsubscribed_channels = []
    if ops:
        for op in ops:
            channel_id = op[1]
            link = op[2]
            if not await is_user_subscribed(user_id, channel_id, bot):
                unsubscribed_channels.append(link)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
    if unsubscribed_channels:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=channel) for channel in unsubscribed_channels],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='bonus_proverka')],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')]
        ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        channels_list = "\n".join(
            [f"{channel}" for channel in unsubscribed_channels])

        await callback.message.edit_text(f"üéÅ <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞</b>\n<i>(–ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞):</i>\n\n{channels_list}", reply_markup=keyboard, disable_web_page_preview=True)
        return

    last_bonus_date = await DB.get_last_bonus_date(user_id)
    today = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")
    if last_bonus_date == today:
        await callback.message.edit_text("‚ùå <b>–ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ <i>(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö)</i>", reply_markup=back_menu_kb(user_id))
        return

    await DB.update_last_bonus_date(user_id)
    await DB.add_balance(user_id, 5000)
    await callback.answer('+5000 $MICO')
    await callback.message.edit_text(f"üéÅ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 5000 $MICO</b>\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ üòâ", reply_markup=back_menu_kb(user_id))




@router.callback_query(F.data == 'output_menu')
async def outputmenu(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí∞ RUB(–í–†–ï–ú–ï–ù–ù–û –ù–ï–î–û–°–¢–£–ü–ù–û)", callback_data="withdraw_rub"),
        InlineKeyboardButton(text="‚≠êÔ∏è Stars", callback_data="withdraw_stars"),
    ) 
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üí∏ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:",
        reply_markup=builder.as_markup()
    )



@router.callback_query(F.data == 'output_menuF')
async def outputmenu(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']

    add_button1 = InlineKeyboardButton(text=f"üí≤ USDT", callback_data=f'usdt_output_menu')
    add_button2 = InlineKeyboardButton(text=f"RUB", callback_data=f'rub_output_menu') 
    add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='profile')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2], [add_button3]])
    await callback.message.edit_text(f'''
‚ö° –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–≤–æ–¥ –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä—É–±–ª—è—Ö <i>(—Ä—É–±–ª–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)</i>

<span class="tg-spoiler"><b>–õ–∏–º–∏—Ç—ã:</b>
–í—ã–≤–æ–¥ –≤ USDT - –æ—Ç 2.5$ 
–í—ã–≤–æ–¥ –≤ —Ä—É–±–ª—è—Ö - –æ—Ç 250‚ÇΩ</span>

‚ö† –í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:</b>
    ''', reply_markup=keyboard)


@router.callback_query(F.data == 'usdt_output_menuF')
async def outputusdtmenu(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']

    data_cbr = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
    usd_data = data_cbr['Valute']['USD']
    usd = usd_data['Value']
    usd = int(usd)
    user_usdt = rub_balance/usd

    print(user_usdt)
    if user_usdt < 2.5:
        await callback.message.edit_text(f"üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>\n\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {round(user_usdt, 3)}$, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ <b>–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ 2.5$</b>", reply_markup=back_profile_kb())
        return


    add_button2 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button2]])
    await callback.message.edit_text(f'üí≥ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 2.5 –¥–æ {round(user_usdt, 3)} USDT</b>, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏', reply_markup=keyboard)
    await state.set_state(output.usdt)
    await state.update_data(usd=usd, user_usdt=user_usdt)



@router.message(output.usdt)
async def outputusdtmenu1(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        text = float(message.text)
    except ValueError:
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ</b>",reply_markup=back_menu_kb(user_id))
        return

    statedata = await state.get_data()
    usd = statedata['usd']
    user_usdt = statedata['user_usdt']

    if text < 2.5 or text > user_usdt:
        await message.answer(f'‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 2.5 –¥–æ {user_usdt} USDT</b>', reply_markup=back_menu_kb(user_id))
        return
    await state.clear()
    await state.set_state(output.usdt1)
    await state.update_data(usd=usd, user_usdt=user_usdt, amount=text)

    await message.answer(f'üëõ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–æ—à–µ–ª—ë–∫ <b>USDT (BEP20)</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤—ã–≤–æ–¥\n\n‚Äº <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∞–¥—Ä–µ—Å–µ –∫–æ—à–µ–ª—å–∫–∞/–Ω–µ–≤–µ—Ä–Ω–æ–π —Å–µ—Ç–∏ - —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ù–ï –±—É–¥–µ—Ç</b>', reply_markup=back_menu_kb(user_id))





@router.message(output.usdt1)
async def outputusdtmenu11(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    statedata = await state.get_data()
    usd = statedata['usd']
    amount = statedata['amount']

    try:
        wallet = str(message.text)

        if len(wallet) < 5 or len(wallet) > 50:
            await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞</b>", reply_markup=back_menu_kb(user_id))
            return

    except:
        await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞</b>",reply_markup=back_menu_kb(user_id))
        return


    usd = int(usd)
    sum = amount * usd
    sum = int(sum)

    await message.answer(f'ü•≥ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ {amount} USDT —Å–æ–∑–¥–∞–Ω–∞!</b>\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {sum}‚ÇΩ', reply_markup=back_menu_kb(user_id))
# –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await DB.add_transaction(
        user_id=user_id,
        amount=amount,
        description="–≤—ã–≤–æ–¥ USDT",
        additional_info= None
    )
    await DB.add_rub_balance(user_id=user_id, amount=-sum)
    await DB.add_output(user_id=user_id, amount=amount, wallet=wallet, type=1)
    await state.clear()










@router.callback_query(F.data == 'rub_output_menu')
async def outputrubmenu(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']


    if rub_balance < 250:
        await callback.message.edit_text(f"üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>\n\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {rub_balance}‚ÇΩ, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ <b>–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 250‚ÇΩ –∏–ª–∏ –±–æ–ª–µ–µ</b>", reply_markup=back_profile_kb())
        return


    add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
    await callback.message.edit_text(f'üí≥ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 250‚ÇΩ –¥–æ {rub_balance}‚ÇΩ</b>, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)', reply_markup=keyboard)
    await state.set_state(output.rub)


@router.message(output.rub)
async def outputrubmenu1(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']
    try:
        text = int(message.text)
    except ValueError:
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>", reply_markup=back_menu_kb(user_id))
        return

    if text < 250 or text > rub_balance:
        await message.answer(f'‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 250‚ÇΩ –¥–æ {rub_balance}‚ÇΩ</b>', reply_markup=back_menu_kb(user_id))
        return

    await state.clear()
    await state.set_state(output.rub1)
    await state.update_data(amount=text)

    await message.answer(f'üëõ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä <b>–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –°–ë–ü), –∞ —Ç–∞–∫ –∂–µ <b>–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>\n\n‚Äº <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –Ω–æ–º–µ—Ä–µ –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞ - —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ù–ï –±—É–¥–µ—Ç</b>', reply_markup=back_menu_kb(user_id))


@router.message(output.rub1)
async def outputrubmenu11(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    statedata = await state.get_data()
    amount = statedata['amount']
    try:
        wallet = str(message.text)
        if len(wallet) > 100 or len(wallet) < 5:
            await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", reply_markup=back_menu_kb(user_id))
            return

    except:
        await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", reply_markup=back_menu_kb(user_id))
        return

    await message.answer(f'ü•≥ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω–∞!</b>\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {amount} —Ä—É–±–ª–µ–π', reply_markup=back_menu_kb(user_id))
    await DB.add_transaction(
        user_id=user_id,
        amount=amount,
        description="–≤—ã–≤–æ–¥ RUB",
        additional_info= None
    )
    await DB.add_rub_balance(user_id=user_id, amount=-amount)
    await DB.add_output(user_id=user_id, amount=amount, wallet=wallet, type=2)
    await state.clear()










@router.callback_query(F.data == 'corvertation')  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
async def convertation_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    if not await check_subs_op(user_id, bot):
        return

    if not await DB.get_break_status():
        await callback.message.answer('üõ†–ò–¥—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤üõ†\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ')
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    last_conversion_date = await DB.get_last_conversion_date(user_id)
    print(last_conversion_date)
    today = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")

    if last_conversion_date == today:
        await callback.message.edit_text(
            "‚ùå <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ <i>(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö)</i>",
            reply_markup=back_profile_kb()
        )
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å!", callback_data='mittorub')],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')],
    ])
    await callback.message.edit_text(
        "üåÄ <b>–í—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ $MICO –≤ —Ä—É–±–ª–∏!</b>\n\n"
        "<i>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 1 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –∏ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞</i>",
        reply_markup=keyboard
    )


@router.callback_query(F.data == 'mittorub')
async def corvertation_rubtomit_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    mit_balance = user['balance']

    print(mit_balance)

    last_conversion_date = await DB.get_last_conversion_date(user_id) 
    today = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")
    if last_conversion_date == today:
        await callback.message.answer("‚ùå <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ <i>(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö)</i>", reply_markup=back_profile_kb())
        return 

    if mit_balance is None or mit_balance == 0:
        await callback.message.edit_text('üò¢ <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ $MICO –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</b>', reply_markup=back_profile_kb())

    maxprocent = mit_balance // 100

    if maxprocent < 1000:
        await callback.message.edit_text('üò¢ <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ $MICO –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</b>', reply_markup=back_profile_kb())


    add_button1 = InlineKeyboardButton(text=f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ ({maxprocent} $MICO)", callback_data=f'convert_{maxprocent}')
    add_button2 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2]])

    await callback.message.edit_text(f'''
‚ùì <b>–°–∫–æ–ª—å–∫–æ $MICO (MitCoin) –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏?</b>

<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1% –æ—Ç MitCoin –±–∞–ª–∞–Ω—Å–∞</i> - {maxprocent}
    ''', reply_markup=keyboard)

    await state.set_state(convertation.mittorub)
    await state.update_data(maxprocent=maxprocent)


@router.message(convertation.mittorub)
async def corvertation_rubtomit_input(message: types.Message, state: FSMContext):
    maxprocent = await state.get_data()
    maxprocent = maxprocent['maxprocent']
    print(f'–º–∞–∫—Å –ø—Ä–æ—Ü–µ–Ω—Ç {maxprocent}')

    try:
        convert_amount = int(message.text)
        await state.clear()
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=back_menu_kb(user_id))
        return

    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    mit_balance = user['balance']
    rub_balance = user['rub_balance']


    last_conversion_date = await DB.get_last_conversion_date(user_id)
    today = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")

    if last_conversion_date == today:
        await message.answer("‚ùå <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ <i>(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö)</i>", reply_markup=back_menu_kb(user_id))
        return

    if convert_amount > maxprocent:
        await message.answer('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ 1% –æ—Ç —Å–≤–æ–µ–≥–æ $MICO –±–∞–ª–∞–Ω—Å–∞', reply_markup=back_menu_kb(user_id))
        return

    if convert_amount < 1000:
        await message.answer('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –º–µ–Ω—å—à–µ 1000 $MICO', reply_markup=back_menu_kb(user_id))
        return


    add_rub_balance = convert_amount//1000  # 1000 $MICO = 1 —Ä—É–±–ª—å
    await DB.add_rub_balance(user_id, add_rub_balance)
    await DB.add_balance(user_id, -convert_amount)
    await DB.update_last_conversion_date(user_id)

    user = await DB.select_user(user_id)
    mit_balance = user['balance']
    rub_balance = user['rub_balance']
    await DB.add_transaction(
        user_id=user_id,
        amount=convert_amount,
        description="–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è",
        additional_info= None
    )
    await message.answer(f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ {convert_amount} $MICO –≤ {add_rub_balance}‚ÇΩ</b>\n\n"
                                     f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b>\nMitCoin - {mit_balance} $MICO;\n–†—É–±–ª–∏ - {rub_balance}‚ÇΩ", reply_markup=back_menu_kb(user_id))




@router.callback_query(lambda c: c.data.startswith("convert_"))
async def corvertation_rubtomit_input1(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    convert_amount = int(callback.data.split('_')[1])  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    user = await DB.select_user(user_id)
    mit_balance = user['balance']
    rub_balance = user['rub_balance']
    maxprocent = mit_balance // 100

    last_conversion_date = await DB.get_last_conversion_date(user_id)
    today = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")

    if last_conversion_date == today:
        await callback.message.answer("‚ùå <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ <i>(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö)</i>", reply_markup=back_menu_kb(user_id))
        return

    if convert_amount > maxprocent:
        await callback.message.edit_text('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ 1% –æ—Ç —Å–≤–æ–µ–≥–æ $MICO –±–∞–ª–∞–Ω—Å–∞', reply_markup=back_menu_kb(user_id))
        return

    if convert_amount < 1000:
        await callback.message.edit_text('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –º–µ–Ω—å—à–µ 1000 $MICO', reply_markup=back_menu_kb(user_id))
        return


    add_rub_balance = convert_amount//1000  # 1000 $MICO = 1 —Ä—É–±–ª—å
    await DB.add_rub_balance(user_id, add_rub_balance)
    await DB.add_balance(user_id, -convert_amount)
    await DB.update_last_conversion_date(user_id)

    user = await DB.select_user(user_id)
    mit_balance = user['balance']
    rub_balance = user['rub_balance']

    await callback.message.edit_text(f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ {convert_amount} $MICO –≤ {add_rub_balance}‚ÇΩ</b>\n\n"
                                     f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b>\nMitCoin - {mit_balance} $MICO;\n–†—É–±–ª–∏ - {rub_balance}‚ÇΩ", reply_markup=back_menu_kb(user_id))


    await DB.add_transaction(
        user_id=user_id,
        amount=convert_amount,
        description="–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è",
        additional_info= None
    )







CRYPTOBOT_TESTNET = False  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è cryptopay
cryptopay = None

async def init_cryptopay():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AioCryptoPay"""
    global cryptopay
    if cryptopay is None:
        cryptopay = AioCryptoPay(token=CRYPTOBOT_TOKEN, network=Networks.MAIN_NET)
    return cryptopay


@router.callback_query(F.data == 'select_deposit_menu')
async def select_deposit_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    await callback.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –í–∞–º —Å–ø–æ—Å–æ–± –¥–µ–ø–æ–∑–∏—Ç–∞:</b>\n\nüî• –ê–∫—Ü–∏—è, –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ –∑–∞ —Ä—É–±–ª–∏ +25% –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é!", reply_markup=select_deposit_menu_kb(user_id))

@router.callback_query(F.data == 'deposit_menu')
async def deposit_handler(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    buttons = [
        ("100–∫ MITcoin | 1üí≤", 100000, 1),
        ("250–∫ MITcoin | 2.5üí≤", 250000, 2.5),
        ("500–∫ MITcoin | 5üí≤", 500000, 5),
        ("1–∫–∫ MITcoin | 10üí≤", 1000000, 10),
        ("2.5–∫–∫ MITcoin | 25üí≤", 2500000, 25),
        ("5–∫–∫ MITcoin | 50üí≤", 5000000, 50),
        ("üîô –ù–∞–∑–∞–¥", None, None)  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è InlineKeyboardMarkup
    inline_buttons = []
    for text, amount, price in buttons:
        if amount is not None and price is not None and isinstance(amount, int):
            inline_buttons.append([InlineKeyboardButton(text=text, callback_data=f'deposit_{amount}_{price}')])
        else:
            inline_buttons.append([InlineKeyboardButton(text=text, callback_data='select_deposit_menu')])  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"

    builder = InlineKeyboardMarkup(inline_keyboard=inline_buttons)  # –ü–µ—Ä–µ–¥–∞—á–∞ inline_keyboard

    await callback.message.edit_text(
        "üíµ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Å –ø–æ–º–æ—â—å—é CryptoBot</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=builder)


@router.callback_query(F.data.startswith('deposit_'))
async def handle_deposit(callback: types.CallbackQuery, bot: Bot):
    data = callback.data.split('_')
    amount = int(data[1])  # –°—É–º–º–∞ MITcoin
    price = float(data[2])  # –¶–µ–Ω–∞ –≤ USDT

    try:
        invoice = await cryptopay.create_invoice(
            amount=price,
            asset='USDT',  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å—á–µ—Ç –¥–ª—è USDT
            description=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} MITcoin'
        )

        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ invoice –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.error(f"–û–±—ä–µ–∫—Ç –∏–Ω–≤–æ–π—Å–∞: {invoice}")

        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_url = invoice.bot_invoice_url

        if not payment_url:
            logger.error("URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.message.edit_text("ü§î –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...",
                                             reply_markup=back_profile_kb())
            return

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        builder = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîó –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="deposit_menu")
            ]
        ])

        await callback.message.edit_text(
            f"üßæ <b>–í–∞—à —Å—á–µ—Ç –Ω–∞ {amount} MITcoin:</b> \n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price} USDT. \n\n‚ÄºÔ∏è <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–∞ –ù–ï –í–´–•–û–î–ò–¢–ï –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏–Ω–∞—á–µ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –ù–ï –ë–£–î–ï–¢</b>\n\n‚è≥ <em>–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç</em>",
            reply_markup=builder
        )

        user_id = callback.from_user.id
        invoice_id = invoice.invoice_id
        for _ in range(30):  # 30 * 10 —Å–µ–∫—É–Ω–¥ = 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)
            invoice = await cryptopay.get_invoices(invoice_ids=invoice_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
            logger.info(f"–°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {invoice.status}")

            if invoice.status == 'paid':
                # –ï—Å–ª–∏ —Å—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω, –Ω–∞—á–∏—Å–ª—è–µ–º MITCoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await DB.add_balance_dep(user_id, amount)
                await DB.add_deposit(user_id, amount=price)
                await callback.message.edit_text(f"ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} MITcoin",
                                                 reply_markup=back_menu_kb(user_id))
                await DB.add_transaction(
                    user_id=user_id,
                    amount=amount,
                    description="–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–±",
                    additional_info= None 
                )
                return

            await asyncio.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")




@router.callback_query(F.data == 'dep_stars_menu')
async def dep_stars_handler(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Stars
    buttons = [
        ("100–∫ MITcoin | 49 ‚≠ê", 100000, 49),
        ("250–∫ MITcoin | 124 ‚≠ê", 250000, 124),
        ("500–∫ MITcoin | 249 ‚≠ê", 500000, 249),
        ("1–∫–∫ MITcoin | 499 ‚≠ê", 1000000, 499),
        ("2.5–∫–∫ MITcoin | 1249 ‚≠ê", 2500000, 1249),
        ("5–∫–∫ MITcoin | 2499 ‚≠ê", 5000000, 2499),
        ("üîô –ù–∞–∑–∞–¥", None, None)  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è InlineKeyboardMarkup
    inline_buttons = []
    for text, amount, price in buttons:
        if amount is not None and price is not None and isinstance(amount, int):
            inline_buttons.append([InlineKeyboardButton(text=text, callback_data=f'stars_{amount}_{price}')])
        else:
            inline_buttons.append([InlineKeyboardButton(text=text, callback_data='select_deposit_menu')])  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"

    builder = InlineKeyboardMarkup(inline_keyboard=inline_buttons)

    await callback.message.edit_text(
        "‚≠ê <b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Telegram Stars:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=builder
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Stars
# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã Stars
@router.callback_query(F.data.startswith('stars_'))
async def process_stars_payment(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    data = callback.data.split('_')  # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

    try:
        amount = int(data[1])  # –°—É–º–º–∞ MITcoin
        stars = int(data[2])   # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ Stars
    except (IndexError, ValueError):
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    prices = [LabeledPrice(label=f"{stars} Stars", amount=stars)]  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç
        await bot.send_invoice(
            chat_id=user_id,
            title=f"‚≠ê {amount} $MICO",
            description=f"–ö—É–ø–∏—Ç—å {amount} $MICO ($MICO) –∑–∞ {stars} Stars",
            payload=f"user_{user_id}_stars_{amount}",
            provider_token="",
            currency="XTR",
            prices=prices,
            start_parameter="stars_payment"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        print(e)
        await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã

@router.message(F.successful_payment)
async def successful_payment_handler(message: types.Message, bot: Bot):
    user_id = message.from_user.id 
    payload = message.successful_payment.invoice_payload  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º payload –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–ø–ª–∞—Ç–∞ –∑–∞ –º–∞–π–Ω–∏–Ω–≥
    if payload.startswith(f"user_{user_id}_stars_199"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–∞ –º–∞–π–Ω–∏–Ω–≥
        # await DB.activate_mining(user_id)  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∞–π–Ω–∏–Ω–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await DB.add_mining(user_id, 1)
        kb = InlineKeyboardBuilder()
        kb.button(text='üöÄ –ú–∞–π–Ω–∏–Ω–≥', callback_data='mining')
        await message.answer("üöÄ –ú–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å $MICO –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–æ—Ö–æ–¥–æ–º!", reply_markup=kb.as_markup())
        return 
    
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º payload
        parts = payload.split('_')  # ['user', '<user_id>', 'stars', '<amount>']
        user_id = int(parts[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id
        amount = int(parts[3])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º amount
    except (ValueError, IndexError) as e:
        await message.answer("‚òπ  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —á–µ–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã—à–µ")
        print(f"Error parsing payload: {payload} - {e}") 
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã
    if amount == 100000:
        stars = 49
    elif amount == 250000:
        stars = 124 
    elif amount == 500000:
        stars = 249
    elif amount == 1000000:
        stars = 499
    elif amount == 2500000:
        stars = 1249
    elif amount == 5000000:
        stars = 2499
    else:
        stars = amount / 3000

    dep_stats = stars * 0.013
    # –ó–∞—á–∏—Å–ª—è–µ–º MITcoin –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await DB.add_balance_dep(user_id, amount)
    await DB.add_deposit(user_id, amount=dep_stats)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
    await message.answer(
        f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüí≥ –°—É–º–º–∞: <b>{amount} MITcoin</b>\n"
        f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{stars} Stars</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –í—ã —Å –Ω–∞–º–∏! üòä",
        reply_markup=back_profile_kb()
    )

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await DB.add_transaction(
        user_id=user_id,
        amount=amount,
        description="–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤—ë–∑–¥—ã",
        additional_info=None
    )






@router.callback_query(F.data == 'buy_stars')
async def buystars_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.answer()
    await callback.message.edit_text("<b>–í—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ Telegram Stars –Ω–∞ $MICO –ø–æ –∫—É—Ä—Å—É:</b>\n\n1‚≠ê = 3000 $MICO\n\n<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å</b>", reply_markup=back_menu_kb(user_id))
    await state.set_state(buystars.buystars)


@router.message(buystars.buystars)
async def buystars_hand(message: types.Message, state: FSMContext, bot: Bot):
    stars_amount = message.text
    try:
        stars_amount = int(stars_amount)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É", reply_markup=back_menu_kb(user_id))
        return

    user_id = message.from_user.id
    stars = stars_amount
    amount = stars * 3000

    await state.clear()
    # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã

    prices = [LabeledPrice(label=f"{stars} Stars", amount=stars)]  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç
        await bot.send_invoice(
            chat_id=user_id,
            title=f"–ü—Ä–æ–¥–∞–∂–∞ ‚≠ê",
            description=f"–ü—Ä–æ–¥–∞—Ç—å {stars} ‚≠ê –∑–∞ {amount} MitCoin",
            payload=f"user_{user_id}_stars_{amount}",
            provider_token="",
            currency="XTR",
            prices=prices,
            start_parameter="stars_payment"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}", reply_markup=back_menu_kb(user_id))
        print(e)





@router.callback_query(F.data == 'rub_donate')
async def rub_donate_h(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üî• –ê–∫—Ü–∏—è, –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ –∑–∞ —Ä—É–±–ª–∏ +25% –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é!\n\nüí∞ –î–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ —Ä—É–±–ª—è—Ö –æ–±—Ä–∞—â–∞—Ç—å—Å—è - @Coin_var", reply_markup=back_dep_kb())


@router.callback_query(F.data == 'refka_menu')
async def refki_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    bot_username = (await bot.get_me()).username
    ref_link = f'https://t.me/{bot_username}?start={user_id}'
    user = await DB.select_user(user_id)

    if user and user.get('referrer_id'):
        referrer_id = user['referrer_id']
    else:
        referrer_id = '–Ω–µ—Ç—É'

    referred_users = await DB.get_referred_users(user_id)
    earned_from_referrals = await DB.get_earned_from_referrals(user_id)
    if earned_from_referrals is not None:
        earned_from_referrals = round(earned_from_referrals, 3)
    else:
        earned_from_referrals = 0
    stars = await DB.get_max_stars(user_id)

    text = (f'''

<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> \n<code>{ref_link}</code>\n
ID —Ç–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª: <code>{referrer_id}</code>\n

<em>500 MITcoin –∏ 1 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</em>
<em>15% –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º</em>

–ö–æ–ª-–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(referred_users)}  
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {earned_from_referrals} MIT üíé
–ó–≤—ë–∑–¥—ã: {stars} ‚≠ê
''')


    await callback.message.edit_text(text, reply_markup=back_profile_kb())
    await callback.answer()


async def get_cached_data(key):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
    data = redis_client.get(key)
    return json.loads(data) if data else None

async def set_cached_data(key, data, ttl=None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
    if ttl:
        redis_client.setex(key, timedelta(seconds=ttl), json.dumps(data))
    else:
        redis_client.set(key, json.dumps(data))


from utils.redis_utils import *

async def update_message_with_data(message, data, user_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–¥–∞–Ω–∏—è—Ö"""
    await message.edit_text(
        f'''
üí∞ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å - <b>{data['total']} $MICO</b>

<b>–ó–∞–¥–∞–Ω–∏–π –Ω–∞:</b>
üì£ –ö–∞–Ω–∞–ª—ã - {data['channel']} 
üë• –ß–∞—Ç—ã - {data['chat']}         
üëÄ –ü–æ—Å—Ç—ã - {data['post']}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - {data['comment']}
‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏ - {data['reaction']} 
üîó –ü–µ—Ä–µ—Ö–æ–¥—ã –≤ –±–æ—Ç–∞ - {data['link']}
üöÄ –ë—É—Å—Ç—ã - {data['boost']}

üö® <em>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫–∏–¥–∞—Ç—å –∫–∞–Ω–∞–ª/—á–∞—Ç —Ä–∞–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π. –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ —à—Ç—Ä–∞—Ñ!</em>

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞</b> üëá    
        ''',
        reply_markup=work_menu_kb(user_id)
    )

@router.callback_query(F.data == 'work_menu')
async def works_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    if not await check_subs_op(user_id, bot):
        return

    if not await DB.get_break_status():
        await callback.message.answer('üõ†–ò–¥—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤üõ†\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ')
        return
    
    await callback.answer()

    temp_message = await callback.message.edit_text(
        '''
üí∞ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å - <b>–∑–∞–≥—Ä—É–∑–∫–∞...</b>

<b>–ó–∞–¥–∞–Ω–∏–π –Ω–∞:</b>
üì£ –ö–∞–Ω–∞–ª—ã - –∑–∞–≥—Ä—É–∑–∫–∞... 
üë• –ß–∞—Ç—ã - –∑–∞–≥—Ä—É–∑–∫–∞...         
üëÄ –ü–æ—Å—Ç—ã - –∑–∞–≥—Ä—É–∑–∫–∞...
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - –∑–∞–≥—Ä—É–∑–∫–∞...
‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏ - –∑–∞–≥—Ä—É–∑–∫–∞... 
üîó –ü–µ—Ä–µ—Ö–æ–¥—ã –≤ –±–æ—Ç–∞ - –∑–∞–≥—Ä—É–∑–∫–∞...
üöÄ –ë—É—Å—Ç—ã - –∑–∞–≥—Ä—É–∑–∫–∞...

üö® <em>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫–∏–¥–∞—Ç—å –∫–∞–Ω–∞–ª/—á–∞—Ç —Ä–∞–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π. –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ —à—Ç—Ä–∞—Ñ!</em>

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞</b> üëá    
        ''',
        reply_markup=work_menu_kb(user_id)
    )

    task_types = ['channel', 'chat', 'post', 'comment', 'reaction', 'link', 'boost']
    counts = {key: 0 for key in task_types}

    for task_type in task_types:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –ø–æ–¥—Å—á—ë—Ç–æ–º
        await RedisTasksManager.refresh_task_cache(bot, task_type)
        cached = await RedisTasksManager.get_cached_tasks(task_type)

        valid_count = 0
        for task in cached or []:
            task_id = task['id'] if isinstance(task, dict) else task[0]
            if not (await DB.is_task_completed(user_id, task_id) or
                    await DB.is_task_failed(user_id, task_id) or
                    await DB.is_task_pending(user_id, task_id)):
                valid_count += 1

        counts[task_type] = valid_count

    counts['total'] = sum(counts.values())

    await update_message_with_data(temp_message, counts, user_id)



async def get_filtered_tasks_with_info(task_type, bot, user_id):
    tasks = await DB.select_tasks_by_type(task_type)
    filtered_tasks = []
    
    for task in tasks:
        if (await DB.is_task_completed(user_id, task[0]) or
            await DB.is_task_failed(user_id, task[0]) or
            await DB.is_task_pending(user_id, task[0])):
            continue
            
        task_info = {
            'id': task[0],
            'user_id': task[1],
            'target_id': task[2],
            'amount': task[3],
            'type': task[4],
            'other': task[6],
            'valid': True
        }
        
        try:
            if task_type in [1, 2]:
                try:
                    chat = await bot.get_chat(task[2])
                    task_info['title'] = chat.title
                    task_info['username'] = getattr(chat, 'username', None)
                    task_info['invite_link'] = getattr(chat, 'invite_link', None)
                except Exception as e:
                    task_info['valid'] = False
        except Exception as e:
            task_info['valid'] = False
        
        if task_info['valid']:
            filtered_tasks.append(task_info)
    
    return filtered_tasks








# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
# async def start_background_tasks(bot, DB):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
    # asyncio.create_task(remind_mining_collection(bot))
    # asyncio.create_task(scheduled_cache_update(bot, DB)) #channel
    # asyncio.create_task(scheduled_cache_update_chat(bot, DB)) #chat
    # asyncio.create_task(check_subscriptions_periodically(bot))
    # asyncio.create_task(check_subscriptions_periodically_boost(bot))
    # asyncio.create_task(process_tasks_periodically(bot)) #post
    # asyncio.create_task(update_reaction_tasks_periodically()) #reactions
    # asyncio.create_task(scheduled_db_backup(bot)) #–æ—Ç–ø—Ä–∞–≤–∫–∞ –±–¥ –≤ —á–∞—Ç





#–ó–ê–î–ê–ù–ò–Ø –ù–ê –ü–†–û–°–ú–û–¢–û–†. –û–¢–ë–û–†

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
processed_tasks = [] # POST
available_tasks = [] # LINKS
available_boost_tasks = [] # BOOSTS 



async def get_available_tasks(user_id, all_tasks):
    tasks = []
    for task in all_tasks:
        task_id = task[0]
        # Check if task has remaining amount and is valid
        if (task[3] > 0 and 
            not await DB.is_task_completed(user_id, task_id) and
            not await DB.is_task_skipped(user_id, task_id)):
            tasks.append(task)
    return tasks




# –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
def paginate_tasks(tasks, page=1, per_page=5):
    total_pages = (len(tasks) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    start_idx = (page - 1) * per_page
    end_idx = start_idx + per_page
    tasks_on_page = tasks[start_idx:end_idx]
    return tasks_on_page, total_pages

@router.my_chat_member()
async def on_bot_added(event: ChatMemberUpdated, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
    if event.new_chat_member.user.id == (await bot.get_me()).id:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
        if event.chat.type in ['group', 'supergroup']:
            # –ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É
            if event.new_chat_member.status in ['member', 'administrator']:
                chat_id = event.chat.id
                chat_title = event.chat.title
                inv_user_id = event.from_user.id

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                await bot.send_message(chat_id, "üëã")
                await bot.send_message(chat_id, f"{chat_id}:{inv_user_id}")
                await bot.send_message(chat_id,
                                       "üëÜ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ <b>—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º</b> –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞")
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ, –µ—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª
        elif event.chat.type == 'channel':
            return


# –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
async def paginate_tasks_chating(tasks, vchatingpage=1, per_page=5):
    total_pages = (len(tasks) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    start_idx = (vchatingpage - 1) * per_page
    end_idx = start_idx + per_page
    tasks_on_page = tasks[start_idx:end_idx]
    return tasks_on_page, total_pages








@router.message(Command('help'))
async def help_handler(message: types.Message, state: FSMContext):
    if message.chat.type in ['group', 'supergroup']:
        await message.answer('''
<b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–û–ü)</b>:

1) –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏ –≤ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö üìõ
2) –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup @–∫–∞–Ω–∞–ª 
(–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –û–ü —Å —Ç–∞–π–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup @–∫–∞–Ω–∞–ª **h, –≥–¥–µ ** –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤)
<i>–ø—Ä–∏–º–µ—Ä - /setup @mitcoinnews 12h</i>
3) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –û–ü –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsetup 
–∏–ª–∏ /unsetup @–∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ 
4) —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –û–ü –≤ —á–∞—Ç–µ - /status

–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—à—É—Ç—Å—è –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã 
        ''')


# –ö–æ–º–∞–Ω–¥–∞ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –û–ü
@router.message(Command('setup'))
async def setup_op(message: types.Message, bot: Bot):
    # ID —á–∞—Ç–∞, –≥–¥–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    chat_id = message.chat.id  

    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
    user_id = message.from_user.id  

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    if not await is_user_admin(user_id, chat_id, bot):
        await message.answer(f'–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —ç—Ç–æ–º —á–∞—Ç–µ ({chat_id})')
        return  

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.reply("üßæ –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª/—á–∞—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –û–ü. –ü—Ä–∏–º–µ—Ä: /setup @mitcoinnews")
        return

    channel_id = command_parts[1]  # ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ
        bot_member = await bot.get_chat_member(channel_id, bot.id)
        if bot_member.status != 'administrator':
            await message.reply("–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ ‚ö†Ô∏è")
            return
    except TelegramBadRequest:
        await message.reply("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üìõ")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–π–º–µ—Ä–∞
    timer_hours = None
    if len(command_parts) > 2 and command_parts[2].endswith("h"):
        timer_hours = int(command_parts[2][:-1])
        expiration_time = datetime.now() + timedelta(hours=timer_hours)
    else:
        expiration_time = None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await DB.add_op(chat_id, channel_id, expiration_time)

    if timer_hours:
        await message.reply(f"–û–ü –Ω–∞ {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {timer_hours} —á–∞—Å–æ–≤.")
    else:
        await message.reply(f"–û–ü –Ω–∞ {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è
    if expiration_time:
        asyncio.create_task(remove_op_after_delay(chat_id, channel_id, expiration_time, bot))



# –ö–æ–º–∞–Ω–¥–∞ /unsetup –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –û–ü
@router.message(Command('unsetup'))
async def unsetup_op(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if not await is_user_admin(user_id, chat_id, bot):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    command_parts = message.text.split()
    if len(command_parts) == 1:
        await DB.remove_op(chat_id)
        await message.reply("–í—Å–µ –û–ü –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã üóëÔ∏è")
    else:
        channel_id = command_parts[1]
        await DB.remove_op(chat_id, channel_id)
        await message.reply(f"–û–ü –Ω–∞ {channel_id} —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è")


# –ö–æ–º–∞–Ω–¥–∞ /status –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –û–ü
@router.message(Command('status'))
async def status_op(message: types.Message):
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –û–ü –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    ops = await DB.get_ops(chat_id)
    if not ops:
        await message.reply("üìÑ –í —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –û–ü")
        return

    status_message = "üóíÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –û–ü:\n\n"
    for op in ops:
        channel = op[0]
        expiration = op[1]

        if expiration:
            expiration = datetime.strptime(expiration, "%Y-%m-%d %H:%M:%S.%f")

            remaining_time = expiration - datetime.now()
            # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
            total_seconds = remaining_time.total_seconds()
            hours_left = int(total_seconds // 3600)
            minutes_left = int((total_seconds % 3600) // 60)

            status_message += f"{channel} - {hours_left} —á–∞—Å(–æ–≤) {minutes_left} –º–∏–Ω—É—Ç(—ã)\n"
        else:
            status_message += f"{channel}\n"

    await message.reply(status_message)


async def is_user_admin(user_id, chat_id, bot):
    member = await bot.get_chat_member(chat_id, user_id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    return member.status in ["administrator", "creator"]


async def is_user_subscribed(user_id: int, channel_id: int, bot: Bot) -> bool:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª.
    try:
        member = await bot.get_chat_member(channel_id, user_id)
        return member.status != 'left'
    except TelegramBadRequest:
        return False


async def remove_op_after_delay(chat_id: int, channel_id: str, expiration_time: datetime, bot: Bot):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –û–ü –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.
    delay = (expiration_time - datetime.now()).total_seconds()
    await asyncio.sleep(delay)
    await DB.remove_op(chat_id, channel_id)
    await bot.send_message(chat_id, f"–û–ü –Ω–∞ {channel_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º —Ç–∞–π–º–µ—Ä–∞ üóëÔ∏è")


@router.message(lambda message: message.chat.type in ['group', 'supergroup'])
async def handler_chat_message(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    chat_id = message.chat.id
    name = message.from_user.full_name
    commands_list = ['/help', '/status', '/setup', '/unsetup']
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–æ–π
    if (message.chat.type in ['group', 'supergroup']) and (message.text not in commands_list):

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        chating_tasks = await DB.get_chating_tasks()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á
        for task in chating_tasks:
            task_chat_id = task[1]
            price = task[2]
            if chat_id == task_chat_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                user_in_db = await DB.select_user(user_id)
                if user_in_db:
                    # –ù–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—É–º–º—É –Ω–∞ –±–∞–ª–∞–Ω—Å
                    await DB.add_balance(user_id, price)
                break

        member = await bot.get_chat_member(chat_id, user_id)
        if name is None:
            name = "üë§"
        if member.status in ["member"]:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –û–ü –¥–ª—è —á–∞—Ç–∞
            ops = await DB.get_ops(chat_id)
            if not ops:
                return  # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –û–ü, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –û–ü
            unsubscribed_channels = []
            op_tasks = await DB.get_op_tasks()
            if op_tasks:
                pr_op_task = random.choice(op_tasks)
                pr_op = pr_op_task[1]
                text = pr_op_task[2]

                pr_text = f"<a href='https://t.me/{pr_op[1:]}'>{text}</a>"
            else:
                pr_text = "„Ö§"

            # –¶–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            for op in ops:
                channel_id = op[0]
                if not await is_user_subscribed(user_id, channel_id, bot):
                    unsubscribed_channels.append(channel_id)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            if unsubscribed_channels:
                try:
                    await message.delete()
                except:
                    print(f"–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}")

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä—É—á–Ω—É—é, —ç–∫—Ä–∞–Ω–∏—Ä—É—è —Ç–µ–∫—Å—Ç –≤ URL-–∫–∞–Ω–∞–ª–µ
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{channel[1:]}")]
                    for channel in unsubscribed_channels
                ])

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                channels_list = "\n".join(
                    [f"@{channel[1:]}" for channel in unsubscribed_channels])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                msg = await message.answer(f"""
<a href='tg://user?id={user_id}'>{name}</a>, <b>–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç —á–∞—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>

{channels_list}
                """, reply_markup=keyboard, disable_web_page_preview=True)
                await asyncio.sleep(30)
                await msg.delete()









# –ö–æ–º–∞–Ω–¥–∞ /top
@router.callback_query(F.data.startswith('rating'))
async def show_top(callback: types.CallbackQuery):
    top_users = await DB.get_top_users(ADMINS_ID)
    print(top_users)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    keyboard = InlineKeyboardBuilder()

    for i in range(len(top_users)):
        user_id, username, balance = top_users[i]
        if i+1 == 1:
            emoji = "ü•á"
        elif i+1 == 2:
            emoji = "ü•à"
        elif i+1 == 3:
            emoji = "ü•â"
        else:
            emoji = "üîπ"
        keyboard.add(InlineKeyboardButton(text=f"{emoji}{i+1}. {username} - {balance} üí∞", url='https://t.me/'+ username))
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='menu_stats'))
    keyboard.adjust(1) 

    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    await callback.message.edit_text("üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É üèÜ", reply_markup=keyboard.as_markup())


@router.callback_query(F.data.startswith('top_referrers'))
async def show_top_referrers(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    top_referrers = await DB.get_top_referrers()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    keyboard = InlineKeyboardBuilder()

    for i in range(len(top_referrers)):
        user_id, username, referral_count = top_referrers[i]
        if i + 1 == 1:
            emoji = "ü•á"
        elif i + 1 == 2:
            emoji = "ü•à"
        elif i + 1 == 3:
            emoji = "ü•â"
        else:
            emoji = "üîπ"
        keyboard.add(InlineKeyboardButton(
            text=f"{emoji}{i + 1}. {username} - {referral_count} üë•", 
            url=f'https://t.me/{username}'  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='menu_stats'))
    keyboard.adjust(1) 

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    await callback.message.edit_text(
        "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ üèÜ", 
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith('referrers24hour'))
async def show_top_referrers(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    top_referrers = await DB.get_top_referrers24hour(ADMINS_ID)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    keyboard = InlineKeyboardBuilder()

    for i in range(len(top_referrers)):
        user_id, username, referral_count = top_referrers[i]
        if i + 1 == 1:
            emoji = "ü•á"
        elif i + 1 == 2:
            emoji = "ü•à"
        elif i + 1 == 3:
            emoji = "ü•â"
        else:
            emoji = "üîπ"

        # –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        if username:
            button_text = f"{emoji}{i + 1}. {username} - {referral_count} üë•"
            keyboard.add(InlineKeyboardButton(
                text=button_text, 
                url=f'https://t.me/{username}'  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ))
        else:
            button_text = f"{emoji}{i + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id} - {referral_count} üë•"
            keyboard.add(InlineKeyboardButton(
                text=button_text, 
                callback_data="no_link"  # –ö–Ω–æ–ø–∫–∞ –±–µ–∑ —Å—Å—ã–ª–∫–∏
            ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='menu_stats'))
    keyboard.adjust(1) 

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    await callback.message.edit_text(
        "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ üèÜ", 
        reply_markup=keyboard.as_markup()
    )
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è



async def increment_daily_statistics(column):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    await DB.increment_statistics(user_id=2, column=column)




# @router.callback_query(F.data.startswith('info_'))
# async def info_handler(callback: types.CallbackQuery, bot: Bot):
#     user_id = callback.from_user.id
#     task_id = int(callback.data.split('_')[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data

#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
#     task = await DB.get_task_by_id(task_id)
#     if not task:
#         await callback.answer(" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#         return

#     target_id = task[2]
#     chat_id, message_id = map(int, target_id.split(":"))

#     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
#     success = await info(user_id, chat_id, message_id, bot)

#     if success:
#         await callback.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
#     else:
#         await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ.")




# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
# @router.message(Command('info'))
# async def handle_info_command(message: types.Message, state: FSMContext):
#     # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç
#     await state.set_state(Info.forward)
#     await message.answer("üì® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")


@router.message(Command('opp'))
async def start(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    if not await check_subs_op(user_id, bot):
        return
    
    if not await DB.get_break_status():
        await message.answer('üõ†–ò–¥—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤üõ†\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ')
        return
    
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
@router.callback_query(F.data == 'op_proverka')
async def check_subscription(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    channels = await DB.all_channels_op()
    not_subscribed = []

    for channel in channels:
        channel_id = channel[0]
        try:
            chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']: 
                not_subscribed.append(channel)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

    if not_subscribed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        await callback_query.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
        await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        await bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")





async def check_subs_op(user_id, bot: Bot):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    channels = await DB.all_channels_op()
    not_subscribed = []

    for channel in channels:
        channel_id = channel[0]
        try:
            chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                not_subscribed.append(channel)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

    if not_subscribed:
        print(f'https://t.me/{channel[0].replace("@", "")}')
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã
        keyboard = InlineKeyboardBuilder()
        for channel in not_subscribed:
            keyboard.add(InlineKeyboardButton(
                text=f"üì¢ {channel[1]}",
                url=f"https://t.me/{channel[0].replace('@', '')}"
            ))
        keyboard.add(InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
            callback_data="op_proverka"
        ))
        keyboard.adjust(1)
        await bot.send_message(
            user_id,
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:",
            reply_markup=keyboard.as_markup()
        )
        return False
    return True



# from telethon import TelegramClient
# from config import api_id, api_hash, phone_number
# from telethon.tl.functions.messages import GetMessagesRequest, GetRecentReactionsRequest, ReadReactionsRequest, GetRecentReactionsRequest, GetRepliesRequest, GetHistoryRequest
# from telethon.tl.types import ReactionEmoji  
# from telethon import functions, types 
# from telethon.tl.types import InputMessageID 
# from telethon.errors import ChatWriteForbiddenError
# from telethon.tl.types import InputPeerChat, InputPeerChannel, InputPeerUser
# from telethon.tl.functions.premium import GetBoostsStatusRequest, GetUserBoostsRequest
# from telethon.tl.types import InputPeerChannel, InputUser
# from telethon.tl.functions.channels import GetFullChannelRequest

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon
# from telethon.errors import FloodWaitError

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
# clients = [
#     TelegramClient('session_name1', 26226969, 'ad23f103ca534197dca27c8b3b5c98a1'),
#     TelegramClient('session_name2', 27766851, '9caf54b36748a7043312fdb202a92ae4'),
#     TelegramClient('session_name3', 25159668, '3c0bf4ca735fec3f3cb59302239a0cca')
# ]

# # sessions = [
# #     {"session_name": "session_name", "api_id": 25159668, "api_hash": "3c0bf4ca735fec3f3cb59302239a0cca", "phone_number": "+79097217693"},
# #     {"session_name": "session_name2", "api_id": 26226969, "api_hash": "ad23f103ca534197dca27c8b3b5c98a1", "phone_number": "+79914512687"},
# #     {"session_name": "session_name3", "api_id": 27766851, "api_hash": "9caf54b36748a7043312fdb202a92ae4", "phone_number": "+79223348628"},
# # ]

# # –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
# last_used_client_index = 0

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
# async def send_notification(message):
#     try:
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
#         await clients[0].start()
#         await clients[0].connect()
#         await clients[0].send_message(5129878568, message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#         await clients[0].disconnect()
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
# def get_next_client():
#     global last_used_client_index
#     router = clients[last_used_client_index]
#     last_used_client_index = (last_used_client_index + 1) % len(clients)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
#     return router

# async def comment(user_id, chat_id, message_id):
#     """
#     –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º.
#     :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
#     :param chat_id: ID —á–∞—Ç–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å—Ç.
#     :param message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ—Å—Ç–∞).
#     :return: True, –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å—Ç—å, –∏–Ω–∞—á–µ False.
#     """
#     # for _ in range(len(clients)):  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
#     #     router = get_next_client()
#     #     try:
#     #         print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Å—Å–∏—è: {router.session.filename}")
#     #         await router.start()
#     #         await router.connect()

#     #         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
#     #         try:
#     #             peer = await router.get_entity(chat_id)
#     #         except Exception as e:
#     #             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {e}")
#     #             await router.disconnect()
#     #             continue

#     #         # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
#     #         replies = await router(GetRepliesRequest(
#     #             peer=peer,
#     #             msg_id=message_id,
#     #             offset_id=0,
#     #             offset_date=None,
#     #             add_offset=0,
#     #             limit=100,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
#     #             max_id=0,
#     #             min_id=0,
#     #             hash=0
#     #         ))
#     #         print(replies)

#     #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     #         for message in replies.messages:
#     #             if message.from_id and message.from_id.user_id == user_id:
#     #                 print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!")
#     #                 await router.disconnect()
#     #                 return True
#     #         await router.disconnect()
#     #     except FloodWaitError as e:
#     #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
#     #         await send_notification(f"–°–µ—Å—Å–∏—è {router.session.filename} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {e.seconds} —Å–µ–∫—É–Ω–¥.")
#     #         print(f"FloodWait: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥")
#     #         continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
#     #     except Exception as e:
#     #         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
#     #         continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
#     return False

# async def boost(channel_username, user_id):
#     # for _ in range(len(clients)):  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
#     #     router = get_next_client()
#     #     try:
#     #         print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Å—Å–∏—è: {router.session.filename}")
#     #         await router.start()
#     #         await router.connect()

#     #         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
#     #         channel = await router.get_entity(channel_username)

#     #         # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
#     #         full_channel = await router(GetFullChannelRequest(channel=channel))

#     #         # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputPeerChannel –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ GetBoostsStatusRequest
#     #         input_peer = InputPeerChannel(channel_id=channel.id, access_hash=channel.access_hash)

#     #         # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±—É—Å—Ç–æ–≤
#     #         boosts_status = await router(GetBoostsStatusRequest(peer=input_peer))

#     #         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
#     #         user = await router.get_entity(user_id)
#     #         input_user = InputUser(user_id=user.id, access_hash=user.access_hash)

#     #         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Å—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     #         user_boosts = await router(GetUserBoostsRequest(peer=input_peer, user_id=input_user))

#     #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É—Å—Ç—ã –Ω–∞ –∫–∞–Ω–∞–ª–µ
#     #         if hasattr(user_boosts, 'boosts') and len(user_boosts.boosts) > 0:
#     #             print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–¥–µ–ª–∞–ª –±—É—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª {channel_username}.")
#     #             await router.disconnect()
#     #             return True

#     #         await router.disconnect()
#     #     except FloodWaitError as e:
#     #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
#     #         await send_notification(f"–°–µ—Å—Å–∏—è {router.session.filename} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {e.seconds} —Å–µ–∫—É–Ω–¥.")
#     #         print(f"FloodWait: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥")
#     #         continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
#     #     except Exception as e:
#     #         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É—Å—Ç–∞: {e}")
#     #         continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
#     return False

# async def check_premium(user_id):
#     # for _ in range(len(clients)):  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
#     #     router = get_next_client()
#     #     try:
#     #         print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Å—Å–∏—è: {router.session.filename}")
#     #         await router.connect()

#     #         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
#     #         user = await router.get_entity(user_id)
#     #         if user.premium:
#     #             print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} –µ—Å—Ç—å Telegram Premium!")
#     #             await router.disconnect()
#     #             return True
#     #         else:
#     #             print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} –Ω–µ—Ç Telegram Premium.")
#     #             await router.disconnect()
#     #     except FloodWaitError as e:
#     #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
#     #         await send_notification(f"–°–µ—Å—Å–∏—è {router.session.filename} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {e.seconds} —Å–µ–∫—É–Ω–¥.")
#     #         print(f"FloodWait: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥")
#     #         continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
#     #     except Exception as e:
#     #         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–º–∏—É–º–∞: {e}")
#     #         continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
#     return False














# # import asyncio
# # from telethon import TelegramClient
# # from telethon.errors import FloodWaitError
# # from aiogram import Bot

# # # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
# # from config import sessions  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ sessions –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ config.py

# # # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
# # clients = []
# # for session in sessions:
# #     tg_client = TelegramClient(session["session_name"], session["api_id"], session["api_hash"])
# #     clients.append(tg_client)


# # async def update_premium_users2(bot: Bot):
# #     try:
# #         # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# #         all_users = await DB.get_all_users()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DB –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
# #         total_users = len(all_users)
# #         premium_users_count = 0
# #         count = 0

# #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# #         message = await bot.send_message(
# #             5129878568,
# #             f'#prem \n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞—Ç–∞. –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}. '
# #             f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0. –ü—Ä–µ–º–∏—É–º: 0. –û–±—ã—á–Ω—ã–µ: 0.'
# #         )

# #         # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∫–æ–Ω—Ü–∞
# #         all_users_reversed = all_users[::-1]

# #         # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–Ω—Ü–∞
# #         for i, user in enumerate(all_users_reversed):
# #             user_id = user[1]  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ user_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ 1

# #             # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
# #             tg_client = clients[i % len(clients)]
# #             session = sessions[i % len(sessions)]

# #             try:
# #                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram Premium
# #                 prem = await check_premium(user_id, tg_client)
# #                 if prem:
# #                     prem = 1
# #                     premium_users_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# #                 else:
# #                     prem = 0
# #                 print(user_id, prem)
# #                 count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# #                 # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# #                 await DB.update_user_premium(user_id, prem)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DB –æ–ø—Ä–µ–¥–µ–ª–µ–Ω

# #                 # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
# #                 await message.edit_text(
# #                     f'#prem \n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞—Ç–∞. –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}. '
# #                     f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {count}. –ü—Ä–µ–º–∏—É–º: {premium_users_count}. –û–±—ã—á–Ω—ã–µ: {count - premium_users_count}.'
# #                 )

# #                 # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
# #                 await asyncio.sleep(3)

# #                 # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 7 –∑–∞–ø—Ä–æ—Å–æ–≤
# #                 if count % 7 == 0:  # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 7 –∑–∞–ø—Ä–æ—Å–æ–≤
# #                     await asyncio.sleep(30)

# #             except Exception as e:
# #                 # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
# #                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
# #                 continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

# #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# #         await bot.send_message(
# #             5129878568,
# #             f'#prem \n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. Premium —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. '
# #             f'–ò–∑ –Ω–∏—Ö {premium_users_count} –∏–º–µ—é—Ç Telegram Premium.'
# #         )
# #     except Exception as e:
# #         # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
# #         print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ update_premium_users: {e}")





# url = "http://45.143.203.232/get_balance"
# data = {"user_id": 5129878568}

# response = requests.post(url, json=data)
# print(response.json())  



