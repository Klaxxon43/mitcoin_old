from untils.Imports import *
from .client import *
from .states import *

@router.callback_query(F.data == 'my_works')
async def taskss_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    tasks = await DB.get_tasks_by_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(tasks)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = 1
    tasks_on_page, total_pages = paginate_tasks(tasks, page)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard2(tasks_on_page, page, total_pages, bot)

    await callback.message.edit_text("üíº <b>–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:</b>", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("page_"))
async def change_page_handler(callback: types.CallbackQuery, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = await DB.get_tasks_by_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    tasks_on_page, total_pages = paginate_tasks(tasks, page)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard2(tasks_on_page, page, total_pages, bot)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.edit_text("üíº <b>–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:</b>", reply_markup=keyboard)


async def check_admin_and_get_invite_link(bot, target_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ target_id —á–∏—Å–ª–æ–º (ID —á–∞—Ç–∞) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π (—é–∑–µ—Ä–Ω–µ–π–º)
        try:
            chat_id = int(target_id)
            is_id = True
        except ValueError:
            chat_id = target_id
            is_id = False

        chat_administrators = await bot.get_chat_administrators(chat_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        for admin in chat_administrators:
            if admin.user.id == bot.id:
                # –ï—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                try:
                    chat = await bot.get_chat(chat_id)
                    invite_link = chat.invite_link
                    return invite_link
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞ –¥–ª—è {chat_id}, –æ—à–∏–±–∫–∞ - {e}')
                    return "üòë –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏–Ω–∞—á–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç"
        return "üòë –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏–Ω–∞—á–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç"
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}')
        return "üòë –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏–Ω–∞—á–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç"


@router.callback_query(lambda c: c.data.startswith("task_"))
async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ 
    task_type = TASK_TYPES.get(task[4], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    amount = task[3]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    max_amount = task[5]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
    time = task[7]  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è

    # –î–ª—è –±—É—Å—Ç–∞ (—Ç–∏–ø 6) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if task[4] == 6:  # –ë—É—Å—Ç
        days = task[6] or 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±—É—Å—Ç–∞
        daily_price = all_price['boost']
        total_days_paid = await Boost.get_paid_days_for_boost(task_id)
        
        task_info = f"""
<b>{task_type}</b>

üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> <em>{max_amount} —à—Ç.</em>
‚òëÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <em>{max_amount-amount} —à—Ç.</em>
üîã –û—Å—Ç–∞–ª–æ—Å—å: <em>{amount} —à—Ç.</em>

üìÖ <b>–°—Ä–æ–∫ –±—É—Å—Ç–∞:</b> <em>{days} –¥–Ω–µ–π</em>
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å:</b> <em>{daily_price} MITcoin –∑–∞ –±—É—Å—Ç</em>
üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> <em>{time if time else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}</em>
"""
        try:
            chat = await bot.get_chat(task[2])
            chat_title = chat.title
            task_info += f"""
üì¢ <b>–ö–∞–Ω–∞–ª:</b> <em>{chat_title}</em>
"""
        except:
            task_info += f"""
üì¢ <b>–ö–∞–Ω–∞–ª:</b> <em>{task[2]}</em>
"""
    else:
        price_per_unit = {1: 1500, 2: 1500, 3: 300, 4: 750, 5: 1000, 6: 5000, 7: 250}
        cost = amount * price_per_unit.get(task[4], 0)
        
        task_info = f"""
<b>{task_type}</b>

üßÆ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:</b> <em>{max_amount}</em>
üßÆ <b>–û—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:</b> <em>{amount}</em>
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <em>{cost} MITcoin </em>
üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b>  <em>{time if time else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}</em>
"""

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
        if task[4] in [1, 2]:  # –ö–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç
            target_id = task[2]
            invite_link = await check_admin_and_get_invite_link(bot, target_id)
            try:
                chat = await bot.get_chat(target_id)
                chat_title = chat.title
            except Exception as e:
                chat_title = "‚ö†Ô∏è –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω —Å –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚ö†Ô∏è"
            task_info += f"""
üì¢ <b>–ö–∞–Ω–∞–ª/—á–∞—Ç:</b> <em>{chat_title}</em>
üîó <b>–°—Å—ã–ª–∫–∞:</b> {invite_link}
"""
        elif task[4] == 3:  # –ü–æ—Å—Ç
            target_id = task[2]
            if ":" in target_id:
                chat_id, message_id = map(int, target_id.split(":"))
                try:
                    chat = await bot.get_chat(chat_id)
                    chat_title = chat.title
                except Exception as e:
                    chat_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
                task_info += f"""
üì¢ <b>–ö–∞–Ω–∞–ª:</b> <em>{chat_title}</em>
üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:</b> https://t.me/{chat_id}/{message_id}
"""
        elif task[4] == 4:  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            target_id = task[2]
            if ":" in target_id:
                chat_id, message_id = map(int, target_id.split(":"))
                try:
                    chat = await bot.get_chat(chat_id)
                    chat_title = chat.title
                except Exception as e:
                    chat_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
                task_info += f"""
üì¢ <b>–ö–∞–Ω–∞–ª:</b> <em>{chat_title}</em>
üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:</b> https://t.me/{chat_id}/{message_id}
"""
        elif task[4] == 5:  # –ë–æ—Ç
            target_id = task[2]
            if target_id.startswith("https://t.me/"):
                username = target_id.split("/")[-1].split("?")[0]
            elif target_id.startswith("@"):
                username = target_id[1:]
            else:
                username = target_id
            task_info += f"""
ü§ñ <b>–ë–æ—Ç:</b> <code>@{username}</code>
üîó <b>–°—Å—ã–ª–∫–∞:</b> {target_id}
"""
        elif task[4] == 7:  # –†–µ–∞–∫—Ü–∏—è
            target_id = task[2]
            if ":" in target_id:
                channel_part, post_id = target_id.split(":")

                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á–∏—Å–ª–æ–≤–æ–π –ª–∏ —ç—Ç–æ id, –∏–ª–∏ username
                try:
                    channel_id = int(channel_part)
                except ValueError:
                    channel_id = None

                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å chat –∏ username
                channel_username = None
                if channel_id is not None:
                    try:
                        chat = await bot.get_chat(channel_id)
                        if chat.username:
                            channel_username = chat.username
                        else:
                            # –ï—Å–ª–∏ username –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º id
                            channel_username = str(channel_id)
                    except Exception:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ id
                        channel_username = str(channel_id)
                else:
                    # channel_part ‚Äî —ç—Ç–æ username, —É–±–µ—Ä—ë–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                    username_candidate = channel_part.lstrip("@")
                    try:
                        chat = await bot.get_chat(f"@{username_candidate}")
                        if chat.username:
                            channel_username = chat.username
                        else:
                            # –ù–µ—Ç username ‚Äî –≤—ã–≤–µ–¥–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            channel_username = username_candidate
                    except Exception:
                        channel_username = username_candidate

                specific_reaction = task[6] if task[6] else "–õ—é–±–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è"
                task_info += f"""
üì¢ <b>–ö–∞–Ω–∞–ª:</b> <code>@{channel_username}</code>
üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:</b> https://t.me/{channel_username}/{post_id}
üéØ <b>–†–µ–∞–∫—Ü–∏—è:</b> <em>{specific_reaction}</em>
        """

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–µ–º
    builder = InlineKeyboardBuilder()

    builder.row(
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}"),
            InlineKeyboardButton(text="‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"edit_{task_id}"),
        )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_works"))
    
    await callback.message.edit_text(task_info, reply_markup=builder.as_markup())


@router.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_task_handler(callback: types.CallbackQuery):
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    amount = task[3] 
    if amount is None:
        amount = 1
    price_per_unit = {1: 1500, 2: 1500, 3: 300}
    cost = amount * price_per_unit.get(task[4], 0)
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    new_balance = balance + cost

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await DB.delete_task(task_id)
    await DB.update_balance(user_id, balance=new_balance)
    await callback.message.edit_text("–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –∑–∞–¥–∞–Ω–∏—è–º
    user_id = callback.from_user.id
    tasks = await DB.get_tasks_by_user(user_id)
    page = 1
    tasks_on_page, total_pages = paginate_tasks(tasks, page)
    keyboard = await generate_tasks_keyboard(tasks_on_page, page, total_pages)

    await callback.message.edit_text("üíº <b>–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:</b>", reply_markup=keyboard)



@router.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_task_handler(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
    task_id = int(callback.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    task = await DB.get_task_by_id(task_id)
    if not task:
        await callback.message.edit_text("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    await state.update_data(task_id=task_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await state.set_state(EditTaskState.waiting_for_amount)

@router.message(EditTaskState.waiting_for_amount)
async def process_amount_input(message: types.Message, state: FSMContext, bot: Bot):
    try:
        new_amount = int(message.text)
        if new_amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        task_id = data.get("task_id")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        task = await DB.get_task_by_id(task_id)
        if not task:
            await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            await state.clear()
            return
            
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        user_id = message.from_user.id
        target_id = task[2]      # ID —Ü–µ–ª–∏
        old_amount = task[3]     # –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        task_type = task[4]      # –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è
        max_amount = task[5]     # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        days = task[6] if len(task) > 6 else 1  # –î–Ω–∏ –¥–ª—è –±—É—Å—Ç–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ã–ª–æ –Ω–µ –º–µ–Ω—å—à–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        completed = max_amount - old_amount
        if new_amount < completed:
            await message.answer(
                f"‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {new_amount}, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {completed}!"
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        difference = new_amount - max_amount
        
        # –î–ª—è –±—É—Å—Ç–æ–≤ (—Ç–∏–ø 6) –æ—Å–æ–±—ã–π —Ä–∞—Å—á–µ—Ç
        if task_type == 6:
            daily_price = all_price['boost']
            cost_difference = difference * daily_price * days
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            price_per_unit = {
                1: 1500,  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
                2: 1500,  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç
                3: 300,   # –†–µ–∞–∫—Ü–∏—è
                4: 750,   # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                5: 1000,  # –ë–æ—Ç
                7: 250    # –†–µ–∞–∫—Ü–∏—è
            }.get(task_type, 0)
            cost_difference = difference * price_per_unit

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await DB.select_user(user_id)
        balance = user_data['balance']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏
        if difference > 0 and cost_difference > balance:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {cost_difference} MITcoin\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MITcoin"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        new_balance = balance - cost_difference
        await DB.update_balance(user_id, new_balance)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        new_remaining = new_amount - completed
        await DB.update_task_amount(task_id, new_remaining)
        await DB.update_task_max_amount(task_id, new_amount)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_type = "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ" if difference > 0 else "–£–º–µ–Ω—å—à–µ–Ω–∏–µ"
        description = {
            1: "–ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª",
            2: "–ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Ç", 
            3: "—Ä–µ–∞–∫—Ü–∏–π",
            4: "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            5: "–±–æ—Ç–æ–≤",
            6: "–±—É—Å—Ç–æ–≤",
            7: "—Ä–µ–∞–∫—Ü–∏–π"
        }.get(task_type, "–∑–∞–¥–∞–Ω–∏–π")
        
        await DB.add_transaction(
            user_id=user_id,
            amount=abs(cost_difference),
            description=f"{transaction_type} {description}",
            additional_info=f"–ó–∞–¥–∞–Ω–∏–µ ID: {task_id}. –ë—ã–ª–æ: {max_amount}, –°—Ç–∞–ª–æ: {new_amount}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks = await DB.get_tasks_by_user(user_id)
        page = 1
        tasks_on_page, total_pages = paginate_tasks(tasks, page)
        keyboard = await generate_tasks_keyboard(tasks_on_page, page, total_pages)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if task_type == 6:
            result_message = (
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"üìÖ –î–Ω–µ–π –±—É—Å—Ç–∞: {days}\n"
                f"üßÆ –ë—ã–ª–æ: {max_amount} ‚Üí –°—Ç–∞–ª–æ: {new_amount}\n"
                f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {'-' if difference > 0 else '+'}{abs(cost_difference)} MITcoin\n"
                f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} MITcoin"
            )
        else:
            result_message = (
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"üßÆ –ë—ã–ª–æ: {max_amount} ‚Üí –°—Ç–∞–ª–æ: {new_amount}\n"
                f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {'-' if difference > 0 else '+'}{abs(cost_difference)} MITcoin\n"
                f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} MITcoin"
            )

        await message.answer(f"{result_message}\n\nüíº <b>–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:</b>", reply_markup=keyboard)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_amount_input: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")
    finally:
        await state.clear()





async def generate_tasks_keyboard(tasks, page, total_pages):
    builder = InlineKeyboardBuilder()

    # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    for task in tasks:
        task_type = TASK_TYPES.get(task[4], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        amount = task[3]  
        button_text = f"{task_type} | {amount}"
        # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        builder.row(InlineKeyboardButton(text=button_text, callback_data=f"task_{task[0]}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile"))

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = []
    if page > 1:
        pagination.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{page - 1}"))
    pagination.append(InlineKeyboardButton(text=str(page), callback_data="current_page"))
    if page < total_pages:
        pagination.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{page + 1}"))

    builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    return builder.as_markup()




async def generate_tasks_keyboard2(tasks, page, total_pages, bot):
    builder = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–µ–º builder –æ–¥–∏–Ω —Ä–∞–∑

    # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    for task in tasks:
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_id, user_id, target_id, amount, task_type_id, max_amount, _, time = task  # –î–æ–±–∞–≤–ª–µ–Ω–æ time

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        task_type = TASK_TYPES.get(task_type_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º target_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if task_type_id == 5:  # –¢–∏–ø 5 - –ë–æ—Ç
            if target_id.startswith("https://t.me/"):
                username = target_id.split("/")[-1].split("?")[0]
            elif target_id.startswith("@"):
                username = target_id[1:]
            else:
                username = target_id
            chat_name = f"@{username}"  # –£–∫–∞–∑—ã–≤–∞–µ–º username –±–æ—Ç–∞
        else:
            try:
                # –ï—Å–ª–∏ target_id —Å–æ–¥–µ—Ä–∂–∏—Ç ":" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "klaxxon_off:2748" –∏–ª–∏ "-1001952919981:2757")
                if ":" in str(target_id):
                    target_id = str(target_id).split(":")[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –¥–æ ":"

                # –ï—Å–ª–∏ target_id –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "https://t.me/" –∏–ª–∏ "@"
                if str(target_id).startswith("https://t.me/"):
                    target_id = str(target_id).replace("https://t.me/", "")
                elif str(target_id).startswith("@"):
                    target_id = str(target_id).replace("@", "")

                # –ï—Å–ª–∏ target_id —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "klaxxon_off")
                if not str(target_id).lstrip('-').isdigit():
                    target_id = "@" + str(target_id)  # –î–æ–±–∞–≤–ª—è–µ–º "@" –¥–ª—è username

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ
                chat = await bot.get_chat(target_id)
                chat_name = chat.title
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
                chat_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = f"{task_type} | {chat_name} | {amount}/{max_amount}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ builder
        builder.row(InlineKeyboardButton(text=button_text, callback_data=f"task_{task_id}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile"))

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = []
    if page > 1:
        pagination.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{page - 1}"))
    pagination.append(InlineKeyboardButton(text=str(page), callback_data="current_page"))
    if page < total_pages:
        pagination.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{page + 1}"))

    builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    return builder.as_markup()