from .client import *

@router.message(Command('id'))
async def _(message: types.Message, bot: Bot):
    username = message.text.split()[1]
    logger.info(username)
    id = str(await DB.get_id_from_username(username)).replace("(", "").replace(")", "").replace(",","")
    await message.answer(f'ID –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{id}</code>')


@router.message(Command('chatid'))
async def _(message: types.Message):
    await message.answer(message.chat.id) 

@router.message(Command("basketball"))
async def cmd_basketball_in_group(message: types.Message):
    await message.answer_dice(emoji=DiceEmoji.BASKETBALL)  


@router.message(Command("dice"))
async def cmd_dice_in_group(message: types.Message):
    await message.answer_dice(emoji=DiceEmoji.DICE) 


@router.message(Command('updatestatics'))
async def _(message: types.Message):
    await DB.reset_daily_statistics()
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


@router.message(Command('msg'))
async def send_message_to_user(message: types.Message, bot: Bot):
    from confIg import ADMINS_ID
    
    if message.from_user.id not in ADMINS_ID:
        await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if len(message.text.split()) > 2:
        user_id = message.text.split()[1]
        text = ' '.join(message.text.split()[2:])
        msg = (f"""
      üö® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b> üö®
üìù <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
<blockquote>{text}</blockquote>"""
        )
        
        try:
            await bot.send_message(user_id, msg)
            await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /msg.")




@router.message(Command('dbinfo'))
async def handle_db_command(message: types.Message):
    structure = await DB.get_db_structure_sqlite()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö –∏ –∫–æ–ª–æ–Ω–∫–∞—Ö
    for table, columns in structure.items():
        column_info = []
        for column in columns:
            column_info.append(f"{column[1]} ({column[2]})")  # column[1] - –∏–º—è –∫–æ–ª–æ–Ω–∫–∏, column[2] - —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        await message.answer(f"–¢–∞–±–ª–∏—Ü–∞: {table}\n–ö–æ–ª–æ–Ω–∫–∏: {', '.join(column_info)}")


@router.message(Command('db'))
async def handle_db_command(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMINS_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    if len(message.text.split()) > 1:
        query = ' '.join(message.text.split()[1:])
    logger.info(query)

    if not query:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /db.")
        return
    try: 
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        result = await DB.execute_query(query)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if isinstance(result, str):  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            await message.answer(result)
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_result = "\n".join([str(row) for row in result])
            await message.answer(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:\n<code>{formatted_result}</code>")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report
@router.message(Command('report'))
async def send_report(message: types.Message, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /report –Ω–µ –ø—É—Å—Ç–æ–π
    if len(message.text.split()) > 1:
        report_text = ' '.join(message.text.split()[1:])  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /report
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        admin_message = (f"""
      üö® <b>–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç!</b> üö®
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username}
üÜî <b>ID:</b> <code>{message.from_user.id}</code>\n
üìù <b>–¢–µ–∫—Å—Ç —Ä–µ–ø–æ—Ä—Ç–∞:</b>
<blockquote>{report_text}</blockquote>"""
        )
        from confIg import ADMINS_ID
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMINS_ID:
            try:
                await bot.send_message(admin_id, admin_message)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply("‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º!")
    else:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /report.")
