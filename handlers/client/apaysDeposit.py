# apaysDeposit.py
from .client import *
from .deposit import *
from API.APayAPI import APayAPI

@router.callback_query(F.data == 'deposit_apays')
async def deposit_apays_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ APays"""
    data = await state.get_data()
    currency = data.get('deposit_currency', 'MICO')
    
    text = (
        f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency} —á–µ—Ä–µ–∑ APays</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω. 100 ‚ÇΩ):"
    )
    
    await callback.message.edit_text(text, reply_markup=back_to_deposit_kb(currency))
    await state.set_state(DepositStates.waiting_apays_amount)
    await callback.answer()

@router.message(DepositStates.waiting_apays_amount)
async def process_apays_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    data = await state.get_data()
    currency = data.get('deposit_currency', 'MICO')
    
    try:
        rub_amount = Decimal(message.text.replace(',', '.'))
        if rub_amount < 10:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 100 ‚ÇΩ")
            return
            
        amount = int(rub_amount * 1000) if currency == 'MICO' else rub_amount
        amount_text = f"{amount} {'$MICO' if currency == 'MICO' else '‚ÇΩ'}"
        
        await message.answer(
            f"üíé <b>–î–µ—Ç–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∞: {rub_amount} ‚ÇΩ\n‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ: {amount_text}\n"
            f"‚Ä¢ –ö—É—Ä—Å: 1 ‚ÇΩ = {'1000 $MICO' if currency == 'MICO' else '1 ‚ÇΩ'}\n\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=confirm_apays_deposit_kb(amount, rub_amount, currency)
        )
    except (ValueError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 150.5)")

@router.callback_query(F.data.startswith('confirm_apays_'))
async def confirm_apays_deposit(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    _, _, amount, rub_amount, currency = callback.data.split('_')
    user_id = callback.from_user.id
    order_id = f"apay_{int(time.time())}_{user_id}"
    
    try:
        invoice = await APayAPI.create_invoice(int(Decimal(rub_amount)*100), order_id)
        
        if not invoice.get('status'):
            error = invoice.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            return
            
        await save_payment_data(
            user_id=user_id,
            amount=float(amount),
            currency=currency,
            order_id=order_id,
            status='created'
        )
        
        await callback.message.edit_text(
            f"üîó <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"–°—É–º–º–∞: {rub_amount} ‚ÇΩ\n–ö –ø–æ–ª—É—á–µ–Ω–∏—é: {amount} {currency}\n\n"
            "–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç ‚è≥\n\n"
            f"‚ùóÔ∏è –ï—Å–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã ‚ùóÔ∏è",
            reply_markup=payment_keyboard(invoice['url'], order_id, amount, currency)
        )
    except Exception as e:
        logger.error(f"APays error: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
    finally:
        await callback.answer()

@router.callback_query(F.data.startswith('check_apays_'))
async def check_apays_payment(callback: types.CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    parts = callback.data.split('_')

    if len(parts) < 4:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    order_id = '_'.join(parts[2:-2])  # –°–æ–±–∏—Ä–∞–µ–º order_id –∏–∑ —Å—Ä–µ–¥–Ω–∏—Ö —á–∞—Å—Ç–µ–π
    amount = parts[-2]
    currency = parts[-1]
    
    user_id = callback.from_user.id
    
    try:
        payment = await APayAPI.check_status(order_id)
        
        if payment.get('order_status') == 'approve':
            await process_successful_payment(
                user_id=user_id,
                amount=float(amount),
                currency=currency,
                order_id=order_id,
                bot=bot,
                callback=callback
            )
        elif payment.get('order_status') == 'pending':
            await callback.answer("‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω", show_alert=True)
        else:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logger.error(f"Payment check error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)

async def save_payment_data(user_id: int, amount: float, currency: str, order_id: str, status: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)"""
    payment_data = {
        'user_id': user_id,
        'amount': amount,
        'currency': currency,
        'order_id': order_id,
        'status': status,
        'created_at': datetime.now().isoformat()
    }
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤–∞—à—É –ë–î
    print(f"Saving payment: {payment_data}")

async def process_successful_payment(user_id: int, amount: float, currency: str, order_id: str, bot: Bot, callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    if currency == 'MICO':
        await DB.add_balance(user_id, amount)
    else:
        await DB.add_rub_balance(user_id, amount)
    
    await DB.add_transaction(
        user_id=user_id,
        amount=amount,
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency} —á–µ—Ä–µ–∑ APays",
        additional_info=f"order_{order_id}"
    )

    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} {currency} —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ!",
        reply_markup=back_to_menu_kb()
    )

    await notify_admins(bot, user_id, amount, currency, order_id)

async def notify_admins(bot: Bot, user_id: int, amount: float, currency: str, order_id: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    message = (
        f"üí∞ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ APays\n"
        f"üë§ ID: {user_id}\nüíé –°—É–º–º–∞: {amount} {currency}\n"
        f"üìù Order ID: {order_id}"
    )
    
    for admin_id in ADMINS_ID:
        try:
            await bot.send_message(admin_id, message)
        except Exception as e:
            logger.error(f"Admin notify error: {e}")

def payment_keyboard(url: str, order_id: str, amount: float, currency: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)],
        [InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data=f"check_apays_{order_id}_{amount}_{currency}"
        )]
    ])

def confirm_apays_deposit_kb(amount: float, rub_amount: float, currency: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂",
            callback_data=f"confirm_apays_{amount}_{rub_amount}_{currency}"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"deposit_currency_{currency}"
        )]
    ])