from .client import *
from decimal import Decimal, getcontext, InvalidOperation
from API.usd import create_check as CryptoPayCreateCheck, create_invoice as CryptoPayCreateInvoice


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ Decimal
getcontext().prec = 6

async def get_usd_to_rub_rate() -> Decimal:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å USD –∫ RUB"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('https://api.exchangerate-api.com/v4/latest/USD') as resp:
                data = await resp.json()
                return Decimal(str(data['rates']['RUB']))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD: {e}")
        return Decimal("93.6")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

@router.callback_query(F.data == 'select_deposit_menu')
async def select_deposit_handler(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await callback.answer()
    await callback.message.edit_text(
        "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>",
        reply_markup=select_currency_kb()
    )

@router.callback_query(F.data.startswith('deposit_currency_'))
async def select_deposit_currency_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    currency = callback.data.split('_')[2]  # MICO –∏–ª–∏ RUB
    await state.update_data(deposit_currency=currency)
    
    await callback.answer()
    await callback.message.edit_text(
        f"üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {currency}:</b>",
        reply_markup=deposit_methods_kb(currency)
    )

@router.callback_query(F.data == 'deposit_stars')
async def deposit_stars_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stars"""
    data = await state.get_data()
    currency = data.get('deposit_currency', 'MICO')
    
    await callback.answer()
    await callback.message.edit_text(
        f"‚≠ê <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency} —á–µ—Ä–µ–∑ Telegram Stars</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å:\n"
        "(1 ‚≠ê = 2000 $MICO)\n\n",
        reply_markup=back_to_deposit_kb(currency)
    )
    await state.set_state(DepositStates.waiting_stars_amount)

@router.message(DepositStates.waiting_stars_amount)
async def process_stars_amount(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ Stars"""
    data = await state.get_data()
    currency = data.get('deposit_currency', 'MICO')
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars")
        return
    
    try:
        stars_amount = Decimal(message.text.replace(',', '.'))
        if stars_amount < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1 ‚≠ê")
            return
            
        amount_mico = int(stars_amount * 2000)  # 1 ‚≠ê = 2000 MICO
        
        text = (
            f"üíé <b>–î–µ—Ç–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∞: {stars_amount.normalize()} ‚≠ê\n"
        )
        
        if currency == 'MICO':
            text += f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ: {amount_mico} $MICO\n"
        else:
            rub_amount = stars_amount * Decimal('20')  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å 1 ‚≠ê = 20 ‚ÇΩ
            text += f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ: {rub_amount.normalize()} ‚ÇΩ\n"
            
        text += f"‚Ä¢ –ö—É—Ä—Å: 1 ‚≠ê = 2000 $MICO\n\n"
        text += "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
        
        await message.answer(
            text,
            reply_markup=confirm_stars_deposit_kb(amount_mico, stars_amount, currency)
        )
        await state.clear()
        
    except (ValueError, InvalidOperation):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5)")

@router.callback_query(F.data.startswith('confirm_stars_'))
async def confirm_stars_deposit(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É Stars"""
    try:
        data = callback.data.split('_')
        amount_mico = int(data[2])
        stars_amount = Decimal(data[3])
        currency = data[4] if len(data) > 4 else 'MICO'
        
        prices = [LabeledPrice(
            label=f"{stars_amount.normalize()} Stars ‚Üí {amount_mico if currency == 'MICO' else stars_amount * Decimal('20')} {currency}",
            amount=int(stars_amount)  # 1 –∑–≤–µ–∑–¥–∞ = 100 –∫–æ–ø–µ–µ–∫
        )]
        
        await bot.send_invoice(
            chat_id=callback.from_user.id,
            title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount_mico if currency == 'MICO' else stars_amount * Decimal('20')} {currency}",
            description=f"–û–ø–ª–∞—Ç–∞ {stars_amount.normalize()} Stars",
            payload=f"stars_{callback.from_user.id}_{amount_mico}_{currency}",
            provider_token="",
            currency="XTR",
            prices=prices,
            start_parameter="stars_deposit"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ Stars: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback.answer()

@router.callback_query(F.data == 'deposit_cryptobot')
async def deposit_cryptobot_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ CryptoBot"""
    data = await state.get_data()
    currency = data.get('deposit_currency', 'MICO')
    usd_rate = await get_usd_to_rub_rate()
    
    if currency == 'MICO':
        mico_per_usdt = int(usd_rate * 1000)  # 1 USDT = X RUB * 1000 MICO
        rate_text = f"1 USDT = {mico_per_usdt} $MICO\n(1 USD = {usd_rate.normalize()} RUB ‚Üí 1 RUB = 1000 $MICO)"
    else:
        mico_per_usdt = usd_rate  # 1 USDT = X RUB
        rate_text = f"1 USDT = {usd_rate.normalize()} ‚ÇΩ"

    await callback.answer()
    await callback.message.edit_text(
        f"üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency} —á–µ—Ä–µ–∑ USDT (CryptoBot)</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {rate_text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å:\n"
        "<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.03 USDT</i>",
        reply_markup=back_to_deposit_kb(currency)
    )
    await state.set_state(DepositStates.waiting_crypto_amount)

@router.message(DepositStates.waiting_crypto_amount)
async def process_crypto_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã USDT"""
    data = await state.get_data()
    currency = data.get('deposit_currency', 'MICO')
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT")
        return
    
    try:
        usdt_amount = Decimal(message.text.replace(',', '.'))
        if usdt_amount < Decimal('0.03'):
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 0.03 USDT")
            return
            
        usd_rate = await get_usd_to_rub_rate()
        
        if currency == 'MICO':
            amount = int(usdt_amount * usd_rate * 1000)  # USDT * –∫—É—Ä—Å * 1000
            amount_text = f"{amount} $MICO"
            rate_text = f"1 USDT = {int(usd_rate * 1000)} $MICO"
        else:
            amount = usdt_amount * usd_rate
            amount_text = f"{amount.normalize()} ‚ÇΩ"
            rate_text = f"1 USDT = {usd_rate.normalize()} ‚ÇΩ"
        
        await message.answer(
            f"üí≥ <b>–î–µ—Ç–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∞: {usdt_amount.normalize()} USDT\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ: {amount_text}\n"
            f"‚Ä¢ –ö—É—Ä—Å: {rate_text}\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=confirm_crypto_deposit_kb(amount, usdt_amount, currency)
        )
        
    except (ValueError, InvalidOperation):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5 –∏–ª–∏ 1)")

@router.callback_query(F.data.startswith('confirm_crypto_'))
async def confirm_crypto_deposit(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ CryptoPay"""
    data = callback.data.split('_')
    amount = Decimal(data[2]) if '.' in data[2] else int(data[2])
    usdt_amount = Decimal(data[3])
    currency = data[4] if len(data) > 4 else 'MICO'
    user_id = callback.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ CryptoPay
        invoice = await CryptoPayCreateInvoice(
            amount=float(usdt_amount),
            asset='USDT',
            purpose=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency} –±–∞–ª–∞–Ω—Å–∞ {user_id}'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payment_data = {
            'user_id': user_id,
            'amount': float(amount),
            'currency': currency,
            'invoice_id': invoice['id'],
            'status': 'created',
            'created_at': int(time.time())
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await callback.message.edit_text(
            f"üîó <b>–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"–°—É–º–º–∞: {usdt_amount.normalize()} USDT\n"
            f"–ö –ø–æ–ª—É—á–µ–Ω–∏—é: {amount} {currency}\n\n"
            "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá\n"
            "–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å USDT", url=invoice['url'])],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_pay_{invoice['id']}_{amount}_{currency}")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ CryptoPay: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback.answer()
        
@router.callback_query(F.data.startswith('check_pay_'))
async def check_payment_status(callback: types.CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    data = callback.data.split('_')
    invoice_id = int(data[2])
    amount = Decimal(data[3]) if '.' in data[3] else int(data[3])
    currency = data[4] if len(data) > 4 else 'MICO'
    user_id = callback.from_user.id

    try:
        async with AioCryptoPay(token=CRYPTOBOT_TOKEN) as crypto:
            invoice = await crypto.get_invoices(invoice_ids=invoice_id)

        if invoice.status == 'paid':
            # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            if currency == 'MICO':
                await DB.add_balance(user_id, amount)
            else:
                await DB.add_rub_balance(user_id, float(amount))
                
            await DB.add_transaction(
                user_id=user_id,
                amount=float(amount),
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency} USDT",
                additional_info=f"invoice_{invoice_id}"
            )

            await callback.message.edit_text(
                f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} {currency} —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ!",
                reply_markup=back_to_menu_kb()
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMINS_ID:
                try:
                    await bot.send_message(
                        admin_id,
                        f"üí∞ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ USDT\n"
                        f"üë§ ID: {user_id}\n"
                        f"üíé –°—É–º–º–∞: {amount} {currency}\n"
                        f"üìù Invoice ID: {invoice_id}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

        elif invoice.status == 'active':
            await callback.answer("‚ÑπÔ∏è –°—á–µ—Ç –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω", show_alert=True)
        else:
            await callback.answer("‚ùå –°—á–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@router.callback_query(F.data == 'deposit_rub')
async def deposit_rub_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä—É–±–ª—è–º–∏"""
    data = await state.get_data()
    currency = data.get('deposit_currency', 'MICO')
    
    await callback.answer()
    await callback.message.edit_text(
        f"‚ÇΩ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency} —Ä—É–±–ª—è–º–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å:\n"
        f"–ö—É—Ä—Å: 1 ‚ÇΩ = {1000 if currency == 'MICO' else 1} {currency}\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 150.5</i>",
        reply_markup=back_to_deposit_kb(currency)
    )
    await state.set_state(DepositStates.waiting_rub_amount)

@router.message(DepositStates.waiting_rub_amount)
async def process_rub_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã —Ä—É–±–ª–µ–π"""
    data = await state.get_data()
    currency = data.get('deposit_currency', 'MICO')
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö")
        return
    
    try:
        rub_amount = Decimal(message.text.replace(',', '.'))
        if rub_amount < 10:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 10 ‚ÇΩ")
            return
            
        if currency == 'MICO':
            amount = int(rub_amount * 1000)  # 1 RUB = 1000 MICO
            amount_text = f"{amount} $MICO"
            rate_text = "1 ‚ÇΩ = 1000 $MICO"
        else:
            amount = rub_amount
            amount_text = f"{amount.normalize()} ‚ÇΩ"
            rate_text = "1 ‚ÇΩ = 1 ‚ÇΩ"
        
        await message.answer(
            f"üíé <b>–î–µ—Ç–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∞: {rub_amount.normalize()} ‚ÇΩ\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ: {amount_text}\n"
            f"‚Ä¢ –ö—É—Ä—Å: {rate_text}\n\n"
            "–î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @Coin_var\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
            f"\n<code>{message.from_user.id} - {rub_amount.normalize()} ‚ÇΩ ‚Üí {amount_text}</code>",
            reply_markup=contact_operator_kb(currency)
        )
        
    except (ValueError, InvalidOperation):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 150.5)")

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@router.message(F.successful_payment)
async def successful_payment_handler(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (Stars –∏ –º–∞–π–Ω–∏–Ω–≥)"""
    try:
        payload = message.successful_payment.invoice_payload
        user_id = message.from_user.id
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Stars
        if payload.startswith('stars_'):
            parts = payload.split('_')
            payload_user_id = parts[1]
            amount = int(parts[2])
            currency = parts[3] if len(parts) > 3 else 'MICO'
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è user_id
            if int(payload_user_id) != user_id:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
                
            # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            if currency == 'MICO':
                await DB.add_balance(user_id, amount)
            else:
                rub_amount = amount / 2000 * 20  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MICO –æ–±—Ä–∞—Ç–Ω–æ –≤ RUB –ø–æ –ø—Ä–∏–º–µ—Ä–Ω–æ–º—É –∫—É—Ä—Å—É
                await DB.add_rub_balance(user_id, float(rub_amount))
                
            await DB.add_transaction(
                user_id=user_id,
                amount=float(amount),
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Stars ({currency})",
                additional_info=payload
            )
            
            await message.answer(
                f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} {currency} —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ!\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
                reply_markup=back_to_menu_kb()
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMINS_ID:
                try:
                    await bot.send_message(
                        admin_id,
                        f"üí∞ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Stars\n"
                        f"üë§ ID: {user_id}\n"
                        f"üíé –°—É–º–º–∞: {amount} {currency}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –º–∞–π–Ω–∏–Ω–≥–∞
        elif payload.startswith(f"user_{user_id}_stars_199"):
            await DB.add_mining(user_id, 1)
            kb = InlineKeyboardBuilder()
            kb.button(text='üöÄ –ú–∞–π–Ω–∏–Ω–≥', callback_data='mining')
            await message.answer(
                "üöÄ –ú–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å $MICO –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                "–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –º–µ–Ω—é –º–∞–π–Ω–∏–Ω–≥–∞, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–æ—Ö–æ–¥–æ–º!",
                reply_markup=kb.as_markup()
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMINS_ID:
                try:
                    await bot.send_message(
                        admin_id,
                        f"‚õèÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞–π–Ω–∏–Ω–≥\n"
                        f"üë§ ID: {user_id}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞: {payload}")
            await message.answer("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        error_code = hash(str(e)) % 10000
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            f"–ö–æ–¥ –æ—à–∏–±–∫–∏: PAY-{error_code}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMINS_ID:
            try:
                await bot.send_message(
                    admin_id,
                    f"üî• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞\n"
                    f"üë§ ID: {user_id}\n"
                    f"üìù Payload: {payload}\n"
                    f"üö® –û—à–∏–±–∫–∞: {str(e)}\n"
                    f"üõ† –ö–æ–¥: PAY-{error_code}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –∞–¥–º–∏–Ω—É: {e}")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def select_currency_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üíé $MICO", callback_data="deposit_currency_MICO")
    kb.button(text="‚ÇΩ –†—É–±–ª–∏", callback_data="deposit_currency_RUB")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_menu")
    kb.adjust(2, 1)
    return kb.as_markup()

def deposit_methods_kb(currency: str):
    kb = InlineKeyboardBuilder()
    if currency == 'MICO':
        kb.button(text="‚≠êÔ∏è Telegram Stars", callback_data="deposit_stars")
    kb.button(text="üíµ USDT (CryptoBot)", callback_data="deposit_cryptobot")
    kb.button(text="APay", callback_data="deposit_apays")  #deposit_rub
    # kb.button(text="XPAY", callback_data="deposit_xpay")  #deposit_rub
    kb.button(text="üíé TON", callback_data="ton_deposit")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="select_deposit_menu")
    if currency == 'MICO':
        kb.adjust(2, 2, 1)
    else:
        kb.adjust(1, 2, 1)
    return kb.as_markup()

def back_to_deposit_kb(currency: str):
    kb = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"deposit_currency_{currency}")]]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def confirm_stars_deposit_kb(amount_mico: int, stars_amount: Decimal, currency: str):
    kb = [
        [InlineKeyboardButton(
            text=f"‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å {stars_amount.normalize()} Stars", 
            callback_data=f"confirm_stars_{amount_mico}_{stars_amount}_{currency}"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"deposit_currency_{currency}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def confirm_crypto_deposit_kb(amount: Decimal, usdt_amount: Decimal, currency: str):
    kb = [
        [InlineKeyboardButton(
            text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
            callback_data=f"confirm_crypto_{amount}_{usdt_amount}_{currency}"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"deposit_currency_{currency}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def contact_operator_kb(currency: str):
    kb = [
        [InlineKeyboardButton(text="üìû –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", url="https://t.me/Coin_var")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"deposit_currency_{currency}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def back_to_menu_kb():
    kb = [[InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=kb)