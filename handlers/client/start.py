from untils.Imports import *
from .client import *
from .states import *

@router.message(F.text.startswith('/start'))
async def start_handler(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.username
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
    args = message.text.split()
    if len(args) > 1 and args[1].startswith('contest_'):
        contest_id = int(args[1].split('_')[1])
        await handle_contest_participation(message, bot, contest_id, user_id, username)
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    not_subscribed = await check_channel_subscriptions(user_id, bot)
    if not_subscribed:
        await handle_not_subscribed(message, not_subscribed)
        return
    
    # 3. –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await state.clear()
    user = await DB.select_user(user_id)
    
    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start
    referrer_id, check_uid, ref_user_id = parse_start_parameters(args)
    await state.update_data(reffer_id=ref_user_id) if ref_user_id else None
    
    # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.chat.type == 'private':
        # 5.1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user:
            await register_new_user(message, bot, referrer_id, check_uid, ref_user_id)
        
        # 5.2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —á–µ–∫–æ–≤
        if ref_user_id and check_uid:
            await handle_check_referral(message, bot, check_uid, ref_user_id, state)
            return
        
        # 5.3. –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞
        if check_uid:
            await handle_check_activation(message, bot, check_uid, ref_user_id, state)
            return
        
        # 5.4. –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await DB.update_user(user_id, username)
        await message.answer(
            "üíé <b>PR MIT</b> - <em>–º–æ—â–Ω—ã–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</em>\n\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            reply_markup=menu_kb(user_id))
    
    # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
    elif message.chat.type in ['group', 'supergroup'] and not check_uid:
        await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤ =====

async def handle_contest_participation(message: types.Message, bot: Bot, contest_id: int, user_id: int, username: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start"""
    print(f"\n=== START HANDLE PARTICIPATION ===")
    print(f"contest_id: {contest_id}, user_id: {user_id}, username: {username}")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—É—Ä—Å–µ
        print("\n[1] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞...")
        contest = await Contest.get_contest(contest_id)
        print(f"contest data: {contest}")
        
        if not contest:
            print("–ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await message.answer("–ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=back_menu_kb(user_id))
            return

        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        print("\n[2] –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞...")
        channel_url = contest[1]  # https://t.me/concest1
        message_id = contest[-2]  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
        contest_text = contest[-1]  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        channel_username = channel_url.replace("https://t.me/", "").replace("@", "")
        print(f"–ö–∞–Ω–∞–ª: @{channel_username}, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è
        print("\n[3] –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è...")
        conditions = {}
        try:
            conditions = json.loads(contest[6]) if contest[6] else {}
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—Å–ª–æ–≤–∏–π: {e}")
        
        auto_conditions = conditions.get("auto_conditions", [])
        additional_channels = conditions.get("additional_channels", [])
        print(f"–£—Å–ª–æ–≤–∏—è: {auto_conditions}")
        print(f"–î–æ–ø. –∫–∞–Ω–∞–ª—ã: {additional_channels}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
        if "sub_channel" in auto_conditions:
            print("\n[3.1] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª...")
            try:
                chat_member = await bot.get_chat_member(
                    chat_id=f"@{channel_username}", 
                    user_id=user_id
                )
                print(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_member.status}")
                
                if chat_member.status not in ['member', 'administrator', 'creator']:
                    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
                    await message.answer(
                        f"–î–ª—è —É—á–∞—Å—Ç–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {channel_url}",
                        reply_markup=back_menu_kb(user_id)
                    )
                    return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª",
                    reply_markup=back_menu_kb(user_id))
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        if additional_channels:
            print("\n[3.2] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã...")
            for channel in additional_channels:
                channel_username2 = channel.replace("https://t.me/", "").replace("@", "")
                try:
                    chat_member = await bot.get_chat_member(
                        chat_id=f"@{channel_username2}", 
                        user_id=user_id
                    )
                    print(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ {channel_username2}: {chat_member.status}")
                    
                    if chat_member.status not in ['member', 'administrator', 'creator']:
                        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel}")
                        await message.answer(
                            f"–î–ª—è —É—á–∞—Å—Ç–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {channel}",
                            reply_markup=back_menu_kb(user_id))
                        return
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel}: {e}")
                    await message.answer(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: {channel}",
                        reply_markup=back_menu_kb(user_id))
                    return

        # if 'is_bot_user' in auto_conditions:
        #     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –±–æ—Ç–∞
        #     if not await DB.select_user(user_id):
        #         await message.answer(
        #             "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
        #             reply_markup=back_menu_kb(user_id))
        #         return
                
        if 'is_active_user' in auto_conditions:
            count = (await DB.get_task_counts(user_id))[0]
            if count < 15:
                await message.answer(
                    '–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π. –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞\n\n'
                    '<b>–ê–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–ª –±–æ–ª–µ–µ 15 –∑–∞–¥–∞–Ω–∏–π</b>',
                    reply_markup=back_menu_kb(user_id))
                return 
            

        # 4. –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        print("\n[4] –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞...")
        if not await Contest.add_participant(contest_id, user_id, username):
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç")
            await message.answer(
                "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ",
                reply_markup=back_menu_kb(user_id)
            )
            return

        # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        print("\n[5] –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        participants_count = await Contest.get_participants_count(contest_id)
        print(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}")
        
        # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω–∫—É—Ä—Å–∞
        print("\n[6] –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω–∫—É—Ä—Å–∞...")
        if not contest_text:
            print("–¢–µ–∫—Å—Ç –∫–æ–Ω–∫—É—Ä—Å–∞ –ø—É—Å—Ç!")
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=back_menu_kb(user_id))
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        updated_text = update_participants_count(contest_text, participants_count)
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{updated_text}")

        # 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        print("\n[7] –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ...")
        try:
            if not updated_text.strip():
                raise ValueError("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" (–≤—ã–Ω–æ—Å–∏–º —ç—Ç–æ –¥–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            bot_username = (await bot.get_me()).username
            participate_kb = InlineKeyboardBuilder()
            participate_kb.button(
                text="üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", 
                url=f"https://t.me/{bot_username}?start=contest_{contest_id}"
            )
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
                await bot.edit_message_text(
                    chat_id=f"@{channel_username}",
                    message_id=message_id,
                    text=updated_text,
                    reply_markup=participate_kb.as_markup()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                )
            except Exception as text_edit_error:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: {text_edit_error}")
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ)
                    await bot.edit_message_caption(
                        chat_id=f"@{channel_username}",
                        message_id=message_id,
                        caption=updated_text,
                        reply_markup=participate_kb.as_markup()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                    )
                except Exception as caption_edit_error:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å: {caption_edit_error}")
                    try:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if contest.get("image_path") and os.path.exists(contest["image_path"]):
                            with open(contest["image_path"], 'rb') as photo:
                                new_message = await bot.send_photo(
                                    chat_id=f"@{channel_username}",
                                    photo=types.BufferedInputFile(photo.read(), filename="contest.jpg"),
                                    caption=updated_text,
                                    reply_markup=participate_kb.as_markup()
                                )
                        else:
                            new_message = await bot.send_message(
                                chat_id=f"@{channel_username}",
                                text=updated_text,
                                reply_markup=participate_kb.as_markup()
                            )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        await Contest.update_contest_message_id(contest_id, new_message.message_id)
                        print("–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π")
                    except Exception as send_error:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {send_error}")
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ")

            await Contest.update_contest_message_text(contest_id, updated_text)
            print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π!")
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
                reply_markup=back_menu_kb(user_id)
            )
        except Exception as e:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)",
                reply_markup=back_menu_kb(user_id))
            return

        # 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print("\n[8] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
        await message.answer(
            "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å!",
            reply_markup=back_menu_kb(user_id))
        print("=== –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û ===")
            
    except Exception as e:
        print(f"\n!!! –û–®–ò–ë–ö–ê: {e}\n{traceback.format_exc()}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è",
            reply_markup=back_menu_kb(user_id))

def update_participants_count(text: str, count: int) -> str:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–Ω–∫—É—Ä—Å–∞"""
    lines = text.split('\n')
    for i, line in enumerate(lines):
        if "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:" in line:
            parts = line.split("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
            if len(parts) > 1:
                lines[i] = f"{parts[0]}–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}"
                break
    return '\n'.join(lines)

# ===== –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====

async def check_channel_subscriptions(user_id: int, bot: Bot) -> list:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
    channels = await DB.all_channels_op()
    not_subscribed = []
    
    for channel in channels:
        channel_id = channel[0]
        try:
            chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                not_subscribed.append(channel)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e} \n\n {channel} \n\n ")
    
    return not_subscribed

async def handle_not_subscribed(message: types.Message, not_subscribed: list):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    keyboard = InlineKeyboardBuilder()
    for channel in not_subscribed:
        keyboard.add(InlineKeyboardButton(
            text=f"üì¢ {channel[1]}",
            url=f"https://t.me/{channel[0].replace('@', '')}"
        ))
    keyboard.add(InlineKeyboardButton(
        text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
        callback_data="op_proverka"
    ))
    keyboard.adjust(1)
    await message.answer(
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:",
        reply_markup=keyboard.as_markup()
    )

def parse_start_parameters(args: list) -> tuple:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã /start –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (referrer_id, check_uid, ref_user_id)"""
    referrer_id = None
    check_uid = None
    ref_user_id = None
    
    if len(args) > 1:
        param = args[1]
        if param.startswith("check_"):
            check_uid = param[len("check_"):]
        elif param.startswith("ref_"):
            ref_parts = param.split("_")
            if len(ref_parts) == 3:
                check_uid = ref_parts[1]
                ref_user_id = int(ref_parts[2])
        else:
            referrer_id = int(param)
    
    return referrer_id, check_uid, ref_user_id

async def register_new_user(message: types.Message, bot: Bot, referrer_id: int, check_uid: str, ref_user_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏"""
    user_id = message.from_user.id
    username = message.from_user.username
    await DB.add_user(user_id, username)
    await DB.increment_all_users()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram Premium
    try:
        is_premium = False  # await check_premium(username, bot)
    except:
        is_premium = False
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
    if check_uid and not ref_user_id:
        await handle_check_creator_referral(user_id, username, bot, check_uid, is_premium)
    elif referrer_id:
        await handle_regular_referral(user_id, username, bot, referrer_id, is_premium)
    elif ref_user_id:
        await handle_check_referral_registration(user_id, username, bot, ref_user_id, is_premium)

async def handle_check_creator_referral(user_id: int, username: str, bot: Bot, check_uid: str, is_premium: bool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —á–µ–∫ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–µ–∫–∞)"""
    check = await DB.get_check_by_uid(check_uid)
    if check:
        creator_id = check[2]
        mit_reward = 500 * 2 if is_premium else 500
        await DB.update_user_referrer_id(user_id, creator_id)
        await DB.add_balance(creator_id, mit_reward)
        await DB.add_star(creator_id, 1)
        await DB.add_star(user_id, 1)
        await DB.record_referral_earnings(referrer_id=creator_id, referred_user_id=user_id, amount=mit_reward)
        
        await send_message_safe(bot, creator_id,
                            f"üë§ <a href='t.me/{username}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> c ID {user_id} –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–º—É —á–µ–∫—É –∏ —Å—Ç–∞–ª –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.\n\n"
                            f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {mit_reward} MitCoin –∏ 1‚≠êÔ∏è –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                            f"{' üéâ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!' if is_premium else ''}",
                            reply_markup=back_menu_kb(user_id))

async def handle_regular_referral(user_id: int, username: str, bot: Bot, referrer_id: int, is_premium: bool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
    mit_reward = 500 * 2 if is_premium else 500
    await DB.update_user_referrer_id(user_id, referrer_id)
    await DB.add_balance(referrer_id, mit_reward)
    await DB.add_star(referrer_id, 1)
    await DB.add_star(user_id, 1)
    await DB.record_referral_earnings(referrer_id=referrer_id, referred_user_id=user_id, amount=mit_reward)
    
    await send_message_safe(bot, referrer_id,
                        f"üë§ <a href='t.me/{username}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> c ID {user_id} –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–º—É —á–µ–∫—É –∏ —Å—Ç–∞–ª –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.\n\n"
                        f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {mit_reward} MitCoin –∏ 1‚≠êÔ∏è –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                        f"{' üéâ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!' if is_premium else ''}",
                        reply_markup=back_menu_kb(user_id))

async def handle_check_referral_registration(user_id: int, username: str, bot: Bot, ref_user_id: int, is_premium: bool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —á–µ–∫–æ–≤"""
    mit_reward = 500 * 2 if is_premium else 500
    await DB.update_user_referrer_id(user_id, ref_user_id)
    await DB.add_balance(ref_user_id, mit_reward)
    await DB.add_star(ref_user_id, 1)
    await DB.add_star(user_id, 1)
    await DB.record_referral_earnings(referrer_id=ref_user_id, referred_user_id=user_id, amount=mit_reward)
    
    await send_message_safe(bot, ref_user_id,
                        f"üë§ <a href='t.me/{username}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> c ID {user_id} –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–º—É —á–µ–∫—É –∏ —Å—Ç–∞–ª –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.\n\n"
                        f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {mit_reward} MitCoin –∏ 1‚≠êÔ∏è –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                        f"{' üéâ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!' if is_premium else ''}",
                        reply_markup=back_menu_kb(user_id))

async def handle_check_referral(message: types.Message, bot: Bot, check_uid: str, ref_user_id: int, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ"""
    user_id = message.from_user.id
    check = await DB.get_check_by_uid(check_uid)
    if not check:
        await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_menu_kb(user_id))
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
    check_id, uid, creator_id, check_type, check_sum, check_amount, check_description, \
    locked_for_user, password, OP_id, max_amount, ref_bonus, ref_fund, OP_name = check
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥
    if ref_fund <= 0:
        await message.answer("‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.", reply_markup=back_menu_kb(user_id))
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    if OP_id:
        try:
            chat = await bot.get_chat(OP_id)
            user_channel_status = await bot.get_chat_member(chat_id=OP_id, user_id=user_id)
            if user_channel_status.status not in ['member', 'administrator', 'creator']:
                await message.answer(f"üí∏ <b>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ —á–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:</b> {OP_id}\n\n<i>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</i>", reply_markup=back_menu_kb(user_id))
                return
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª - {e}')
            await message.answer(f'üò¢ <b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</b>\n', reply_markup=back_menu_kb(user_id))
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if password:
        await message.answer("üîë <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å:</b>", reply_markup=back_menu_kb(user_id))
        await state.set_state(checks.check_password1)
        await state.update_data(check_uid=check_uid)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram Premium
    is_premium = False  # await check_premium(message.from_user.username, bot)
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞
    await DB.add_balance(user_id, check_sum)
    await DB.process_check_activation(check_uid)
    await DB.add_activated_check(user_id, check_uid)
    await DB.check_fund_minus(check_id)
    
    # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
    referral_amount = (check_sum * ref_bonus) // 100
    if is_premium:
        referral_amount *= 2
    
    await DB.add_balance(ref_user_id, referral_amount)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä—É —á–µ–∫–∞
    bot_username = (await bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start=ref_{check_uid}_{user_id}"
    await message.answer(
        f"ü•≥ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —á–µ–∫ –Ω–∞ {check_sum} MitCoin!</b>\n\n"
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n{referral_link}\n\n"
        f"üí∏ <b>–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ {ref_bonus}% –æ—Ç —Å—É–º–º—ã —á–µ–∫–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>",
        reply_markup=back_menu_kb(user_id)
    )
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    await send_message_safe(
        bot,
        ref_user_id,
        f"üí∏ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —á–µ–∫!</b>\n\n"
        f"üí∞ <b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {referral_amount} MitCoin –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞.</b>"
        f"{' üéâ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!' if is_premium else ''}",
        reply_markup=back_menu_kb(user_id)
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —á–µ–∫–∞ –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —Ñ–æ–Ω–¥–∞
    if ref_fund - 1 == 0:
        await send_message_safe(
            bot,
            creator_id,
            f"‚ö†Ô∏è <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ –¥–ª—è —á–µ–∫–∞ {check_uid} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.</b>\n\n"
            f"üíµ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥", callback_data=f'refill_ref_fund_{check_id}')
            ]])
        )

async def handle_check_activation(message: types.Message, bot: Bot, check_uid: str, ref_user_id: int, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞"""
    user_id = message.from_user.id
    username = message.from_user.username
    name = message.from_user.full_name
    usname = f'@{username}' if username else name
    
    check = await DB.get_check_by_uid(check_uid)
    if not check or await DB.is_check_activated(user_id, check_uid) or check[2] == user_id:
        await message.answer("‚ùå <b>–î–∞–Ω–Ω—ã–π —á–µ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º:</b>\n\n<i>1) –≠—Ç–æ—Ç —á–µ–∫ –±—ã–ª —Å–æ–∑–¥–∞–Ω –í–∞–º–∏\n2) –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π —á–µ–∫\n3) –ß–µ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</i>", reply_markup=back_menu_kb(user_id))
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
    check_id, uid, creator_id, check_type, check_sum, check_amount, check_description, \
    locked_for_user, password, OP_id, max_amount, ref_bonus, ref_fund, OP_name = check
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ
    check_info = f"üíé <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–∫–µ:</b>\n\n" \
                f"üí∏ –°—É–º–º–∞: {check_sum} MitCoin\n" \
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {check_description if check_description else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
    
    if OP_id:
        try:
            chat = await bot.get_chat(OP_id) 
            check_info += f"üîó –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: <a href='https://t.me/{chat.username}'>{chat.title}</a>\n"
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}')
            check_info += "üîó –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
    
    if password:
        check_info += f"üîë –ü–∞—Ä–æ–ª—å: –¢—Ä–µ–±—É–µ—Ç—Å—è\n"
    
    await message.answer(check_info, reply_markup=back_menu_kb(user_id))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if check_description and check_description[0] == '@' and check_description != f'@{usname}':
        await message.answer("‚ùå <b>–≠—Ç–æ—Ç —á–µ–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>", reply_markup=back_menu_kb(user_id))
        return
    elif check_description and check_description != user_id:
        await message.answer("‚ùå <b>–≠—Ç–æ—Ç —á–µ–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>", reply_markup=back_menu_kb(user_id))
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    if OP_id:
        try:
            chat = await bot.get_chat(OP_id)
            user_channel_status = await bot.get_chat_member(chat_id=OP_id, user_id=user_id)
            if user_channel_status.status not in ['member', 'administrator', 'creator']:
                kb = InlineKeyboardBuilder()
                kb.row(InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url=f'https://t.me/{chat.username}'))
                kb.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_menu'))
                kb.adjust(2)
                await message.answer(
                    f"üí∏ <b>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ —á–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: @{chat.username}\n\n"
                    "<i>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</i>",
                    reply_markup=kb.as_markup()
                )
                return
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª - {e}')
            await message.answer('üò¢ <b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</b>', reply_markup=back_menu_kb(user_id))
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if password:
        await message.answer("üîë <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å:</b>", reply_markup=back_menu_kb(user_id))
        await state.set_state(checks.check_password1)
        await state.update_data(check_uid=check_uid)
        return
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞
    await DB.add_balance(user_id, check_sum)
    await DB.process_check_activation(check_uid)
    await DB.add_activated_check(user_id, check_uid)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    if ref_user_id and ref_bonus:
        referral_amount = (check_sum * ref_bonus) // 100
        await DB.add_balance(ref_user_id, referral_amount)
        await send_message_safe(bot, ref_user_id, f"üí∏ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {referral_amount} MitCoin –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞.")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —á–µ–∫–∞
    await send_message_safe(bot, creator_id, f"üí∏ –í–∞—à —á–µ–∫ –Ω–∞ {check_sum} MitCoin –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {usname}.")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–¥–ª—è –º—É–ª—å—Ç–∏-—á–µ–∫–æ–≤)
    if check_type == 2 and ref_bonus and not ref_user_id:
        bot_username = (await bot.get_me()).username
        referral_link = f"https://t.me/{bot_username}?start=ref_{check_uid}_{user_id}"
        await message.answer(
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n{referral_link}\n\n"
            f"üí∏ <b>–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ {ref_bonus}% –æ—Ç —Å—É–º–º—ã —á–µ–∫–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>",
            reply_markup=back_menu_kb(user_id)
        ) 
    
    await message.answer(f"ü•≥ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–∫ –Ω–∞ {check_sum} MitCoin</b>", reply_markup=back_menu_kb(user_id))


@router.message(checks.check_password1)
async def handle_check_password(message: types.Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    check_uid = user_data.get("check_uid")
    data = await state.get_data()
    ref_user_id = data.get("reffer_id")
    name = message.from_user.full_name
    usname = message.from_user.username
    if usname is None:
        usname = name
    else:
        usname = f'@{usname}'

    if not check_uid:
        await message.answer("‚ùå <i>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ...</i>", reply_markup=back_menu_kb(user_id))
        await state.clear()
        return

    check = await DB.get_check_by_uid(check_uid)
    if not check:
        await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", reply_markup=back_menu_kb(user_id))
        await state.clear()
        return
    check_id = check[0]  # check_id (INTEGER)
    uid = check[1]  # uid (TEXT)
    user_id = check[2]  # user_id (INTEGER)
    check_type = check[3]  # type (INTEGER)
    check_sum = check[4]  # sum (INTEGER)
    check_amount = check[5]  # amount (INTEGER)
    check_description = check[6]  # description (TEXT)
    locked_for_user = check[7]  # locked_for_user (INTEGER)
    password = check[8]  # password (TEXT)
    OP_id = check[9]  # OP_id (TEXT)
    max_amount = check[10]  # max_amount (INTEGER)
    ref_bonus = check[11]  # ref_bonus (INTEGER)
    ref_fund = check[12]  # ref_fund (INTEGER)
    OP_name = check[13]  # OP_name (TEXT)

    if message.text == password:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        await DB.add_balance(message.from_user.id, check_sum)
        await DB.process_check_activation(check_uid)
        await DB.add_activated_check(user_id=message.from_user.id, uid=check_uid)

        # –ï—Å–ª–∏ —á–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        if ref_user_id and ref_bonus:
            referral_bonus = ref_bonus  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ ref_bonus
            referral_amount = (check_sum * referral_bonus) // 100
            await DB.add_balance(ref_user_id, referral_amount)
            await send_message_safe(bot, ref_user_id, f"üí∏ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {referral_amount} MitCoin –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —á–µ–∫–∞
            await send_message_safe(bot, user_id, f"üí∏ –í–∞—à —á–µ–∫ –Ω–∞ {check[4]} MitCoin –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {usname}.")

            # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot_username = (await bot.get_me()).username
            referral_link = f"https://t.me/{bot_username}?start=ref_{check_uid}_{message.from_user.id}"
            await message.answer(
                f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n{referral_link}\n\n"
                f"üí∏ <b>–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ {referral_bonus}% –æ—Ç —Å—É–º–º—ã —á–µ–∫–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>",
                reply_markup=back_menu_kb(user_id)
            )

        await message.answer(f"ü•≥ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–∫ –Ω–∞ {check_sum} MitCoin</b>", reply_markup=back_menu_kb(user_id))
        await state.clear()
    else:
        await message.answer("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>", reply_markup=back_menu_kb(user_id))
        return 
