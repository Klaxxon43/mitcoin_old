from utils.Imports import *
from .client import *
from .states import *

# ============ –†–µ–ø–æ—Ä—Ç—ã ============

@router.callback_query(F.data.startswith("report_"))
async def handle_report(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split("_")

    if len(parts) == 3:
        # –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Äî –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω
        task_type, task_id = parts[1], int(parts[2])

        buttons_by_type = {
            "channel": [
                ("–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "channel|not|exist")
            ],
            "chat": [
                ("–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "chat|not|exist")
            ],
            "reaction": [
                ("–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "channel|not|exist"),
                ("–¢–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "post|not|exist"),
                ("–†–µ–∞–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "reaction|unavailable")
            ],
            "link": [
                ("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "bot|not|found")
            ],
            "boost": [
                ("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "channel|not|found")
            ],
            "comment": [
                ("–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "channel|not|exist"),
                ("–¢–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "post|not|exist")
            ]
        }

        builder = InlineKeyboardBuilder()
        for text, code in buttons_by_type.get(task_type, []):
            builder.add(InlineKeyboardButton(
                text=text,
                callback_data=f"report_{task_type}_{task_id}_reason_{code}"
            ))

        builder.add(InlineKeyboardButton(
            text="–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞",
            callback_data=f"report_{task_type}_{task_id}_other"
        ))
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chaneltask_{task_id}"))
        builder.adjust(1)

        await callback.message.edit_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–µ–ø–æ—Ä—Ç–∞:", reply_markup=builder.as_markup())

    elif len(parts) == 5 and parts[3] == "reason":
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã
            task_type, task_id, reason_code = parts[1], int(parts[2]), parts[4]
            user_id = callback.from_user.id
            task = await DB.get_task_by_id(task_id)
            if not task:
                await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return

            reasons = {
                'channel|not|exist': "–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                'chat|not|exist': "–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                'post|not|exist': "–¢–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                'reaction|unavailable': "–†–µ–∞–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                'bot|not|found': "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                'channel|not_found': "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
            reason_text = reasons.get(reason_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")

            try:
                chat = await bot.get_chat(task[2])
                title = chat.title
                link = chat.invite_link or f"https://t.me/{chat.username}" if chat.username else "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            except:
                title = "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"
                link = "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

            bonus = 1
            builder = InlineKeyboardBuilder()
            builder.add(
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"accept_report_{task_id}_{user_id}_{reason_code}_{bonus}"
                ))
            builder.add(
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_report_{user_id}"
                )
            )
            builder.adjust(1)

            msg = (
                f"‚ö†Ô∏è <b>–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
                f"<b>–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è:</b> {task_type}\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason_text}\n"
                f"<b>ID –∑–∞–¥–∞–Ω–∏—è:</b> {task_id}\n"
                f"<b>ID —Ü–µ–ª–∏:</b> {task[2]}\n"
                f"<b>–°—Å—ã–ª–∫–∞:</b> {link}\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{callback.from_user.username or '‚Äî'} (ID: {user_id})"
            )
            for admin in ADMINS_ID:
                try:
                    await bot.send_message(admin, msg, reply_markup=builder.as_markup())
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin}: {e}")

            await callback.answer("–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", show_alert=True)
            await callback.message.delete()

            await DB.skip_task(user_id, task_id)
            all_tasks = task_cache.get('all_tasks', [])
            tasks = await get_available_tasks(user_id, all_tasks)

            if tasks:
                random.shuffle(tasks)
                kb = await generate_tasks_keyboard_chanel(tasks, bot)
                await callback.message.answer(
                    "üì¢ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n\nüé¢ –ö–∞–Ω–∞–ª—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                    "‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}",
                    reply_markup=kb
                )
            else:
                await callback.message.answer(
                    "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                    reply_markup=back_work_menu_kb(user_id)
                )
        except Exception as e:
            print(e)
            
    elif len(parts) == 4 and parts[3] == "other":
        await state.set_state(ReportStates.waiting_description)
        await state.update_data(task_id=int(parts[2]), task_type=parts[1])
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")


@router.message(ReportStates.waiting_description)
async def report_other_description(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    task_id = data.get("task_id")
    task_type = data.get("task_type")
    user_id = message.from_user.id
    description = message.text

    task = await DB.get_task_by_id(task_id)
    if not task:
        await message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return

    try:
        chat = await bot.get_chat(task[2])
        title = chat.title
        link = chat.invite_link or f"https://t.me/{chat.username}" if chat.username else "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    except:
        title = "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"
        link = "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

    bonus = 0
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"accept_report_{task_id}_{user_id}_custom_{bonus}"
        ),
        InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"reject_report_{user_id}"
        )
    )

    msg = (
        f"‚ö†Ô∏è <b>–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
        f"<b>–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è:</b> {task_type}\n"
        f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {description}\n"
        f"<b>ID –∑–∞–¥–∞–Ω–∏—è:</b> {task_id}\n"
        f"<b>ID —Ü–µ–ª–∏:</b> {task[2]}\n"
        f"<b>–°—Å—ã–ª–∫–∞:</b> {link}\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
        f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{message.from_user.username or '‚Äî'} (ID: {user_id})"
    )

    for admin in ADMINS_ID:
        try:
            await bot.send_message(admin, msg, reply_markup=builder.as_markup())
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin}: {e}")    
    await message.answer("–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ!")
    await DB.skip_task(user_id, task_id)
    await state.clear()


@router.callback_query(F.data.startswith("accept_report_"))
async def accept_report_handler(callback: types.CallbackQuery, bot: Bot):
    parts = callback.data.split("_")
    task_id = int(parts[2])
    user_id = int(parts[3])
    reason_code = parts[4]
    bonus = int(parts[5])

    task = await DB.get_task_by_id(task_id)
    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    creator_id = task[1]
    await DB.delete_task(task_id)

    reason_text = {
        'channel_not_exist': "–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        'chat_not_exist': "–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        'post_not_exist': "–¢–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        'reaction_unavailable': "–†–µ–∞–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        'bot_not_found': "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        'channel_not_found': "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
        'custom': "–£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏—á–∏–Ω–∞"
    }.get(reason_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")

    try:
        if bonus == 1:
            await DB.add_balance(user_id, 1000)
            await bot.send_message(user_id, f"‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç –ø—Ä–∏–Ω—è—Ç\n–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ\n–ù–∞—á–∏—Å–ª–µ–Ω–æ +1000 –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        else:
            await bot.send_message(user_id, "‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç –ø—Ä–∏–Ω—è—Ç\n–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

        await bot.send_message(creator_id, f"‚ùå –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ (ID {task_id}) –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ\n–ü—Ä–∏—á–∏–Ω–∞: {reason_text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    await callback.message.delete()
    await callback.answer("–†–µ–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω")


@router.callback_query(F.data.startswith("reject_report_"))
async def reject_report_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = int(callback.data.split("_")[2])
    try:
        await bot.send_message(user_id, "‚ùå –í–∞—à —Ä–µ–ø–æ—Ä—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
    except:
        pass
    await callback.message.delete()
    await callback.answer("–†–µ–ø–æ—Ä—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω")