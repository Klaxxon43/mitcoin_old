from utils.Imports import *
from .client import *
from .states import *

async def parse_entity_reference(bot: Bot, reference: str, task_type: str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Å—ã–ª–∫—É/–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    try:
        if task_type in ["comment", "reaction"] and ":" in reference:
            channel_ref, post_id = reference.split(":", 1)
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ channel_ref
            try:
                # –í–∞—Ä–∏–∞–Ω—Ç 1: —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞
                if channel_ref.lstrip('-').isdigit():
                    chat = await bot.get_chat(int(channel_ref))
                # –í–∞—Ä–∏–∞–Ω—Ç 2: —ç—Ç–æ @username
                elif channel_ref.startswith('@'):
                    chat = await bot.get_chat(channel_ref)
                # –í–∞—Ä–∏–∞–Ω—Ç 3: —ç—Ç–æ t.me/username –∏–ª–∏ https://t.me/username
                elif 't.me/' in channel_ref:
                    username = channel_ref.split('t.me/')[-1].split('/')[0]
                    chat = await bot.get_chat(f"@{username}")
                # –í–∞—Ä–∏–∞–Ω—Ç 4: —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @
                else:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ username –±–µ–∑ @
                    try:
                        chat = await bot.get_chat(f"@{channel_ref}")
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–π ID
                        if channel_ref.lstrip('-').isdigit():
                            chat = await bot.get_chat(int(channel_ref))
                        else:
                            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª")
                
                return {
                    "id": chat.id,
                    "post_id": post_id,
                    "title": chat.title,
                    "username": f"@{chat.username}" if chat.username else None,
                    "invite_link": chat.invite_link,
                    "type": chat.type,
                    "raw_reference": reference
                }
            except Exception as e:
                return {
                    "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {e}",
                    "raw_reference": reference,
                    "channel_part": channel_ref,
                    "post_id": post_id
                }
        
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤
        elif task_type in ["channel", "chat", "boost"]:
            try:
                chat = await bot.get_chat(reference)
                return {
                    "id": chat.id,
                    "title": chat.title,
                    "username": f"@{chat.username}" if chat.username else None,
                    "invite_link": chat.invite_link,
                    "type": chat.type
                }
            except Exception as e:
                return {
                    "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}",
                    "raw_reference": reference
                }
        
        # –î–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –±–æ—Ç–æ–≤
        elif task_type == "link":
            try:
                user = await bot.get_chat(reference)
                if user.type != "private":
                    return {
                        "error": "–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º",
                        "raw_reference": reference
                    }
                return {
                    "id": user.id,
                    "username": f"@{user.username}" if user.username else None,
                    "first_name": user.first_name,
                    "is_bot": True
                }
            except Exception as e:
                return {
                    "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {e}",
                    "raw_reference": reference
                }
        
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        else:
            return {
                "raw_reference": reference,
                "error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"
            }
    
    except Exception as e:
        return {
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}",
            "raw_reference": reference
        }

async def format_entity_info(entity_info: dict, task_type: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    lines = []
    
    if "error" in entity_info:
        lines.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {entity_info['error']}")
        if "channel_part" in entity_info:
            lines.append(f"–ß–∞—Å—Ç—å –∫–∞–Ω–∞–ª–∞: {entity_info['channel_part']}")
        if "post_id" in entity_info:
            lines.append(f"ID –ø–æ—Å—Ç–∞: {entity_info['post_id']}")
        lines.append(f"–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞: {entity_info.get('raw_reference', '‚Äî')}")
        return "\n".join(lines)
    
    if task_type in ["channel", "chat", "boost"]:
        lines.append(f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {entity_info.get('title', '‚Äî')}")
        lines.append(f"üÜî ID: {entity_info.get('id', '‚Äî')}")
        lines.append(f"üë§ Username: {entity_info.get('username', '‚Äî')}")
        lines.append(f"üîó –°—Å—ã–ª–∫–∞: {entity_info.get('invite_link', '‚Äî')}")
        lines.append(f"üìù –¢–∏–ø: {entity_info.get('type', '‚Äî')}")
    
    elif task_type in ["comment", "reaction"]:
        lines.append(f"üìå –ö–∞–Ω–∞–ª: {entity_info.get('title', '‚Äî')}")
        lines.append(f"üÜî ID –∫–∞–Ω–∞–ª–∞: {entity_info.get('id', '‚Äî')}")
        lines.append(f"üìù ID –ø–æ—Å—Ç–∞: {entity_info.get('post_id', '‚Äî')}")
        lines.append(f"üë§ Username: {entity_info.get('username', '‚Äî')}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å username
        if entity_info.get('username'):
            username = entity_info['username'].lstrip('@')
            post_id = entity_info.get('post_id', '')
            lines.append(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: https://t.me/{username}/{post_id}")
        elif entity_info.get('id') and entity_info.get('post_id'):
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ username –∏—Å–ø–æ–ª—å–∑—É–µ–º ID (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö)
            lines.append(f"üîó –°—Å—ã–ª–∫–∞ (–ø–æ ID): https://t.me/c/{str(abs(entity_info['id']))}/{entity_info['post_id']}")
    
    elif task_type == "link":
        lines.append(f"ü§ñ –ë–æ—Ç: {entity_info.get('first_name', '‚Äî')}")
        lines.append(f"üÜî ID: {entity_info.get('id', '‚Äî')}")
        lines.append(f"üë§ Username: {entity_info.get('username', '‚Äî')}")
        if entity_info.get('username'):
            lines.append(f"üîó –°—Å—ã–ª–∫–∞: https://t.me/{entity_info['username'].lstrip('@')}")
    
    return "\n".join(lines)

async def get_work_function_by_type(task_type: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ —Ç–∏–ø—É"""
    return {
        "channel": 'work_channels',
        "chat": 'work_chats',
        "reaction": 'work_reactions',
        "link": 'work_links',
        "boost": 'work_boosts',
        "comment": 'work_comments'

    }.get(task_type, None)
# ============ –†–µ–ø–æ—Ä—Ç—ã ============

@router.callback_query(F.data.startswith("report_"))
async def handle_report(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split("_")

    if len(parts) == 3:
        # –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Äî –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω
        task_type, task_id = parts[1], int(parts[2])

        buttons_by_type = {
            "channel": [
                ("–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "channel|not|exist"),
                ("–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π", "channel|private")
            ],
            "chat": [
                ("–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "chat|not|exist"),
                ("–ß–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π", "chat|private")
            ],
            "reaction": [
                ("–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "channel|not|exist"),
                ("–¢–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "post|not|exist"),
                ("–†–µ–∞–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "reaction|unavailable"),
                ("–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π", "channel|private")
            ],
            "link": [
                ("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "bot|not|found"),
                ("–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "bot|not|working")
            ],
            "boost": [
                ("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "channel|not|found"),
                ("–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π", "channel|private")
            ],
            "comment": [
                ("–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "channel|not|exist"),
                ("–¢–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "post|not|exist"),
                ("–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π", "channel|private")
            ]
        }

        builder = InlineKeyboardBuilder()
        for text, code in buttons_by_type.get(task_type, []):
            builder.add(InlineKeyboardButton(
                text=text,
                callback_data=f"report_{task_type}_{task_id}_reason_{code}"
            ))

        builder.add(InlineKeyboardButton(
            text="–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞",
            callback_data=f"report_{task_type}_{task_id}_other"
        ))
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chaneltask_{task_id}"))
        builder.adjust(1)

        await callback.message.edit_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–µ–ø–æ—Ä—Ç–∞:", reply_markup=builder.as_markup())

    elif len(parts) == 5 and parts[3] == "reason":
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã
            task_type, task_id, reason_code = parts[1], int(parts[2]), parts[4]
            user_id = callback.from_user.id
            task = await DB.get_task_by_id(task_id)
            if not task:
                await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–Ω–æ—Å—Ç–∏
            entity_info = await parse_entity_reference(bot, task[2], task_type)
            entity_text = await format_entity_info(entity_info, task_type)

            reasons = {
                'channel|not|exist': "–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                'chat|not|exist': "–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                'post|not|exist': "–¢–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                'reaction|unavailable': "–†–µ–∞–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                'bot|not|found': "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                'channel|not|found': "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                'channel|private': "–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π",
                'chat|private': "–ß–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π",
                'bot|not|working': "–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            }
            reason_text = reasons.get(reason_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")

            bonus = 1
            builder = InlineKeyboardBuilder()
            builder.add(
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"accept_report_{task_id}_{user_id}_{reason_code}_{bonus}"
                ))
            builder.add(
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_report_{user_id}"
                )
            )
            builder.adjust(1)

            msg = (
                f"‚ö†Ô∏è <b>–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
                f"<b>–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è:</b> {task_type}\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason_text}\n"
                f"<b>ID –∑–∞–¥–∞–Ω–∏—è:</b> {task_id}\n\n"
                f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É—â–Ω–æ—Å—Ç–∏:</b>\n{entity_text}\n\n"
                f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{callback.from_user.username or '‚Äî'} (ID: {user_id})"
            )
            
            for admin in ADMINS_ID:
                try:
                    await bot.send_message(admin, msg, reply_markup=builder.as_markup())
                except Exception as e:
                    logger.info(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin}: {e}")

            await callback.message.delete()

            await DB.skip_task(user_id, task_id)
            all_tasks = task_cache.get('all_tasks', [])
            tasks = await get_available_tasks(user_id, all_tasks)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            builder = InlineKeyboardBuilder()
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
            work_func = await get_work_function_by_type(task_type)
            if work_func:
                builder.add(InlineKeyboardButton(
                    text=f"‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                    callback_data=f"work_{task_type}"
                ))
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –æ–±—â–µ–µ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π
            builder.add(InlineKeyboardButton(
                text="üìã –í—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π",
                callback_data="work_menu"
            ))
            
            builder.adjust(1)
            
            await callback.message.answer(
                "‚úÖ –†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π:",
                reply_markup=builder.as_markup()
            )
            
        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–ø–æ—Ä—Ç–∞: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–ø–æ—Ä—Ç–∞", show_alert=True)
            
    elif len(parts) == 4 and parts[3] == "other":
        await state.set_state(ReportStates.waiting_description)
        await state.update_data(task_id=int(parts[2]), task_type=parts[1])
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")


@router.message(ReportStates.waiting_description)
async def report_other_description(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    task_id = data.get("task_id")
    task_type = data.get("task_type")
    user_id = message.from_user.id
    description = message.text

    task = await DB.get_task_by_id(task_id)
    if not task:
        await message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–Ω–æ—Å—Ç–∏
    entity_info = await parse_entity_reference(bot, task[2], task_type)
    entity_text = await format_entity_info(entity_info, task_type)

    bonus = 0
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"accept_report_{task_id}_{user_id}_custom_{bonus}"
        ),
        InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"reject_report_{user_id}"
        )
    )

    msg = (
        f"‚ö†Ô∏è <b>–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
        f"<b>–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è:</b> {task_type}\n"
        f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {description}\n"
        f"<b>ID –∑–∞–¥–∞–Ω–∏—è:</b> {task_id}\n\n"
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É—â–Ω–æ—Å—Ç–∏:</b>\n{entity_text}\n\n"
        f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{message.from_user.username or '‚Äî'} (ID: {user_id})"
    )

    for admin in ADMINS_ID:
        try:
            await bot.send_message(admin, msg, reply_markup=builder.as_markup())
        except Exception as e:
            logger.info(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin}: {e}")    
    await message.answer("–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ!")
    await DB.skip_task(user_id, task_id)
    await state.clear()


@router.callback_query(F.data.startswith("accept_report_"))
async def accept_report_handler(callback: types.CallbackQuery, bot: Bot):
    parts = callback.data.split("_")
    task_id = int(parts[2])
    user_id = int(parts[3])
    reason_code = parts[4]
    bonus = int(parts[5])

    task = await DB.get_task_by_id(task_id)
    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    creator_id = task[1]
    await DB.delete_task(task_id)

    reason_text = {
        'channel|not|exist': "–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        'chat|not|exist': "–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        'post|not|exist': "–¢–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        'reaction|unavailable': "–†–µ–∞–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        'bot|not|found': "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        'channel|not|found': "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
        'channel|private': "–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π",
        'chat|private': "–ß–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π",
        'bot|not|working': "–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        'custom': "–£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏—á–∏–Ω–∞"
    }.get(reason_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")

    try:
        if bonus == 1:
            await DB.add_balance(user_id, 1000)
            await bot.send_message(user_id, f"‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç –ø—Ä–∏–Ω—è—Ç\n–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ\n–ù–∞—á–∏—Å–ª–µ–Ω–æ +1000 –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        else:
            await bot.send_message(user_id, "‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç –ø—Ä–∏–Ω—è—Ç\n–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

        await bot.send_message(creator_id, f"‚ùå –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ (ID {task_id}) –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ\n–ü—Ä–∏—á–∏–Ω–∞: {reason_text}")
    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    await callback.message.delete()
    await callback.answer("–†–µ–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω")


@router.callback_query(F.data.startswith("reject_report_"))
async def reject_report_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = int(callback.data.split("_")[2])
    try:
        await bot.send_message(user_id, "‚ùå –í–∞—à —Ä–µ–ø–æ—Ä—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
    except:
        pass
    await callback.message.delete()
    await callback.answer("–†–µ–ø–æ—Ä—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω")