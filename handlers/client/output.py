from .client import *

@router.callback_query(F.data == 'output_menu')
async def outputmenu(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí∞ RUB(–í–†–ï–ú–ï–ù–ù–û –ù–ï–î–û–°–¢–£–ü–ù–û)", callback_data="withdraw_rub"),
        InlineKeyboardButton(text="‚≠êÔ∏è Stars", callback_data="withdraw_stars"),
    ) 
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üí∏ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == 'output_menuF')
async def outputmenu(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']

    add_button1 = InlineKeyboardButton(text=f"üí≤ USDT", callback_data=f'usdt_output_menu')
    add_button2 = InlineKeyboardButton(text=f"RUB", callback_data=f'rub_output_menu') 
    add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='profile')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2], [add_button3]])
    await callback.message.edit_text(f'''
‚ö° –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–≤–æ–¥ –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä—É–±–ª—è—Ö <i>(—Ä—É–±–ª–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)</i>

<span class="tg-spoiler"><b>–õ–∏–º–∏—Ç—ã:</b>
–í—ã–≤–æ–¥ –≤ USDT - –æ—Ç 2.5$ 
–í—ã–≤–æ–¥ –≤ —Ä—É–±–ª—è—Ö - –æ—Ç 250‚ÇΩ</span>

‚ö† –í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:</b>
    ''', reply_markup=keyboard)

@router.callback_query(F.data == 'usdt_output_menuF')
async def outputusdtmenu(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']

    data_cbr = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
    usd_data = data_cbr['Valute']['USD']
    usd = usd_data['Value']
    usd = int(usd)
    user_usdt = rub_balance/usd

    logger.info(user_usdt)
    if user_usdt < 2.5:
        await callback.message.edit_text(f"üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>\n\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {round(user_usdt, 3)}$, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ <b>–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ 2.5$</b>", reply_markup=back_profile_kb())
        return

    add_button2 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button2]])
    await callback.message.edit_text(f'üí≥ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 2.5 –¥–æ {round(user_usdt, 3)} USDT</b>, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏', reply_markup=keyboard)
    await state.set_state(output.usdt)
    await state.update_data(usd=usd, user_usdt=user_usdt)

@router.message(output.usdt)
async def outputusdtmenu1(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        text = float(message.text)
    except ValueError:
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ</b>",reply_markup=back_menu_kb(user_id))
        return

    statedata = await state.get_data()
    usd = statedata['usd']
    user_usdt = statedata['user_usdt']

    if text < 2.5 or text > user_usdt:
        await message.answer(f'‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 2.5 –¥–æ {user_usdt} USDT</b>', reply_markup=back_menu_kb(user_id))
        return
    
    await state.clear()
    await state.set_state(output.usdt1)
    await state.update_data(usd=usd, user_usdt=user_usdt, amount=text)

    await message.answer(f'üëõ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–æ—à–µ–ª—ë–∫ <b>USDT (BEP20)</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤—ã–≤–æ–¥\n\n‚Äº <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∞–¥—Ä–µ—Å–µ –∫–æ—à–µ–ª—å–∫–∞/–Ω–µ–≤–µ—Ä–Ω–æ–π —Å–µ—Ç–∏ - —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ù–ï –±—É–¥–µ—Ç</b>', reply_markup=back_menu_kb(user_id))

@router.message(output.usdt1)
async def outputusdtmenu11(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    statedata = await state.get_data()
    usd = statedata['usd']
    amount = statedata['amount']

    try:
        wallet = str(message.text)
        if len(wallet) < 5 or len(wallet) > 50:
            await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞</b>", reply_markup=back_menu_kb(user_id))
            return
    except:
        await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞</b>",reply_markup=back_menu_kb(user_id))
        return

    usd = int(usd)
    sum = amount * usd
    sum = int(sum)

    await message.answer(f'ü•≥ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ {amount} USDT —Å–æ–∑–¥–∞–Ω–∞!</b>\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {sum}‚ÇΩ', reply_markup=back_menu_kb(user_id))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await DB.add_transaction(
        user_id=user_id,
        amount=amount,
        description="–≤—ã–≤–æ–¥ USDT",
        additional_info=None
    )
    await DB.add_rub_balance(user_id=user_id, amount=-sum)
    await DB.add_output(user_id=user_id, amount=amount, wallet=wallet, type=1)
    await state.clear()

@router.callback_query(F.data == 'rub_output_menu')
async def outputrubmenu(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']

    if rub_balance < 250:
        await callback.message.edit_text(f"üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>\n\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {rub_balance}‚ÇΩ, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ <b>–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 250‚ÇΩ –∏–ª–∏ –±–æ–ª–µ–µ</b>", reply_markup=back_profile_kb())
        return

    add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
    await callback.message.edit_text(f'üí≥ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 250‚ÇΩ –¥–æ {rub_balance}‚ÇΩ</b>, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)', reply_markup=keyboard)
    await state.set_state(output.rub)

@router.message(output.rub)
async def outputrubmenu1(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']
    try:
        text = int(message.text)
    except ValueError:
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>", reply_markup=back_menu_kb(user_id))
        return

    if text < 250 or text > rub_balance:
        await message.answer(f'‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 250‚ÇΩ –¥–æ {rub_balance}‚ÇΩ</b>', reply_markup=back_menu_kb(user_id))
        return

    await state.clear()
    await state.set_state(output.rub1)
    await state.update_data(amount=text)

    await message.answer(f'üëõ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä <b>–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –°–ë–ü), –∞ —Ç–∞–∫ –∂–µ <b>–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>\n\n‚Äº <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –Ω–æ–º–µ—Ä–µ –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞ - —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ù–ï –±—É–¥–µ—Ç</b>', reply_markup=back_menu_kb(user_id))

@router.message(output.rub1)
async def outputrubmenu11(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    statedata = await state.get_data()
    amount = statedata['amount']
    try:
        wallet = str(message.text)
        if len(wallet) > 100 or len(wallet) < 5:
            await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", reply_markup=back_menu_kb(user_id))
            return
    except:
        await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", reply_markup=back_menu_kb(user_id))
        return

    await message.answer(f'ü•≥ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω–∞!</b>\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {amount} —Ä—É–±–ª–µ–π', reply_markup=back_menu_kb(user_id))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await DB.add_transaction(
        user_id=user_id,
        amount=amount,
        description="–≤—ã–≤–æ–¥ RUB",
        additional_info=None
    )
    await DB.add_rub_balance(user_id=user_id, amount=-amount)
    await DB.add_output(user_id=user_id, amount=amount, wallet=wallet, type=2)
    await state.clear()