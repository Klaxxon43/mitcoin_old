from utils.Imports import *
from handlers.client.client import profile_handler  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è

pr = Router()

class PromoStates(StatesGroup):
    waiting_for_promo = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞

@pr.callback_query(F.data == "activatePromo")
async def ask_promo_name(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_promo"))
    
    await callback.message.edit_text(
        "üîπ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(PromoStates.waiting_for_promo)
    await callback.answer()


@pr.callback_query(F.data == "cancel_promo")
async def cancel_promo(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–ø—Ä—è–º—É—é
    await profile_handler(callback, bot=callback.bot)

@pr.message(PromoStates.waiting_for_promo)
async def process_promo_activation(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    promo_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
    promo = await Promo.get(promo_name)
    if not promo:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    try:
        end_time = datetime.strptime(promo[8], "%Y-%m-%d %H:%M:%S.%f")
    except ValueError:
        try:
            end_time = datetime.strptime(promo[8], "%Y-%m-%d %H:%M:%S")
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_name}: {e}")
            await Promo.delete(promo_name)
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω")
            await state.clear()
            return
    
    if end_time < datetime.now():
        await Promo.delete(promo_name)
        await message.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_id = message.from_user.id
    async with DB.con.cursor() as cur:
        await cur.execute('''
            SELECT 1 FROM activated_promocodes 
            WHERE user_id = ? AND promocode_id = ?
        ''', (user_id, promo[0]))
        if await cur.fetchone():
            await message.answer("‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
            await state.clear()
            return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    bonus_type = ""
    try:
        if promo[4] == "def_bal":
            await DB.add_balance(user_id, promo[3])
            bonus_type = "–±–∞–ª–∞–Ω—Å $MICO"
        elif promo[4] == "def_bal_rub":
            await DB.add_rub_balance(user_id, promo[3])
            bonus_type = "—Ä—É–±–ª–µ–≤—ã–π –±–∞–ª–∞–Ω—Å"
        elif promo[4] == "stars":  # –ù–æ–≤—ã–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            await DB.add_star(user_id, int(promo[3]))
            bonus_type = "–±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥"
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞")
            await state.clear()
            return
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
        async with DB.con.cursor() as cur:
            await cur.execute('''
                INSERT INTO activated_promocodes 
                (user_id, promocode_id, activation_time)
                VALUES (?, ?, CURRENT_TIMESTAMP)
            ''', (user_id, promo[0]))
            await DB.con.commit()
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        is_finished = await Promo.decrease_count(promo_name)
        
        if is_finished:
            try:
                await bot.send_message(
                    promo[1],
                    f"‚ö† –ü—Ä–æ–º–æ–∫–æ–¥ {promo_name} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!\n"
                    f"–í—Å–µ {promo[6]} –∞–∫—Ç–∏–≤–∞—Ü–∏–π –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            f"üíé –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo[3]:.0f} –Ω–∞ {bonus_type}!"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    finally:
        await state.clear()