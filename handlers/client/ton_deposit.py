from .client import *
from confIg import *
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_unique_code(length=8):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

async def check_ton_payment(expected_amount_nano: str, comment: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–µ—Ç–∏ TON —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"\nüîç [–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞] –û–∂–∏–¥–∞–µ–º: {expected_amount_nano} nanoTON, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{comment}'")
    
    try:
        expected = int(expected_amount_nano)
        tolerance = max(int(expected * 0.01), 1000000)
        print(f"üî¢ –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {expected - tolerance} - {expected + tolerance} nanoTON")
        
        params = {
            'address': str(TON_WALLET),
            'limit': 20,
            'api_key': str(TON_API_TOKEN),
            'archival': 'true'
        }
        
        print("üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        print(f" - –ê–¥—Ä–µ—Å: {TON_WALLET}")
        print(f" - –õ–∏–º–∏—Ç: 20")
        
        async with aiohttp.ClientSession() as session:
            try:
                response = await session.get(
                    f"{TON_API_BASE}getTransactions",
                    params=params,
                    timeout=20
                )
                
                print(f"üì° –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status}")
                
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {response.status}")
                    return False
                
                data = await response.json()
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(data.get('result', []))}")
                
                if not data.get('ok', False):
                    error_msg = data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {error_msg}")
                    return False
                
                for tx in data.get('result', []):
                    in_msg = tx.get('in_msg', {})
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
                    tx_value = 0
                    try:
                        value = in_msg.get('value')
                        if value is not None:
                            tx_value = int(float(value))
                    except (TypeError, ValueError):
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    tx_comment = str(in_msg.get('message', '')).strip()
                    
                    print(f"\nüîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:")
                    print(f" - –•—ç—à: {tx.get('hash')}")
                    print(f" - –°—É–º–º–∞: {tx_value} nanoTON")
                    print(f" - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{tx_comment}'")
                    print(f" - –î–∞—Ç–∞: {tx.get('utime')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    amount_match = abs(tx_value - expected) <= tolerance
                    comment_match = tx_comment == comment.strip()
                    
                    print(f"üîπ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—É–º–º—ã: {'‚úÖ' if amount_match else '‚ùå'}")
                    print(f"üîπ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {'‚úÖ' if comment_match else '‚ùå'}")
                    
                    if amount_match and comment_match:
                        print(f"\nüéâ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–µ–∂!")
                        print(f" - –ü–æ–ª—É—á–µ–Ω–æ: {tx_value} nanoTON")
                        print(f" - –û–∂–∏–¥–∞–ª–æ—Å—å: {expected} nanoTON (¬±{tolerance})")
                        print(f" - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{tx_comment}'")
                        print(f" - –í—Ä–µ–º—è: {tx.get('utime')}")
                        return True
                
                print("\nüîç –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
                
            except asyncio.TimeoutError:
                print("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ TON API")
                return False
            except aiohttp.ClientError as e:
                print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
                return False
    
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {str(e)}")
        return False

@router.callback_query(F.data == 'ton_deposit')
async def ton_deposit_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ TON"""
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–ª—è user_id: {callback.from_user.id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TON –∫ —Ä—É–±–ª—é
        ton_rate = await get_ton_rate()
        logger.info(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å TON: {ton_rate} RUB")
        
        await callback.message.edit_text(
            f"üíé <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 TON = {ton_rate:.2f}‚ÇΩ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 10‚ÇΩ):",
            reply_markup=back_menu_kb(callback.from_user.id)
        )
        
        await state.set_state("waiting_ton_amount")
        await state.update_data(ton_rate=ton_rate)
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_ton_amount")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ton_deposit_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

async def get_ton_rate():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON –∫ —Ä—É–±–ª—é"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                "https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=rub",
                timeout=5
            ) as response:
                data = await response.json()
                return data['the-open-network']['rub']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ TON: {e}")
        return 200  # –ö—É—Ä—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

@router.message(F.text, StateFilter("waiting_ton_amount"))
async def process_ton_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –æ—Ç user_id: {message.from_user.id}")
    
    try:
        rub_amount = float(message.text.strip())
        # if rub_amount < 10:
        #     await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 10 —Ä—É–±–ª–µ–π")
        #     return
            
        data = await state.get_data()
        ton_rate = data['ton_rate']
        
        ton_amount = round(rub_amount / ton_rate, 4)
        amount_nano = int(ton_amount * 10**9)
        unique_code = generate_unique_code()
        
        builder = InlineKeyboardBuilder()
        payment_links = [
            ("Ton Wallet", f"ton://transfer/{TON_WALLET}"),
            ("Tonkeeper", f"https://app.tonkeeper.com/transfer/{TON_WALLET}"),
            ("Tonhub", f"https://tonhub.com/transfer/{TON_WALLET}")
        ]
        
        for name, base_url in payment_links:
            builder.button(text=name, url=f"{base_url}?amount={amount_nano}&text={unique_code}")
            
        builder.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_ton:{unique_code}:{amount_nano}:{rub_amount}")
        builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="ton_deposit")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="select_deposit_menu")
        
        builder.adjust(2, 1, 1)
        
        await message.answer(
            f"üíé <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON</b>\n\n"
            f"‚ñ™ –°—É–º–º–∞: <b>{ton_amount:.4f} TON</b> (~{rub_amount:.2f}‚ÇΩ)\n"
            f"‚ñ™ –ê–¥—Ä–µ—Å: <code>{TON_WALLET}</code>\n"
            f"‚ñ™ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{unique_code}</code>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
            reply_markup=builder.as_markup()
        )
        
        await state.update_data(
            amount_nano=str(amount_nano),
            unique_code=unique_code,
            rub_amount=rub_amount
        )
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É: {amount_nano} nanoTON, –∫–æ–¥: {unique_code}")
        
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100)")
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Å—É–º–º—ã")

@router.callback_query(F.data.startswith("check_ton:"))
async def check_payment_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã"""
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id: {callback.from_user.id}")
    
    try:
        _, code, amount_nano, rub_amount = callback.data.split(':')
        
        if await check_ton_payment(amount_nano, code):
            user_id = callback.from_user.id
            rub_amount = float(rub_amount)
            
            await DB.add_balance(user_id, rub_amount* 1000)
            await DB.add_transaction(
                user_id=user_id,
                amount=rub_amount,
                description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON",
                additional_info=code
            )
            
            await callback.message.edit_text(
                f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!</b>\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {rub_amount:.2f}‚ÇΩ",
                reply_markup=InlineKeyboardBuilder()
                    .button(text="üëå OK", callback_data="profile")
                    .as_markup()
            )
            await state.clear()
            logger.info(f"–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è user_id: {user_id}")
        else:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥", show_alert=True)
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id: {callback.from_user.id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)