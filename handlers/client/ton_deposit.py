from .client import *
from confIg import *
from API.TonAPI import *
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_unique_code(length=8):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))


@router.callback_query(F.data == 'ton_deposit')
async def ton_deposit_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ TON"""
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–ª—è user_id: {callback.from_user.id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TON –∫ —Ä—É–±–ª—é
        ton_rate = await get_ton_rate()
        logger.info(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å TON: {ton_rate} RUB")
        
        await callback.message.edit_text(
            f"üíé <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 TON = {ton_rate:.2f}‚ÇΩ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 10‚ÇΩ):",
            reply_markup=back_menu_kb(callback.from_user.id)
        )
        
        await state.set_state("waiting_ton_amount")
        await state.update_data(ton_rate=ton_rate)
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_ton_amount")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ton_deposit_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

async def get_ton_rate():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON –∫ —Ä—É–±–ª—é"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                "https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=rub",
                timeout=5
            ) as response:
                data = await response.json()
                return data['the-open-network']['rub']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ TON: {e}")
        return 200  # –ö—É—Ä—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

@router.message(F.text, StateFilter("waiting_ton_amount"))
async def process_ton_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –æ—Ç user_id: {message.from_user.id}")
    
    try:
        rub_amount = float(message.text.strip())
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ state –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        ton_rate = data.get('ton_rate')
        if not ton_rate:
            ton_rate = await get_ton_rate()
            await state.update_data(ton_rate=ton_rate)
        
        currency = data.get('deposit_currency', 'MICO')  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É

        ton_amount = round(rub_amount / ton_rate, 4)
        amount_nano = int(ton_amount * 10**9)
        unique_code = generate_unique_code()

        builder = InlineKeyboardBuilder()
        payment_links = [
            ("Ton Wallet", f"ton://transfer/{TON_WALLET}"),
            ("Tonkeeper", f"https://app.tonkeeper.com/transfer/{TON_WALLET}"),
            ("Tonhub", f"https://tonhub.com/transfer/{TON_WALLET}")
        ]
        
        for name, base_url in payment_links:
            builder.button(text=name, url=f"{base_url}?amount={amount_nano}&text={unique_code}")
            
        builder.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_ton:{unique_code}:{amount_nano}:{rub_amount}:{currency}")
        builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="ton_deposit")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="select_deposit_menu")
        
        builder.adjust(2, 1, 1)
        
        await message.answer(
            f"üíé <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON</b>\n\n"
            f"‚ñ™ –°—É–º–º–∞: <b>{ton_amount:.4f} TON</b> (~{rub_amount:.2f}‚ÇΩ)\n"
            f"‚ñ™ –í–∞–ª—é—Ç–∞: {'RUB' if currency == 'RUB' else 'MICO'}\n"
            f"‚ñ™ –ê–¥—Ä–µ—Å: <code>{TON_WALLET}</code>\n"
            f"‚ñ™ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{unique_code}</code>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
            reply_markup=builder.as_markup()
        )
        
        await state.update_data(
            amount_nano=str(amount_nano),
            unique_code=unique_code,
            rub_amount=rub_amount,
            currency=currency
        )
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É: {amount_nano} nanoTON, –∫–æ–¥: {unique_code}, –≤–∞–ª—é—Ç–∞: {currency}")
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100)")
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Å—É–º–º—ã")

@router.callback_query(F.data.startswith("check_ton:"))
async def check_payment_handler(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id: {callback.from_user.id}")
    
    try:
        parts = callback.data.split(':')
        if len(parts) < 4:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö: {callback.data}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
            
        code = parts[1]
        amount_nano = parts[2]
        rub_amount = parts[3]
        currency = parts[4] if len(parts) > 4 else 'MICO'  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
        print(parts, currency)
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: –∫–æ–¥={code}, —Å—É–º–º–∞={amount_nano}, —Ä—É–±={rub_amount}, –≤–∞–ª—é—Ç–∞={currency}")
        
        if await check_ton_payment(amount_nano, code):
            user_id = callback.from_user.id
            rub_amount = float(rub_amount)
            
            if currency == 'MICO':
                await DB.add_balance(user_id, rub_amount * 1000)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MICO
                success_msg = f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!</b>\n–í–∞—à MICO –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {rub_amount:.2f} $MICO"
            else:
                await DB.add_rub_balance(user_id, rub_amount)  # –ó–∞—á–∏—Å–ª—è–µ–º —Ä—É–±–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
                success_msg = f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!</b>\n–í–∞—à —Ä—É–±–ª–µ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {rub_amount:.2f}‚ÇΩ"
                
            await DB.add_transaction(
                user_id=user_id,
                amount=rub_amount,
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON ({currency})",
                additional_info=code
            )
            
            await callback.message.edit_text(
                success_msg,
                reply_markup=InlineKeyboardBuilder()
                    .button(text="üëå OK", callback_data="profile")
                    .as_markup()
            )
            await state.clear()
        else:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)