from .client import *
from config import *

# –î–æ–±–∞–≤—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ client.py (–º–æ–∂–Ω–æ —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏)
def generate_unique_code(length=8):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

async def check_ton_payment(expected_amount_nano: str, comment: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–µ—Ç–∏ TON —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
    print(f"\nüîç Starting TON payment check for amount: {expected_amount_nano}, comment: '{comment}'")
    
    try:
        response = requests.get(
            f"{TON_API_BASE}getTransactions",
            params={
                'address': TON_WALLET,
                'limit': 100,
                'api_key': TON_API_TOKEN,
                'archival': True
            },
            timeout=10
        )
        
        data = response.json()
        if not data.get('ok', False):
            return False

        expected = int(expected_amount_nano)
        tolerance = 1000000  # –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ¬±0.001 TON (1,000,000 –Ω–∞–Ω–æ—Ç–æ–Ω–æ–≤)
        
        for tx in data.get('result', []):
            in_msg = tx.get('in_msg', {})
            tx_value = int(in_msg.get('value', 0))
            tx_comment = in_msg.get('message', '').strip()
            
            print(f"Checking: {tx_value} vs {expected} (¬±{tolerance}), comment: '{tx_comment}'")
            
            if (abs(tx_value - expected) <= tolerance and 
                tx_comment == comment.strip()):
                return True

        return False
    except Exception as e:
        print(f"TON payment check error: {e}")
        return False

# –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ router (–º–æ–∂–Ω–æ —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
@router.callback_query(F.data == 'ton_deposit')
async def ton_deposit_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ TON"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TON –∫ —Ä—É–±–ª—é (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π API)
    try:
        response = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=rub")
        ton_rate = response.json()['the-open-network']['rub']
    except:
        ton_rate = 200  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
    
    await callback.message.edit_text(
        f"üíé <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 TON = {ton_rate:.2f}‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å:",
        reply_markup=back_menu_kb(user_id)
    )
    
    await state.set_state("waiting_ton_amount")
    await state.update_data(ton_rate=ton_rate)


@router.message(F.text, StateFilter("waiting_ton_amount"))
async def process_ton_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ TON"""
    user_id = message.from_user.id
    try:
        rub_amount = float(message.text.strip())
        if rub_amount < 10:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 —Ä—É–±–ª–µ–π")
            return
        
        data = await state.get_data()
        ton_rate = data['ton_rate']
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ TON
        ton_amount = (rub_amount / ton_rate, 4)
        amount_nano = int(ton_amount * 1_000_000_000)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        unique_code = generate_unique_code()
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="Ton Wallet",
                url=f"ton://transfer/{TON_WALLET}?amount={amount_nano}&text={unique_code}"
            ),
            InlineKeyboardButton(
                text="Tonkeeper",
                url=f"https://app.tonkeeper.com/transfer/{TON_WALLET}?amount={amount_nano}&text={unique_code}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="Tonhub",
                url=f"https://tonhub.com/transfer/{TON_WALLET}?amount={amount_nano}&text={unique_code}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"check_ton_payment:{unique_code}:{amount_nano}:{rub_amount}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É",
                callback_data="ton_deposit"
            ),
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="select_deposit_menu"
            )
        )

        await message.answer(
            f"üíé <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON</b>\n\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{ton_amount:.4f} TON</b> (~{rub_amount:.2f}‚ÇΩ)\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>{ton_amount:.4f} TON</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n"
            f"<code>{TON_WALLET}</code>\n\n"
            f"–° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º:\n<code>{unique_code}</code>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
            reply_markup=builder.as_markup()
        )
        
        await state.update_data(
            amount_nano=str(amount_nano),
            unique_code=unique_code,
            rub_amount=rub_amount
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100)")

@router.callback_query(F.data.startswith("check_ton_payment:"))
async def check_ton_payment_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ TON"""
    parts = callback.data.split(":")
    unique_code = parts[1]
    amount_nano = parts[2]
    rub_amount = float(parts[3])
    
    result = await check_ton_payment(amount_nano, unique_code)
    
    if not result:
        await callback.answer(
            "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.",
            show_alert=True
        )
        return
    
    user_id = callback.from_user.id
    
    # –ó–∞—á–∏—Å–ª—è–µ–º —Ä—É–±–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
    await DB.add_rub_balance(user_id, rub_amount)
    await DB.add_transaction(
        user_id=user_id,
        amount=rub_amount,
        description="–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON",
        additional_info=None
    )
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")
    )
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {rub_amount:.2f}‚ÇΩ\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
        reply_markup=builder.as_markup()
    )
    await state.clear()
