from utils.Imports import *
from confIg import *

async def check_ton_payment(expected_amount_nano: str, comment: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–µ—Ç–∏ TON —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info(f"\nüîç [–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞] –û–∂–∏–¥–∞–µ–º: {expected_amount_nano} nanoTON, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{comment}'")
    
    try:
        expected = int(expected_amount_nano)
        tolerance = max(int(expected * 0.1), 10000000)
        logger.info(f"üî¢ –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {expected - tolerance} - {expected + tolerance} nanoTON")
        
        params = {
            'address': str(TON_WALLET),
            'limit': 20,
            'api_key': str(TON_API_TOKEN),
            'archival': 'true'
        }
        
        logger.info("üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        logger.info(f" - –ê–¥—Ä–µ—Å: {TON_WALLET}")
        logger.info(f" - –õ–∏–º–∏—Ç: 20")
        
        async with aiohttp.ClientSession() as session:
            try:
                response = await session.get(
                    f"{TON_API_BASE}getTransactions",
                    params=params,
                    timeout=20
                )
                
                logger.info(f"üì° –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status}")
                
                if response.status != 200:
                    logger.info(f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {response.status}")
                    return False
                
                data = await response.json()
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(data.get('result', []))}")
                
                if not data.get('ok', False):
                    error_msg = data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
                    logger.info(f"‚ùå –û—à–∏–±–∫–∞ API: {error_msg}")
                    return False
                
                for tx in data.get('result', []):
                    in_msg = tx.get('in_msg', {})
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
                    tx_value = 0
                    try:
                        value = in_msg.get('value')
                        if value is not None:
                            tx_value = int(float(value))
                    except (TypeError, ValueError):
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    tx_comment = str(in_msg.get('message', '')).strip()
                    
                    logger.info(f"\nüîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:")
                    logger.info(f" - –•—ç—à: {tx.get('hash')}")
                    logger.info(f" - –°—É–º–º–∞: {tx_value} nanoTON")
                    logger.info(f" - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{tx_comment}'")
                    logger.info(f" - –î–∞—Ç–∞: {tx.get('utime')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    amount_match = abs(tx_value - expected) <= tolerance
                    comment_match = tx_comment == comment.strip()
                    
                    logger.info(f"üîπ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—É–º–º—ã: {'‚úÖ' if amount_match else '‚ùå'}")
                    logger.info(f"üîπ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {'‚úÖ' if comment_match else '‚ùå'}")
                    
                    if amount_match and comment_match:
                        logger.info(f"\nüéâ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–µ–∂!")
                        logger.info(f" - –ü–æ–ª—É—á–µ–Ω–æ: {tx_value} nanoTON")
                        logger.info(f" - –û–∂–∏–¥–∞–ª–æ—Å—å: {expected} nanoTON (¬±{tolerance})")
                        logger.info(f" - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{tx_comment}'")
                        logger.info(f" - –í—Ä–µ–º—è: {tx.get('utime')}")
                        return True
                
                logger.info("\nüîç –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
                
            except asyncio.TimeoutError:
                logger.info("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ TON API")
                return False
            except aiohttp.ClientError as e:
                logger.info(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
                return False
    
    except Exception as e:
        logger.info(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {str(e)}")
        return False