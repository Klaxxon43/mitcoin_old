# import asyncio

# from aiogram import types, Router, F, Bot
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from kb import admin_kb, cancel_all_kb, pr_menu_canc, back_menu_kb, get_stats_menu, admin_kb2
# from db import DB, Promo
# from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
# from config import ADMINS_ID
# import os
# from aiogram.utils.keyboard import InlineKeyboardBuilder
# from aiogram.enums import ChatMemberStatus
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberUpdated
# from aiogram.filters import Command

# class MailingStates(StatesGroup):
#     message = State()
#     progress = State()

# class AdminActions(StatesGroup):
#     update_rub_balance = State()
#     view_user_profile = State()
#     update_balance = State()

# class create_chating_tasks(StatesGroup):
#     create_task = State()
#     create_task2 = State()

# class create_op_tasks(StatesGroup):
#     create_op_task = State()
#     create_op_task2 = State()

# class create_opbonus_tasks(StatesGroup):
#     create_op = State()
#     create_op2 = State()


# admin = Router()











# def generate_opbonus_keyboard(op_bonus, bonuspage, total_pages):
#     builder = InlineKeyboardBuilder()

#     # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
#     for task in op_bonus:
#         chat_id = task[1]

#         button_text = f"{chat_id}"
#         # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
#         builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"opbonus_{task[0]}"))

#     # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
#     builder.row(types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å üî•", callback_data="create_opbonus_task"))
#     builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin"))
#     # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
#     pagination = []
#     if bonuspage > 1:
#         pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"bonuspage_{bonuspage - 1}"))
#     pagination.append(types.InlineKeyboardButton(text=str(bonuspage), callback_data="current_page"))
#     if bonuspage < total_pages:
#         pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"bonuspage_{bonuspage + 1}"))

#     builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

#     return builder.as_markup()


# # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
# def paginate_opbonus_tasks(tasks, bonuspage=1, per_page=5):
#     total_pages = (len(tasks) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
#     start_idx = (bonuspage - 1) * per_page
#     end_idx = start_idx + per_page
#     tasks_on_page = tasks[start_idx:end_idx]
#     return tasks_on_page, total_pages


# @admin.callback_query(F.data == 'bonus_admin')
# async def bonus_tasks_handler(callback: types.CallbackQuery):
#     tasks = await DB.get_bonus_ops()
#     # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#     bonuspage = 1
#     tasks_on_page, total_pages = paginate_opbonus_tasks(tasks, bonuspage)
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_opbonus_keyboard(tasks_on_page, bonuspage, total_pages)
#     await callback.message.edit_text("–ö–∞–Ω–∞–ª—ã/—á–∞—Ç—ã –≤ –û–ü –±–æ–Ω—É—Å–æ–≤", reply_markup=keyboard)




# @admin.callback_query(lambda c: c.data.startswith("bonuspage_"))
# async def change_page_handler(callback: types.CallbackQuery):
#     bonuspage = int(callback.data.split('_')[1])
#     user_id = callback.from_user.id
#     tasks = await DB.get_op_tasks()

#     # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
#     tasks_on_page, total_pages = paginate_opbonus_tasks(tasks, bonuspage)

#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_opbonus_keyboard(tasks_on_page, bonuspage, total_pages)

#     await callback.message.edit_text("–ö–∞–Ω–∞–ª—ã/—á–∞—Ç—ã –≤ –û–ü –±–æ–Ω—É—Å–æ–≤", reply_markup=keyboard)




# @admin.callback_query(lambda c: c.data.startswith("opbonus_"))
# async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
#     await callback.answer()
#     task_id = int(callback.data.split('_')[1])
#     task = await DB.get_bonus_op(task_id)


#     target = task[1]
#     link = task[2]
#     try:
#         chat = await bot.get_chat(target)
#         chat_title = chat.title
#     except:
#         chat_title = "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"

#     task_info = f"""
# –ù–∞–∑–≤–∞–Ω–∏–µ - <b>{chat_title}</b>

# –°—Å—ã–ª–∫–∞ - {link}

# {target}  
#     """
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bonus_admin"))
#     builder.add(types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"bonusdelete_{task_id}"))
#     await callback.message.edit_text(task_info, reply_markup=builder.as_markup())






# @admin.callback_query(lambda c: c.data.startswith("bonusdelete_"))
# async def delete_task_handler(callback: types.CallbackQuery):
#     id = int(callback.data.split('_')[1])

#     # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     await DB.remove_bonus_op(id)
#     await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–æ!")

#     # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –∑–∞–¥–∞–Ω–∏—è–º

#     tasks = await DB.get_bonus_ops()
#     bonuspage = 1
#     tasks_on_page, total_pages = paginate_opbonus_tasks(tasks, bonuspage)
#     keyboard = generate_opbonus_keyboard(tasks_on_page, bonuspage, total_pages)

#     await callback.message.edit_text("–ö–∞–Ω–∞–ª—ã/—á–∞—Ç—ã –≤ –û–ü –±–æ–Ω—É—Å–æ–≤", reply_markup=keyboard)







# @admin.callback_query(F.data == 'create_opbonus_task')
# async def create_op_task_handler(callback: types.CallbackQuery, state: FSMContext):
#     await callback.answer()
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="back_admin"))
#     await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º–∞, –ø—Ä–∏–º–µ—Ä - @telegram", reply_markup=builder.as_markup())
#     await state.set_state(create_opbonus_tasks.create_op)

# @admin.message(create_opbonus_tasks.create_op)
# async def create_opbonus_task_handler2(message: types.Message, state: FSMContext, bot: Bot):
#     target_id = message.text.strip()
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="back_admin"))
#     await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç",
#                                      reply_markup=builder.as_markup())
#     await state.update_data(target_id=target_id)
#     await state.set_state(create_opbonus_tasks.create_op2)

# @admin.message(create_opbonus_tasks.create_op2)
# async def create_opbonus_task_handler2(message: types.Message, state: FSMContext, bot: Bot):
#     link = message.text.strip()
#     data = await state.get_data()
#     target_id = data.get('target_id')

#     await DB.add_bonus_op(target_id, link)
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
#     await message.answer("ü•≥ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –±–æ–Ω—É—Å–æ–≤", reply_markup=builder.as_markup())
#     await state.clear()















# @admin.callback_query(F.data == 'adminoutputlist')
# async def adminoutputlist(callback: types.CallbackQuery, state: FSMContext):
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="USDT", callback_data="adminusdtoutputlist"))
#     builder.add(types.InlineKeyboardButton(text="–†—É–±–ª–∏", callback_data="adminruboutputlist"))
#     builder.add(types.InlineKeyboardButton(text="üîô", callback_data="back_admin"))
#     await callback.message.edit_text(f'<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–≤–æ–¥–∞:</b>', reply_markup=builder.as_markup())



# def generate_usdt_keyboard(outputs, usdtpage, total_pages):
#     builder = InlineKeyboardBuilder()
#     # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
#     for output in outputs:
#         amount = output[3]

#         button_text = f"{amount}"
#         # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
#         builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"usdttask_{output[0]}"))

#     # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
#     builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin"))
#     # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
#     pagination = []
#     if usdtpage > 1:
#         pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"usdtpage_{usdtpage - 1}"))
#     pagination.append(types.InlineKeyboardButton(text=str(usdtpage), callback_data="current_page"))
#     if usdtpage < total_pages:
#         pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"usdtpage_{usdtpage + 1}"))

#     builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

#     return builder.as_markup()

# # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
# def paginate_usdt_tasks(outputs, usdtpage=1, per_page=5):
#     total_pages = (len(outputs) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
#     start_idx = (usdtpage - 1) * per_page
#     end_idx = start_idx + per_page
#     tasks_on_page = outputs[start_idx:end_idx]
#     return tasks_on_page, total_pages

# @admin.callback_query(F.data == 'adminusdtoutputlist')
# async def adminusdtoutputlist(callback: types.CallbackQuery):
#     outputs = await DB.get_usdt_outputs()
#     # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#     usdtpage = 1
#     tasks_on_page, total_pages = paginate_usdt_tasks(outputs, usdtpage)
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_usdt_keyboard(tasks_on_page, usdtpage, total_pages)
#     await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –≤ <b>USDT (BEP20)</b>", reply_markup=keyboard)


# @admin.callback_query(lambda c: c.data.startswith("usdtpage_"))
# async def change_page_handler(callback: types.CallbackQuery):
#     usdtpage = int(callback.data.split('_')[1])
#     outputs = await DB.get_usdt_outputs()

#     # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
#     tasks_on_page, total_pages = paginate_usdt_tasks(outputs, usdtpage)

#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_usdt_keyboard(tasks_on_page, usdtpage, total_pages)
#     await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –≤ <b>USDT (BEP20)</b>", reply_markup=keyboard)


# @admin.callback_query(lambda c: c.data.startswith("usdttask_"))
# async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
#     await callback.answer()
#     id = int(callback.data.split('_')[1])
#     output = await DB.get_output(id)
#     if output is not None:
#         try:
#             user_id = output[1]
#         except:
#             user_id = "–æ—à–∏–±–∫–∞"
#         try:
#             wallet = output[2]
#         except:
#             wallet = "–æ—à–∏–±–∫–∞"
#         try:
#             amount = output[3]
#         except:
#             amount = "–æ—à–∏–±–∫–∞"

#         task_info = f"""
# üì§ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –≤ USDT:</b>
# <b>ID</b> - <code>{user_id}</code>
    
# üëõ <b>–ö–æ—à–µ–ª–µ–∫ USDT(BEP20)</b> - 
# <code>{wallet}</code>
    
# üí≤ <b>–°—É–º–º–∞</b> - <code>{amount}</code>
    
# <span class="tg-spoiler">‚ö† –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</b> –∑–∞—è–≤–∫–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Ä—É–±–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ –ù–ï –í–û–ó–í–†–ê–©–ê–Æ–¢–°–Ø</span>
#         """
#         builder = InlineKeyboardBuilder()
#         builder.add(types.InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"usdtsuc_{id}"))
#         builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"usdtdelete_{id}"))
#         builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adminusdtoutputlist"))
#         await callback.message.edit_text(task_info, reply_markup=builder.as_markup())
#     else:
#         builder = InlineKeyboardBuilder()
#         builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adminusdtoutputlist"))
#         await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=builder.as_markup())

# @admin.callback_query(lambda c: c.data.startswith("usdtdelete_"))
# async def delete_task_handler(callback: types.CallbackQuery, bot: Bot):
#     id = int(callback.data.split('_')[1])
#     # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     output = await DB.get_output(id)
#     user_id = output[1]
#     await DB.delete_output(id)
#     await callback.message.edit_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
#     await bot.send_message(chat_id=user_id, text='‚òπ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', reply_markup=back_menu_kb(user_id))
#     outputs = await DB.get_usdt_outputs()
#     usdtpage = 1

#     tasks_on_page, total_pages = paginate_usdt_tasks(outputs, usdtpage)
#     keyboard = generate_usdt_keyboard(tasks_on_page, usdtpage, total_pages)
#     await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –≤ <b>USDT</b>", reply_markup=keyboard)


# @admin.callback_query(lambda c: c.data.startswith("usdtsuc_"))
# async def delete_task_handler(callback: types.CallbackQuery, bot: Bot):
#     id = int(callback.data.split('_')[1])

#     output = await DB.get_output(id)
#     user_id = output[1]
#     await DB.delete_output(id)
#     await callback.message.edit_text("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
#     await bot.send_message(chat_id=user_id, text='ü•≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!', reply_markup=back_menu_kb(user_id))
#     outputs = await DB.get_usdt_outputs()
#     usdtpage = 1

#     tasks_on_page, total_pages = paginate_usdt_tasks(outputs, usdtpage)
#     keyboard = generate_usdt_keyboard(tasks_on_page, usdtpage, total_pages)
#     await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –≤ <b>USDT</b>", reply_markup=keyboard)
















# def generate_rub_keyboard(outputs, rubpage, total_pages):
#     builder = InlineKeyboardBuilder()
#     # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
#     for output in outputs:
#         amount = output[3]

#         button_text = f"{amount}"
#         # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
#         builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"rubtask_{output[0]}"))

#     # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
#     builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin"))
#     # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
#     pagination = []
#     if rubpage > 1:
#         pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"rubpage_{rubpage - 1}"))
#     pagination.append(types.InlineKeyboardButton(text=str(rubpage), callback_data="current_page"))
#     if rubpage < total_pages:
#         pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"rubpage_{rubpage + 1}"))

#     builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

#     return builder.as_markup()


# # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
# def paginate_rub_tasks(outputs, rubpage=1, per_page=5):
#     total_pages = (len(outputs) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
#     start_idx = (rubpage - 1) * per_page
#     end_idx = start_idx + per_page
#     tasks_on_page = outputs[start_idx:end_idx]
#     return tasks_on_page, total_pages


# @admin.callback_query(F.data == 'adminruboutputlist')
# async def adminruboutputlist(callback: types.CallbackQuery):
#     outputs = await DB.get_rub_outputs()
#     # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#     rubpage = 1
#     tasks_on_page, total_pages = paginate_rub_tasks(outputs, rubpage)
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_rub_keyboard(tasks_on_page, rubpage, total_pages)
#     await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –≤ <b>—Ä—É–±–ª—è—Ö</b>", reply_markup=keyboard)


# @admin.callback_query(lambda c: c.data.startswith("rubpage_"))
# async def change_rubpage_handler(callback: types.CallbackQuery):
#     rubpage = int(callback.data.split('_')[1])
#     outputs = await DB.get_rub_outputs()

#     # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
#     tasks_on_page, total_pages = paginate_rub_tasks(outputs, rubpage)

#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_rub_keyboard(tasks_on_page, rubpage, total_pages)
#     await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –≤ <b>—Ä—É–±–ª—è—Ö</b>", reply_markup=keyboard)


# @admin.callback_query(lambda c: c.data.startswith("rubtask_"))
# async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
#     await callback.answer()
#     id = int(callback.data.split('_')[1])
#     output = await DB.get_output(id)
#     if output is not None:
#         try:
#             user_id = output[1]
#         except:
#             user_id = "–æ—à–∏–±–∫–∞"
#         try:
#             wallet = output[2]
#         except:
#             wallet = "–æ—à–∏–±–∫–∞"
#         try:
#             amount = output[3]
#         except:
#             amount = "–æ—à–∏–±–∫–∞"

#         task_info = f"""
# üì§ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –≤ —Ä—É–±–ª—è—Ö:</b>
# <b>ID</b> - <code>{user_id}</code>

# üí≥ <b>–ö–∞—Ä—Ç–∞/—Ç–µ–ª–µ—Ñ–æ–Ω(–¥–ª—è –°–ë–ü)</b> - 
# <code>{wallet}</code>

# üí≤ <b>–°—É–º–º–∞</b> - <code>{amount}</code>

# <span class="tg-spoiler">‚ö† –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ <b>–û—Ç–∫–ª–æ–Ω–∏—Ç—å</b> –∑–∞—è–≤–∫–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Ä—É–±–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ –ù–ï –í–û–ó–í–†–ê–©–ê–Æ–¢–°–Ø</span>
#         """
#         builder = InlineKeyboardBuilder()
#         builder.add(types.InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"rubsuc_{id}"))
#         builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"rubdelete_{id}"))
#         builder.add(types.InlineKeyboardButton(text="üîô", callback_data="adminruboutputlist"))
#         await callback.message.edit_text(task_info, reply_markup=builder.as_markup())
#     else:
#         builder = InlineKeyboardBuilder()
#         builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="adminruboutputlist"))
#         await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=builder.as_markup())


# @admin.callback_query(lambda c: c.data.startswith("rubdelete_"))
# async def delete_task_handler(callback: types.CallbackQuery, bot: Bot):
#     id = int(callback.data.split('_')[1])
#     # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     output = await DB.get_output(id)
#     user_id = output[1]
#     await DB.delete_output(id)
#     await callback.message.edit_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
#     await bot.send_message(chat_id=user_id, text='‚òπ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', reply_markup=back_menu_kb(user_id))
#     outputs = await DB.get_rub_outputs()
#     rubpage = 1

#     tasks_on_page, total_pages = paginate_rub_tasks(outputs, rubpage)
#     keyboard = generate_rub_keyboard(tasks_on_page, rubpage, total_pages)
#     await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –≤ <b>—Ä—É–±–ª—è—Ö</b>", reply_markup=keyboard)


# @admin.callback_query(lambda c: c.data.startswith("rubsuc_"))
# async def delete_task_handler(callback: types.CallbackQuery, bot: Bot):
#     id = int(callback.data.split('_')[1])

#     output = await DB.get_output(id)
#     user_id = output[1]
#     await DB.delete_output(id)
#     await callback.message.edit_text("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
#     await bot.send_message(chat_id=user_id, text='ü•≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!', reply_markup=back_menu_kb(user_id))
#     outputs = await DB.get_rub_outputs()
#     rubpage = 1

#     tasks_on_page, total_pages = paginate_rub_tasks(outputs, rubpage)
#     keyboard = generate_rub_keyboard(tasks_on_page, rubpage, total_pages)
#     await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –≤ <b>—Ä—É–±–ª—è—Ö</b>", reply_markup=keyboard)




























# # –ù–∞–∑–Ω–∞—á–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π



# def generate_tasks_keyboard(chating_tasks, chatingpage, total_pages):
#     builder = InlineKeyboardBuilder()

#     # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
#     for task in chating_tasks:

#         price = task[2]
#         button_text = f"–ß–ê–¢ | {price}"
#         # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
#         builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"chatingtask_{task[0]}"))

#     # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
#     builder.row(types.InlineKeyboardButton(text="üî• –°–æ–∑–¥–∞—Ç—å", callback_data="create_chating_task"))
#     builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin"))
#     # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
#     pagination = []
#     if chatingpage > 1:
#         pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"chatingpage_{chatingpage - 1}"))
#     pagination.append(types.InlineKeyboardButton(text=str(chatingpage), callback_data="current_page"))
#     if chatingpage < total_pages:
#         pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"chatingpage_{chatingpage + 1}"))

#     builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

#     return builder.as_markup()


# # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
# def paginate_tasks(tasks, chatingpage=1, per_page=5):
#     total_pages = (len(tasks) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
#     start_idx = (chatingpage - 1) * per_page
#     end_idx = start_idx + per_page
#     tasks_on_page = tasks[start_idx:end_idx]
#     return tasks_on_page, total_pages


# @admin.callback_query(F.data == 'chat_privyazka')
# async def chating_tasks_handler(callback: types.CallbackQuery, bot: Bot):
#     user_id = callback.from_user.id
#     tasks = await DB.get_chating_tasks()

#     # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#     chatingpage = 1
#     tasks_on_page, total_pages = paginate_tasks(tasks, chatingpage)

#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_tasks_keyboard(tasks_on_page, chatingpage, total_pages)

#     await callback.message.edit_text("–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:", reply_markup=keyboard)




# @admin.callback_query(lambda c: c.data.startswith("chatingpage_"))
# async def change_page_handler(callback: types.CallbackQuery):
#     chatingpage = int(callback.data.split('_')[1])
#     user_id = callback.from_user.id
#     tasks = await DB.get_chating_tasks()

#     # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
#     tasks_on_page, total_pages = paginate_tasks(tasks, chatingpage)

#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_tasks_keyboard(tasks_on_page, chatingpage, total_pages)

#     await callback.message.edit_text("–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:", reply_markup=keyboard)



# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
# async def check_admin_and_get_invite_link(bot, chat_id):
#     try:
#         chat_administrators = await bot.get_chat_administrators(chat_id)
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#         for admin in chat_administrators:
#             if admin.user.id == bot.id:
#                 # –ï—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
#                 invite_link = await bot.export_chat_invite_link(chat_id)
#                 return invite_link
#         # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω
#         return "üòë –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ!"
#     except:
#         return "üòë –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ!"

# @admin.callback_query(lambda c: c.data.startswith("chatingtask_"))
# async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
#     await callback.answer()
#     task_id = int(callback.data.split('_')[1])
#     task = await DB.get_chating_task_by_id(task_id)


#     try:
#         chat_id = task[1]
#         price = task[2]
#         chat = await bot.get_chat(chat_id)
#         invite_link = await check_admin_and_get_invite_link(bot, task[1])
#         chat_title = chat.title
#     except:
#         chat_title = '<i>–û—à–∏–±–∫–∞</i>'
#         invite_link = '<i>–û—à–∏–±–∫–∞</i>'
#         price = '<i>–û—à–∏–±–∫–∞</i>'

#     task_info = f"""
# –ß–∞—Ç - {chat_title}

# üí∞ –ü–ª–∞—Ç–∞ –∑–∞ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ - {price} MITcoin 

# {invite_link}    
#     """
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="chat_privyazka"))
#     builder.add(types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"chatingdelete_{task_id}"))
#     await callback.message.edit_text(task_info, reply_markup=builder.as_markup())






# @admin.callback_query(lambda c: c.data.startswith("chatingdelete_"))
# async def delete_task_handler(callback: types.CallbackQuery):
#     task_id = int(callback.data.split('_')[1])

#     # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     await DB.delete_chating_task(task_id)
#     await callback.message.edit_text("–ß–∞—Ç —É–¥–∞–ª–µ–Ω!")

#     # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –∑–∞–¥–∞–Ω–∏—è–º

#     tasks = await DB.get_chating_tasks()
#     chatingpage = 1
#     tasks_on_page, total_pages = paginate_tasks(tasks, chatingpage)
#     keyboard = generate_tasks_keyboard(tasks_on_page, chatingpage, total_pages)

#     await callback.message.edit_text("–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:", reply_markup=keyboard)







# @admin.callback_query(F.data == 'create_chating_task')
# async def create_chating_task_handler(callback: types.CallbackQuery, state: FSMContext):
#     await callback.answer()
#     await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ:', reply_markup=cancel_all_kb())
#     await state.set_state(create_chating_tasks.create_task)

# @admin.message(create_chating_tasks.create_task)
# async def create_chating_task_handler2(message: types.Message, state: FSMContext):
#     price = int(message.text.strip())
#     try:
#         await state.update_data(price=price)
#         builder = InlineKeyboardBuilder()
#         builder.add(types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="pr_chating_confirm"))
#         builder.add(types.InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="back_admin"))
#         await message.answer(f'üë• –û–ø–ª–∞—Ç–∞ –∑–∞ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ - {price} MITcoin\n\n–ù–∞–∂–º–∏—Ç–µ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...', reply_markup=builder.as_markup())
#     except ValueError:
#         await message.answer('<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ...', reply_markup=pr_menu_canc())


# @admin.callback_query(F.data == 'pr_chating_confirm')
# async def pr_chat3(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
#     data = await state.get_data()
#     price = data.get('price')
#     await state.clear()
#     bot_username = (await bot.get_me()).username
#     invite_link = f"https://t.me/{bot_username}?startgroup&admin=invite_users+manage_chat"

#     add_button = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç", url=invite_link)
#     add_button1 = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='pr_menu_cancel')
#     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
#     keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1]])
#     await callback.message.edit_text(f'''
# üëæ –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–ª—è —ç—Ç–æ–≥–æ...

# <em>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É -> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ -> –ø–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∫–æ–¥–æ–º</em>
#         ''', reply_markup=keyboard)
#     await state.set_state(create_chating_tasks.create_task2)
#     await state.update_data(price=price)


# @admin.message(create_chating_tasks.create_task2)
# async def pr_chating4(message: types.Message, state: FSMContext, bot: Bot):
#     data = await state.get_data()
#     price = data.get('price')
#     user_id = message.from_user.id
#     bot_info = await bot.get_me()
#     code = message.text.strip()
#     code_chat_id, code_user_id = map(int, code.split(":"))
#     print(f'chat_id-{code_chat_id}; code_user_id - {code_user_id}, real user id - {user_id}')
#     if user_id == code_user_id:
#         try:
#             bot_member = await bot.get_chat_member(chat_id=code_chat_id, user_id=bot_info.id)
#         except Exception as e:
#             await message.answer(f"ü´§ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.", reply_markup=pr_menu_canc())
#             return

#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#         if bot_member.status != ChatMemberStatus.ADMINISTRATOR:
#             await message.answer(
#                 "ü´§ –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ", reply_markup=pr_menu_canc())
#             return

#         builder = InlineKeyboardBuilder()
#         builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
#         await message.answer(
#             "ü•≥ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>\n",
#             reply_markup=builder.as_markup())
#         user_id = message.from_user.id

#         await DB.add_chating_task(chat_id=code_chat_id, price=price)
#         await bot.send_message(code_chat_id, 'ü•≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
#         await state.clear()
#         tasks = await DB.get_chating_tasks()
#         for task in tasks:
#             print('–ó–∞–¥–∞–Ω–∏—è - ', task)
#     else:
#         await message.answer("ü´§ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É...", reply_markup=pr_menu_canc())




# @admin.callback_query(F.data == 'clean_task')
# async def delete_all_tasks(callback: types.CallbackQuery):
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="‚úÖ –î–ê", callback_data='clean_task_confirm'))
#     builder.add(types.InlineKeyboardButton(text="‚ùå –ù–ï–¢", callback_data='back_admin'))
#     await callback.message.edit_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è?', reply_markup=builder.as_markup())

# @admin.callback_query(F.data == 'clean_task_confirm')
# async def delete_all_tasks_confirm(callback: types.CallbackQuery):
#     # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
#     await DB.clear_tasks_and_refund()
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data='back_admin'))
#     await callback.message.edit_text('–í—Å–µ –∑–∞–¥–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã, –±–∞–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã', reply_markup=builder.as_markup())





# @admin.callback_query(F.data == 'sum_deposit')
# async def view_user_profile_handler(callback: types.CallbackQuery, state: FSMContext):
#     all_deps = await DB.get_total_deposits()
#     await callback.message.answer(f'—Å—É–º–º–∞ –≤—Å–µ—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π - {all_deps} usdt')


# @admin.callback_query(F.data == 'view_user_profile')
# async def view_user_profile_handler(callback: types.CallbackQuery, state: FSMContext):
#     await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', reply_markup=cancel_all_kb())
#     await state.set_state(AdminActions.view_user_profile)
#     await callback.answer()





# @admin.message(AdminActions.view_user_profile)
# async def get_user_profile(message: types.Message, state: FSMContext):
#     user_id = message.text
#     try:
#         user = await DB.select_user(user_id)
#         if user:

#             balance = user['balance'] if user['balance'] is not None else 0
#             rub_balance = user['rub_balance'] if user['rub_balance'] is not None else 0
#             # –ó–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#             tasks = await DB.get_tasks_by_user_admin(user_id)

#             chanel_tasks = [f"–ö–∞–Ω–∞–ª | task_id - {task_id}" for task_id, type in tasks if type == 1]
#             chat_tasks = [f"–ß–∞—Ç | task_id - {task_id}" for task_id, type in tasks if type == 2]
#             post_tasks = [f"–ü–æ—Å—Ç | task_id - {task_id}" for task_id, type in tasks if type == 3]

#             # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–∞—Ç–∞—Ö
#             donation_count = await DB.count_user_deposits(user_id)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ç–æ–≤
#             donation_sum = await DB.sum_user_deposits(user_id)  # —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–æ–≤

#             # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
#             referral_count = await DB.get_referred_users(user_id)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#             referral_earnings = await DB.get_earned_from_referrals(user_id)  # –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

#             # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
#             completed_tasks_count = await DB.count_user_completed_tasks(user_id)
#             approx_task_earnings = completed_tasks_count * 1700

#             # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
#             profile_text = f"""
# üÜî ID - <code>{user_id}</code> / <a href='tg://user?id={user_id}'>–ö–õ–ò–ö</a>

# üíµ MitCoin - {balance} $MICO
# üíµ –†—É–±–ª–∏ - {rub_balance}‚ÇΩ

# üíº –ó–∞–¥–∞–Ω–∏—è:

# {chr(10).join(chanel_tasks)}
# {chr(10).join(chat_tasks)}
# {chr(10).join(post_tasks)}

# –ü—Ä–∏–º–µ—Ä–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∑–∞–¥–∞–Ω–∏–π - {approx_task_earnings}

# üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ç–æ–≤ - {donation_count}
# üé∞ –°—É–º–º–∞ –¥–æ–Ω–∞—Ç–æ–≤ - {donation_sum}

# üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - {len(referral_count)}
# üí∏–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - {referral_earnings}
# """

#             # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#             builder = InlineKeyboardBuilder()
#             builder.add(types.InlineKeyboardButton(text="‚úè –ë–∞–ª–∞–Ω—Å", callback_data=f'update_balance:{user_id}'))
#             builder.add(types.InlineKeyboardButton(text="‚úè –†—É–± –ë–∞–ª–∞–Ω—Å", callback_data=f'update_rub_balance:{user_id}'))
#             await message.answer(profile_text, reply_markup=builder.as_markup())
#         else:
#             await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω üòì')
#     except Exception as e:
#         await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
#         print(e)
#     finally:
#         await state.clear()

















# @admin.callback_query(lambda c: c.data.startswith('update_balance:'))
# async def update_balance_handler(callback: types.CallbackQuery, state: FSMContext):
#     user_id = callback.data.split(':')[1]
#     await state.update_data(user_id=user_id)
#     await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
#     await state.set_state(AdminActions.update_balance)
#     await callback.answer()



# @admin.message(AdminActions.update_balance)
# async def set_new_balance(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     user_id = data['user_id']
#     new_balance = int(message.text)
#     await DB.update_balance(user_id, balance=new_balance)
#     await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_balance}.")
#     await state.clear()







# @admin.callback_query(lambda c: c.data.startswith('update_rub_balance:'))
# async def update_rub_balance_handler(callback: types.CallbackQuery, state: FSMContext):
#     user_id = callback.data.split(':')[1]
#     await state.update_data(user_id=user_id)
#     await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä—É–±–ª—è—Ö:')
#     await state.set_state(AdminActions.update_rub_balance)
#     await callback.answer()




# @admin.message(AdminActions.update_rub_balance)
# async def set_new_rub_balance(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     user_id = data['user_id']
#     new_balance = int(message.text)
#     await DB.update_rub_balance(user_id, rub_balance=new_balance)
#     await message.answer(f"–ë–∞–ª–∞–Ω—Å (–†—É–±–ª–∏) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_balance}.")
#     await state.clear()














# def generate_op_tasks_keyboard(op_tasks, oppage, total_pages):
#     builder = InlineKeyboardBuilder()

#     # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
#     for task in op_tasks:
#         chat_id = task[1]

#         button_text = f"{chat_id}"
#         # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
#         builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"optask_{task[0]}"))

#     # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
#     builder.row(types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å üî•", callback_data="create_op_task"))
#     builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin"))
#     # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
#     pagination = []
#     if oppage > 1:
#         pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"oppage_{oppage - 1}"))
#     pagination.append(types.InlineKeyboardButton(text=str(oppage), callback_data="current_page"))
#     if oppage < total_pages:
#         pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"oppage_{oppage + 1}"))

#     builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

#     return builder.as_markup()


# # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
# def paginate_op_tasks(tasks, oppage=1, per_page=5):
#     total_pages = (len(tasks) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
#     start_idx = (oppage - 1) * per_page
#     end_idx = start_idx + per_page
#     tasks_on_page = tasks[start_idx:end_idx]
#     return tasks_on_page, total_pages


# @admin.callback_query(F.data == 'op_pr_menu')
# async def chating_tasks_handler(callback: types.CallbackQuery):
#     tasks = await DB.get_op_tasks()
#     # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#     oppage = 1
#     tasks_on_page, total_pages = paginate_op_tasks(tasks, oppage)
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_op_tasks_keyboard(tasks_on_page, oppage, total_pages)
#     await callback.message.edit_text("–ö–∞–Ω–∞–ª—ã/—á–∞—Ç—ã –≤ –û–ü", reply_markup=keyboard)




# @admin.callback_query(lambda c: c.data.startswith("oppage_"))
# async def change_page_handler(callback: types.CallbackQuery):
#     oppage = int(callback.data.split('_')[1])
#     user_id = callback.from_user.id
#     tasks = await DB.get_op_tasks()

#     # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
#     tasks_on_page, total_pages = paginate_op_tasks(tasks, oppage)

#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_op_tasks_keyboard(tasks_on_page, oppage, total_pages)

#     await callback.message.edit_text("–ö–∞–Ω–∞–ª—ã/—á–∞—Ç—ã –≤ –û–ü", reply_markup=keyboard)




# @admin.callback_query(lambda c: c.data.startswith("optask_"))
# async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
#     await callback.answer()
#     task_id = int(callback.data.split('_')[1])
#     task = await DB.get_op_task_by_id(task_id)


#     target = task[1]
#     text = task[2]
#     try:
#         chat = await bot.get_chat(target)
#         chat_title = chat.title
#     except:
#         chat_title = "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"
#     task_info = f"""
# –ù–∞–∑–≤–∞–Ω–∏–µ - <b>{chat_title}</b>

# –¢–µ–∫—Å—Ç - {text}

# {target}  
#     """
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="op_pr_menu"))
#     builder.add(types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"opdelete_{task_id}"))
#     await callback.message.edit_text(task_info, reply_markup=builder.as_markup())






# @admin.callback_query(lambda c: c.data.startswith("opdelete_"))
# async def delete_task_handler(callback: types.CallbackQuery):
#     task_id = int(callback.data.split('_')[1])

#     # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     await DB.delete_op_task(task_id)
#     await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–æ!")

#     # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –∑–∞–¥–∞–Ω–∏—è–º

#     tasks = await DB.get_op_tasks()
#     oppage = 1
#     tasks_on_page, total_pages = paginate_tasks(tasks, oppage)
#     keyboard = generate_op_tasks_keyboard(tasks_on_page, oppage, total_pages)

#     await callback.message.edit_text("–ß–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã –≤ –û–ü", reply_markup=keyboard)







# @admin.callback_query(F.data == 'create_op_task')
# async def create_op_task_handler(callback: types.CallbackQuery, state: FSMContext):
#     await callback.answer()
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="back_admin"))
#     await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º–∞, –ø—Ä–∏–º–µ—Ä - @telegram", reply_markup=builder.as_markup())
#     await state.set_state(create_op_tasks.create_op_task)

# @admin.message(create_op_tasks.create_op_task)
# async def create_op_task_handler2(message: types.Message, state: FSMContext, bot: Bot):
#     target_id = message.text.strip()
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="back_admin"))
#     await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞",
#                                      reply_markup=builder.as_markup())
#     await state.update_data(target_id=target_id)
#     await state.set_state(create_op_tasks.create_op_task2)

# @admin.message(create_op_tasks.create_op_task2)
# async def create_op_task_handler2(message: types.Message, state: FSMContext, bot: Bot):
#     text = message.text.strip()
#     data = await state.get_data()
#     target_id = data.get('target_id')

#     await DB.add_op_task(target_id, text)
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
#     await message.answer("ü•≥ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫ –û–ü", reply_markup=builder.as_markup())
#     await state.clear()


















# # –ù–∞–∑–Ω–∞—á–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π



# def generate_tasks_keyboard_report(reports, reportpage, total_pages):
#     builder = InlineKeyboardBuilder()

#     # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
#     for report in reports:

#         id = report[0]
#         button_text = f"‚Ññ{id}"
#         # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
#         builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"report_{report[0]}"))

#     # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
#     builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin"))
#     # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
#     pagination = []
#     if reportpage > 1:
#         pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"reportpage_{reportpage - 1}"))
#     pagination.append(types.InlineKeyboardButton(text=str(reportpage), callback_data="current_page"))
#     if reportpage < total_pages:
#         pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"reportpage_{reportpage + 1}"))

#     builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

#     return builder.as_markup()


# # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
# def paginate_tasks_report(reports, reportpage=1, per_page=5):
#     total_pages = (len(reports) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
#     start_idx = (reportpage - 1) * per_page
#     end_idx = start_idx + per_page
#     tasks_on_page = reports[start_idx:end_idx]
#     return tasks_on_page, total_pages


# @admin.callback_query(F.data == 'reports_list_menu')
# async def chating_tasks_handler(callback: types.CallbackQuery, bot: Bot):
#     user_id = callback.from_user.id
#     reports = await DB.get_reports()

#     # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#     reportpage = 1
#     tasks_on_page, total_pages = paginate_tasks_report(reports, reportpage)

#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_tasks_keyboard_report(tasks_on_page, reportpage, total_pages)

#     await callback.message.edit_text("–í—Å–µ —Ä–µ–ø–æ—Ä—Ç—ã:", reply_markup=keyboard)




# @admin.callback_query(lambda c: c.data.startswith("reportpage_"))
# async def change_page_handler(callback: types.CallbackQuery):
#     reportpage = int(callback.data.split('_')[1])
#     user_id = callback.from_user.id
#     reports = await DB.get_reports()

#     # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
#     tasks_on_page, total_pages = paginate_tasks_report(reports, reportpage)

#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     keyboard = generate_tasks_keyboard_report(tasks_on_page, reportpage, total_pages)

#     await callback.message.edit_text("–í—Å–µ —Ä–µ–ø–æ—Ä—Ç—ã:", reply_markup=keyboard)



# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
# async def check_admin_and_get_invite_link_report(bot, chat_id):
#     try:
#         chat_administrators = await bot.get_chat_administrators(chat_id)
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#         for admin in chat_administrators:
#             if admin.user.id == bot.id:
#                 try:
#                     ChatFullInfo = await bot.get_chat(chat_id)
#                     invite_link = ChatFullInfo.invite_link
#                     if invite_link is None:
#                         return "–ë–æ—Ç –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ, –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"
#                     return invite_link

#                 except Exception as e:
#                     print(f'–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞ –¥–ª—è {chat_id}, –æ—à–∏–±–∫–∞ - {e}')
#                     return "–ë–æ—Ç –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ, –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"
#         # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω
#         return "–ë–æ—Ç –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ, –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"
#     except:
#         return "–ë–æ—Ç –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ, –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"

# @admin.callback_query(lambda c: c.data.startswith("report_"))
# async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
#     await callback.answer()
#     report_id = int(callback.data.split('_')[1])
#     try:
#         report = await DB.get_report(report_id)
#     except:
#         await callback.message.answer('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ—Ä—Ç–µ')
#         return
#     try:
#         reporter = report[3]
#     except:
#         reporter = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç"

#     try:
#         task_id = report[1]
#         chat_id = report[2]
#         report_id = report[0]
#     except:
#         task_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç"
#         chat_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç –∞–π–¥–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç"
#         report_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç"

#     try:
#         task = await DB.get_task_by_id(task_id)
#         if task is None:
#             keyboard_builder = InlineKeyboardBuilder()
#             # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
#             keyboard_builder.add(
#                 InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"reporttaskdelete_{task_id}_{report_id}"),
#                 InlineKeyboardButton(text="‚ùåüíµ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+–≤–æ–∑–≤—Ä–∞—Ç MIT) ",
#                                      callback_data=f"taskcashbackdelete_{task_id}_{report_id}"),
#                 InlineKeyboardButton(text="‚ùå‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+ –ë–ê–ù)",
#                                      callback_data=f"taskbandelete_{task_id}_{report_id}"),
#                 InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", callback_data=f"reportdelete_{report_id}"),
#                 InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_list_menu")

#             )

#             # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É (1 –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Ä—è–¥)
#             keyboard_builder.adjust(1)
#             # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#             keyboard = keyboard_builder.as_markup()
#             await callback.message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏, –æ—à–∏–±–∫–∞',
#                                           reply_markup=keyboard)
#             return

#     except Exception as e:
#         task = None
#         keyboard_builder = InlineKeyboardBuilder()
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
#         keyboard_builder.add(
#             InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"reporttaskdelete_{task_id}_{report_id}"),
#             InlineKeyboardButton(text="‚ùåüíµ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+–≤–æ–∑–≤—Ä–∞—Ç MIT) ",
#                                  callback_data=f"taskcashbackdelete_{task_id}_{report_id}"),
#             InlineKeyboardButton(text="‚ùå‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+ –ë–ê–ù)",
#                                  callback_data=f"taskbandelete_{task_id}_{report_id}"),
#             InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", callback_data=f"reportdelete_{report_id}"),
#             InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_list_menu")

#         )

#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É (1 –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Ä—è–¥)
#         keyboard_builder.adjust(1)
#         # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#         keyboard = keyboard_builder.as_markup()
#         await callback.message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏, –æ—à–∏–±–∫–∞ - {e}', reply_markup=keyboard)
#         return

#     if task[1]:
#         user_id_creator = task[1]
#     else:
#         user_id_creator = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"

#     chat_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
#     invite_link = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É"
#     if task[4] in [1, 2]:
#         invite_link = await check_admin_and_get_invite_link_report(bot, report[2])
#         try:
#             chat = await bot.get_chat(chat_id)
#             chat_title = chat.title
#         except:
#             chat_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
#     elif task[4] in [3]:
#         chat_id_post, message_id = map(int, chat_id.split(":"))
#         chat_title = "–ü–æ—Å—Ç"
#         invite_link = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç"
#         try:
#             await bot.forward_message(chat_id=callback.from_user.id, from_chat_id=chat_id_post, message_id=message_id)
#         except:
#             await callback.message.answer('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–Ω —É–¥–∞–ª–µ–Ω)')
#     task_info = f"""
# ID —Ä–µ–ø–æ—Ä—Ç–∞ - {report_id}
# –û–±—ä–µ–∫—Ç —Ä–µ–ø–æ—Ä—Ç–∞ - {chat_title}

# –ö—Ç–æ –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è - <a href='tg://user?id={reporter}'>{reporter}</a>
# –ö—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞–Ω–∏–µ - <code>{user_id_creator}</code>
# ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –∏–ª–∏ –∫–æ–¥ –ø–æ—Å—Ç–∞ (—á–∞—Ç_–∞–π–¥–∏:–º–µ—Å—Å–µ–¥–∂_–∞–π–¥–∏)- <code>{chat_id}</code> 
# ID –∑–∞–¥–∞–Ω–∏—è - <code>{task_id}</code>

# –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç - {invite_link}

# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: <code>{report[4]}</code>

# <i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—è:</i>    
#     """
#     keyboard_builder = InlineKeyboardBuilder()
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
#     keyboard_builder.add(
#         InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"reporttaskdelete_{task_id}_{report_id}"),
#         InlineKeyboardButton(text="‚ùåüíµ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+–≤–æ–∑–≤—Ä–∞—Ç MIT) ", callback_data=f"taskcashbackdelete_{task_id}_{report_id}"),
#         InlineKeyboardButton(text="‚ùå‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (+ –ë–ê–ù)", callback_data=f"taskbandelete_{task_id}_{report_id}"),
#         InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", callback_data=f"reportdelete_{report_id}"),
#         InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_list_menu")

#     )

#     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É (1 –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Ä—è–¥)
#     keyboard_builder.adjust(1)
#     # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#     keyboard = keyboard_builder.as_markup()

#     await callback.message.answer(task_info, reply_markup=keyboard)






# @admin.callback_query(lambda c: c.data.startswith("reporttaskdelete_"))
# async def delete_task_handler(callback: types.CallbackQuery):
#     task_id = int(callback.data.split('_')[1])
#     report_id = int(callback.data.split('_')[2])

#     # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     await DB.delete_task(task_id)
#     await DB.delete_report(report_id)
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–ø–æ—Ä—Ç—ã", callback_data="reports_list_menu"))
#     await callback.message.edit_text(f'‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_id} —É–¥–∞–ª–µ–Ω–æ! –ú–æ–Ω–µ—Ç—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ù–ï –±—ã–ª–∏', reply_markup=builder.as_markup())

# @admin.callback_query(lambda c: c.data.startswith("taskcashbackdelete_"))
# async def delete_task_handler(callback: types.CallbackQuery):
#     task_id = int(callback.data.split('_')[1])
#     report_id = int(callback.data.split('_')[2])
#     price = 0
#     task = await DB.get_task_by_id(task_id)

#     if task[4] == 1:
#         price = 2000
#     elif task[4] == 2:
#         price = 3000
#     elif task[4] == 3:
#         price = 200

#     amounts = task[3]
#     user_id = task[1]
#     new_balance = amounts*price

#     # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     await DB.delete_task(task_id)
#     await DB.add_balance(user_id, amount=new_balance)
#     await DB.delete_report(report_id)
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–ø–æ—Ä—Ç—ã", callback_data="reports_list_menu"))
#     await callback.message.edit_text(f'‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_id} —É–¥–∞–ª–µ–Ω–æ! –°–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞–¥–∞–Ω–∏—è (<code>{user_id}</code>) –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {new_balance} MitCoin', reply_markup=builder.as_markup())


# @admin.callback_query(lambda c: c.data.startswith("taskbandelete_"))
# async def delete_task_handler(callback: types.CallbackQuery):
#     task_id = int(callback.data.split('_')[1])
#     report_id = int(callback.data.split('_')[2])
#     task = await DB.get_task_by_id(task_id)
#     user_id = task[1]

#     new_balance = -10000000
#     # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     await DB.delete_task(task_id)
#     await DB.update_balance(user_id, new_balance)
#     await DB.delete_report(report_id)
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–ø–æ—Ä—Ç—ã", callback_data="reports_list_menu"))
#     await callback.message.edit_text(f'‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_id} —É–¥–∞–ª–µ–Ω–æ! –°–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞–¥–∞–Ω–∏—è (<code>{user_id}</code>) –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å {new_balance}', reply_markup=builder.as_markup())


# @admin.callback_query(lambda c: c.data.startswith("reportdelete_"))
# async def delete_task_handler(callback: types.CallbackQuery):
#     report_id = int(callback.data.split('_')[1])

#     # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     await DB.delete_report(report_id)
#     builder = InlineKeyboardBuilder()
#     builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–ø–æ—Ä—Ç—ã", callback_data="reports_list_menu"))
#     await callback.message.edit_text(f'‚ùå –†–µ–ø–æ—Ä—Ç ‚Ññ{report_id} –±—ã–ª —É–¥–∞–ª–µ–Ω –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=builder.as_markup())


















# @admin.callback_query(F.data == 'stats')
# async def stats_handler(callback: types.CallbackQuery):
#     user_count = len(await DB.select_all())

#     text = f"""
#     –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

# –í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤: {user_count}"""

#     await callback.message.answer(text)
#     await callback.answer()


# @admin.callback_query(F.data == 'upload')
# async def upload_handler(callback: types.CallbackQuery, bot: Bot):
#     users = await DB.select_all()

#     with open('users.txt', 'w') as file:
#         for user in users:
#             file.write(f"{user['user_id']}, @{user['username']}, balance - {user['balance']}\n")

#     input_file = types.FSInputFile('users.txt')

#     await bot.send_document(chat_id=callback.from_user.id, document=input_file)
#     os.remove('./users.txt')
#     await callback.answer()






# @admin.callback_query(F.data == 'mailing')
# async def mailing_handler(callback: types.CallbackQuery, state: FSMContext):
#     builder = InlineKeyboardBuilder()
#     builder.add(
#         types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back_admin_not_clear'),
#         types.InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data='stop_mailing')
#     )
#     await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=builder.as_markup())
#     await state.set_state(MailingStates.message)
#     await callback.answer()

# @admin.message(MailingStates.message)
# async def mailing_get_msg(message: types.Message, state: FSMContext, bot: Bot):
#     text = message.text
#     users = await DB.select_all()
#     if not users:
#         await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
#         await state.clear()
#         return

#     total_users = len(users)
#     completed_users = 0
#     dead_users = 0

#     builder = InlineKeyboardBuilder()
#     builder.add(
#         types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back_admin_not_clear'),
#         types.InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data='stop_mailing')
#     )

#     progress_message = await message.answer(
#         f"üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å</b>\n\n"
#         f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n",
#         reply_markup=builder.as_markup()
#     )

#     await state.set_state(MailingStates.progress)
#     await state.update_data(stop_flag=False)

#     async def update_progress():
#         previous_text = None
#         while True:
#             data = await state.get_data()
#             if data.get('stop_flag', False):
#                 break
#             await asyncio.sleep(5)
#             current_text = (
#                 f"üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
#                 f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
#                 f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {completed_users}\n"
#                 f"üíÄ –ú–µ—Ä—Ç–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {dead_users}"
#             )
#             if current_text != previous_text:
#                 try:
#                     await progress_message.edit_text(
#                         current_text,
#                         reply_markup=builder.as_markup()
#                     )
#                     previous_text = current_text
#                 except TelegramBadRequest as e:
#                     if "message is not modified" in str(e):
#                         continue
#                     raise

#     asyncio.create_task(update_progress())

#     for user in users:
#         data = await state.get_data()
#         if data.get('stop_flag', False):
#             break
#         try:
#             user_id = message.from_user.id
#             await bot.copy_message(
#                 chat_id=int(user['user_id']),
#                 from_chat_id=message.from_user.id,
#                 message_id=message.message_id,
#                 reply_markup=back_menu_kb(user_id)
#             )
#             completed_users += 1
#             await asyncio.sleep(0.1)
#         except TelegramForbiddenError:
#             dead_users += 1

#         except Exception as e:
#             dead_users += 1
#             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")

#     await state.clear()
#     await progress_message.answer(
#         f"<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
#         f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
#         f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {completed_users}\n"
#         f"üíÄ –ú–µ—Ä—Ç–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {dead_users}",
#         reply_markup=builder.as_markup()
#     )

# @admin.callback_query(F.data == 'stop_mailing')
# async def stop_mailing(callback: types.CallbackQuery, state: FSMContext):
#     await state.update_data(stop_flag=True)
#     await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
#     await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


# class EditChannelStates(StatesGroup):
#     waiting_for_name = State()
#     waiting_for_username = State()

# @admin.callback_query(F.data =='show_op')
# async def show_op(callback: types.CallbackQuery):
#     user_id = callback.from_user.id

#     if user_id not in ADMINS_ID:
#         await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
#         return

#     channels = await DB.all_channels_op()
#     if not channels:
#         kb = InlineKeyboardBuilder()
#         kb.add(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –û–ü',callback_data='add_op'))
#         kb.add(InlineKeyboardButton(text='–í—ã—Ö–æ–¥',callback_data='admin_kb'))
#         kb.adjust(1)
#         await callback.message.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –û–ü –ø—É—Å—Ç.", reply_markup=kb.as_markup())

#         return 

#     keyboard = InlineKeyboardBuilder()
#     for channel in channels:
#         channel_id, channel_name = channel
#         keyboard.add(InlineKeyboardButton(text=channel_name, callback_data=f"channel:{channel_id}"))
#     keyboard.add(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –û–ü',callback_data='add_op'))
#     keyboard.add(InlineKeyboardButton(text='–í—ã—Ö–æ–¥',callback_data='admin_kb'))
#     keyboard.adjust(1) 
#     await callback.message.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –û–ü:", reply_markup=keyboard.as_markup())



# # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
# class AddChannelStates(StatesGroup):
#     waiting_for_username = State()
#     waiting_for_name = State()

# # –ö–æ–º–∞–Ω–¥–∞ /add_channel
# @admin.callback_query(F.data == 'add_op')
# async def add_channel(callback: types.CallbackQuery, state: FSMContext):
#     user_id = callback.from_user.id

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#     if user_id not in ADMINS_ID:
#         await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
#         return

#     # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º @username –∫–∞–Ω–∞–ª–∞
#     await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @my_channel):")
#     await state.set_state(AddChannelStates.waiting_for_username)

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ @username –∫–∞–Ω–∞–ª–∞
# @admin.message(AddChannelStates.waiting_for_username)
# async def process_username(message: types.Message, state: FSMContext):
#     username = message.text.strip()

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @
#     if not username.startswith('@'):
#         await message.answer("Username –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#         return

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
#     await state.update_data(channel_username=username)

#     # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, My Channel):")
#     await state.set_state(AddChannelStates.waiting_for_name)

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
# @admin.message(AddChannelStates.waiting_for_name)
# async def process_name(message: types.Message, state: FSMContext):
#     channel_name = message.text.strip()

#     # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π username –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#     data = await state.get_data()
#     channel_username = data.get('channel_username')

#     try:
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –º–µ—Ç–æ–¥)
#         await DB.add_chanell_op(channel_username, channel_name)

#         await message.answer(f"–ö–∞–Ω–∞–ª {channel_name} (@{channel_username}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –û–ü.")
#     except Exception as e:
#         await message.answer(f"–û—à–∏–±–∫–∞: {e}")
#     finally:
#         # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#         await state.clear()


# @admin.callback_query(F.data.startswith('channel:'))
# async def process_channel_button(callback_query: types.CallbackQuery):
#     channel_id = callback_query.data.split(':')[1]
#     print(channel_id)
#     channel_info = await DB.get_channel_info(channel_id)

#     if not channel_info:
#         await callback_query.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#         return

#     channel_id, channel_name, channel_username = channel_info

#     keyboard = InlineKeyboardBuilder()
#     keyboard.add(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"update_name:{channel_id}"))
#     keyboard.add(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å username", callback_data=f"update_username:{channel_id}"))
#     keyboard.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"opdelete:{channel_id}"))
#     keyboard.adjust(1)
#     await callback_query.message.answer( 
#         f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:\n\nID: {channel_id}\n–ò–º—è: {channel_name}\nUsername: {channel_username}",
#         reply_markup=keyboard.as_markup()
#     )
#     await callback_query.answer()

# @admin.callback_query(F.data.startswith('update_name:'))
# async def edit_channel_name(callback_query: types.CallbackQuery, state: FSMContext):
#     channel_id = callback_query.data.split(':')[1]
#     await state.update_data(channel_id=channel_id)
#     await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞:")
#     await state.set_state(EditChannelStates.waiting_for_name)

# @admin.callback_query(F.data.startswith('update_username:'))
# async def edit_channel_username(callback_query: types.CallbackQuery, state: FSMContext):
#     channel_name = callback_query.data.split(':')[1]
#     await state.update_data(channel_name=channel_name)
#     await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π @username –∫–∞–Ω–∞–ª–∞:")
#     await state.set_state(EditChannelStates.waiting_for_username)

# @admin.message(EditChannelStates.waiting_for_name)
# async def process_new_name(message: types.Message, state: FSMContext):
#     new_name = message.text.strip()
#     data = await state.get_data()
#     channel_id = data['channel_id']

#     await DB.update_channel_name(channel_id, new_name)
#     await message.answer("–ò–º—è –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=admin_kb())
#     await state.clear()

# @admin.message(EditChannelStates.waiting_for_username)
# async def process_new_username(message: types.Message, state: FSMContext):
#     new_username = message.text.strip()
#     data = await state.get_data()
#     channel_name = data['channel_name']

#     if not new_username.startswith('@'):
#         await message.answer("Username –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#         return

#     await DB.update_channel_username(channel_name, new_username)
#     await message.answer("Username –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
#     await state.clear()

# @admin.callback_query(F.data.startswith('opdelete:'))
# async def delete_channel(callback_query: types.CallbackQuery):
#     channel_id = callback_query.data.split(':')[1]
#     print(channel_id)
#     await DB.delete_channel(channel_id)
#     await callback_query.message.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
#     await callback_query.answer()



# @admin.message(Command('premiumusers'))
# async def premium_users_handler(message: types.Message):
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     sent_message = await message.answer('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å! –û–∂–∏–¥–∞–π—Ç–µ...')
    
#     premium_users = 0
#     all_users = await DB.get_all_users()
#     total_users = len(all_users)
#     count = 0

#     # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#     for user in all_users:
#         count += 1
#         user_id = user[1]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ user_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ 1

#         try:
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram Premium
#             from client import check_premium
#             prem = await check_premium(user_id)

#             if prem:
#                 premium_users += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–º–∏—É–º

#             # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
#             if count % 10 == 0 or count == total_users:
#                 await sent_message.edit_text(
#                     f'–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å! –û–∂–∏–¥–∞–π—Ç–µ...\n'
#                     f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {count} –∏–∑ {total_users}\n'
#                     f'–ù–∞–π–¥–µ–Ω–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}'
#                 )
#         except Exception as e:
#             # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
#             continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     await sent_message.edit_text(
#         f'–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n'
#         f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n'
#         f'Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}'
#     ) 

# # from client import update_premium_users2

# # @admin.message(Command('update_premium_users'))
# # async def _(message: types.Message, bot: Bot):
# #     await message.answer('–û–±–Ω–æ–≤–ª—è—é') 
# #     await update_premium_users2(bot)
# #     await message.answer('–ó–∞–≤–µ—Ä—à–µ–Ω–æ')

# @admin.callback_query(F.data == 'back_admin_not_clear')
# async def mailing_handler(callback: types.CallbackQuery, state: FSMContext):

#     if callback.from_user.id in ADMINS_ID:
#         await callback.message.edit_text('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=admin_kb())


# @admin.callback_query(F.data == 'back_admin')
# async def mailing_handler(callback: types.CallbackQuery, state: FSMContext):
#     await state.clear()
#     if callback.from_user.id in ADMINS_ID:
#         await callback.message.edit_text('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=admin_kb())

# @admin.message(Command('admin'))
# async def admin_cmd(message: types.Message):
#     if message.from_user.id in ADMINS_ID:
#         await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=admin_kb())

# @admin.callback_query(F.data == 'admin_kb2')
# async def admin_kb2_handler(callback: types.CallbackQuery):
#     if callback.from_user.id in ADMINS_ID:  
#         await callback.message.edit_text('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=admin_kb2())
#         await callback.answer() 

# @admin.callback_query(F.data == 'admin_kb')
# async def admin_kb_handler(callback: types.CallbackQuery):
#     if callback.from_user.id in ADMINS_ID:  
#         await callback.message.edit_text('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=admin_kb())
#         await callback.answer()  


# class add_mining(StatesGroup):
#     id = State()
#     id2 = State()


# @admin.callback_query(F.data == 'adminMining')
# async def _(callback: types.CallbackQuery, state: FSMContext):
#     kb = InlineKeyboardBuilder()
#     kb.add(InlineKeyboardButton(text='‚ûï –í—ã–¥–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥', callback_data='add_mining'))
#     kb.add(InlineKeyboardButton(text='‚ûñ –ó–∞–±—Ä–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥', callback_data='minus_mining'))
#     kb.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='admin_kb'))
#     kb.adjust(1)
#     await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ: ', reply_markup=kb.as_markup())

# @admin.callback_query(F.data == 'add_mining')
# async def _(callback: types.CallbackQuery, state: FSMContext):
#     await state.set_state(add_mining.id)
#     await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ id')

# @admin.callback_query(F.data == 'minus_mining')
# async def _(callback: types.CallbackQuery, state: FSMContext):
#     await state.set_state(add_mining.id2)
#     await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ id')

# @admin.message(add_mining.id)
# async def _(message: types.Message, state: FSMContext, bot: Bot):
#     user_id = message.text  # Get the ID from the user's message
#     await state.update_data(id=user_id)  # Store it in state data
#     date = await state.get_data()
    
#     try:
#         a = await DB.add_mining(date['id'])
#         if a:
#             await bot.send_message(date['id'], '–í–∞–º –≤—ã–¥–∞–Ω –º–∞–π–Ω–∏–Ω–≥!')
#             await message.answer(f'–í—ã –≤—ã–¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å Id {date["id"]} –º–∞–π–Ω–∏–Ω–≥')
#         else:
#             await message.answer('–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥')
#     except Exception as e:
#         await message.answer(f'–û—à–∏–±–∫–∞: {e}')
#     finally:
#         await state.clear()

# @admin.message(add_mining.id2)
# async def _(message: types.Message, state: FSMContext, bot: Bot):
#     user_id = message.text  # Get the ID from the user's message
#     await state.update_data(id2=user_id)  # Store it in state data
#     date = await state.get_data()
    
#     try:
#         a = await DB.remove_mining(date['id2'])
#         if a:
#             await message.answer(f'–í—ã –∑–∞–±—Ä–∞–ª–∏ –º–∞–π–Ω–∏–Ω–≥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Id {date["id2"]}')
#         else:
#             await message.answer('–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –Ω–µ—Ç—É –º–∞–π–Ω–∏–Ω–≥–∞!')
#     except Exception as e:
#         await message.answer(f'–û—à–∏–±–∫–∞: {e}')
#     finally:
#         await state.clear()


# @admin.callback_query(F.data=='adminAllOP')
# async def _(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
#     kb = InlineKeyboardBuilder()
#     kb.add(InlineKeyboardButton(text='–†–µ–∫–ª–∞–º–∞ –≤ –û–ü', callback_data='op_pr_menu'))
#     kb.add(InlineKeyboardButton(text='–û–ü –≤ –±–æ–Ω—É—Å–∞—Ö', callback_data='bonus_admin'))
#     kb.add(InlineKeyboardButton(text='–û–ü', callback_data='show_op'))
#     kb.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='admin_kb'))
#     kb.adjust(1)
#     await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ: ', reply_markup=kb.as_markup())


# @admin.callback_query(F.data == 'detailed_stats')
# async def show_stats_menu(callback: types.CallbackQuery):
#     await callback.message.edit_text(
#         "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
#         reply_markup=get_stats_menu()
#     )
#     await callback.answer()

# @admin.callback_query(F.data == 'admin_back')
# async def back_to_admin_menu(callback: types.CallbackQuery):
#     await callback.message.edit_text(
#         "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>",
#         reply_markup=admin_kb()
#     )
#     await callback.answer()

# @admin.callback_query(F.data.startswith('stats_'))
# async def handle_stats_request(callback: types.CallbackQuery):
#     stat_type = callback.data.split('_')[1]
    
#     # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É callback_data –∏ –ø–æ–ª—è–º–∏ –≤ –ë–î
#     stat_mapping = {
#         'users': ('add_users', '–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
#         'subschanel': ('all_subs_chanel', '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª', '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'),
#         'subsgroups': ('all_subs_groups', '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã', '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'),
#         'tasks': ('all_tasks', '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
#         'views': ('all_see', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
#         'gifts': ('gift', '–ü–æ–¥–∞—Ä–∫–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
#         'boosts': ('boosts', '–ë—É—Å—Ç—ã', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
#         'likes': ('likes', '–õ–∞–π–∫–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
#         'links': ('links', '–ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—Å—ã–ª–∫–∞–º', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
#         'comments': ('comments', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
#         'mined': ('mined', '–î–æ–±—ã—á–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
#     }
#     print(stat_type) 
#     if stat_type not in stat_mapping:
#         await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
#         return
    
#     db_field, title, ylabel = stat_mapping[stat_type]

#     try:
#         graph = await DB.create_statistics_graph(
#             stat_type=db_field,
#             title=title,
#             ylabel=ylabel
#         )
        
#         if graph is not None:
#             await callback.message.answer_photo(
#                 photo=graph,
#                 caption=f"üìä {title} –∑–∞ 30 –¥–Ω–µ–π"
#             )
#         else:
#             await callback.answer(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {title.lower()}")
            
#     except Exception as e:
#         await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
    
#     await callback.answer() 























# # –ü–†–û–ú–û –ü–†–û–ú–û –ü–†–û–ú–û

# from datetime import datetime, timedelta
# import random
# import string
# from typing import Union


# # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
# class PromoStates(StatesGroup):
#     waiting_amount = State()
#     waiting_name = State()
#     waiting_name_manual = State()
#     waiting_where = State()
#     waiting_count = State()
#     waiting_days = State()

# # 3. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
# def generate_promo_code(length=8):
#     chars = string.ascii_uppercase + string.digits
#     return ''.join(random.choice(chars) for _ in range(length))


# # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
# @admin.callback_query(F.data == "promocreate")
# async def create_promo_start(callback: types.CallbackQuery, state: FSMContext):
#     """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
#     print('p')
#     await callback.message.edit_text(
#         "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–∞:",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
#         ])
#     )
#     await state.set_state(PromoStates.waiting_amount)
#     await state.update_data(creator_id=callback.from_user.id)

# @admin.message(PromoStates.waiting_amount)
# async def promo_get_amount(message: types.Message, state: FSMContext):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
#     try:
#         amount = float(message.text)
#         if amount <= 0:
#             raise ValueError
#         await state.update_data(amount=amount)
        
#         # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
#         auto_promo = generate_promo_code()
#         markup = InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text=f"üî¢ {auto_promo}", callback_data=f"use_auto_promo:{auto_promo}")],
#             [InlineKeyboardButton(text="‚úè –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="enter_manually")],
#             [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
#         ])
        
#         await message.answer(
#             "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
#             reply_markup=markup
#         )
#         await state.set_state(PromoStates.waiting_name)
#     except ValueError:
#         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")

# @admin.callback_query(F.data.startswith("use_auto_promo:"), PromoStates.waiting_name)
# async def use_auto_promo(callback: types.CallbackQuery, state: FSMContext):
#     """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
#     promo_name = callback.data.split(":")[1]
#     await state.update_data(name=promo_name)
#     await promo_select_where(callback.message, state)

# @admin.callback_query(F.data == "enter_manually", PromoStates.waiting_name)
# async def enter_promo_manually(callback: types.CallbackQuery, state: FSMContext):
#     """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤—Ä—É—á–Ω—É—é"""
#     await callback.message.edit_text(
#         "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
#         ])
#     )
#     await state.set_state(PromoStates.waiting_name_manual)

# @admin.message(PromoStates.waiting_name_manual)
# async def promo_get_name_manual(message: types.Message, state: FSMContext):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤—Ä—É—á–Ω—É—é"""
#     if len(message.text) < 3:
#         await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞:")
#         return
    
#     await state.update_data(name=message.text.strip())
#     await promo_select_where(message, state)

# async def promo_select_where(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
#     """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"""
#     markup = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="MICO", callback_data="where:def_bal")],
#         [InlineKeyboardButton(text="RUB", callback_data="where:def_bal_rub")],
#         [InlineKeyboardButton(text="Stars", callback_data="where:stars")],
#         [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
#     ])
    
#     if isinstance(message, types.CallbackQuery):
#         await message.message.edit_text(
#             "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –Ω–∞—á–∏—Å–ª—è—Ç—å –±–æ–Ω—É—Å:",
#             reply_markup=markup
#         )
#     else:
#         await message.answer(
#             "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –Ω–∞—á–∏—Å–ª—è—Ç—å –±–æ–Ω—É—Å:",
#             reply_markup=markup
#         )
#     await state.set_state(PromoStates.waiting_where)

# @admin.callback_query(F.data.startswith("where:"), PromoStates.waiting_where)
# async def promo_get_where(callback: types.CallbackQuery, state: FSMContext):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"""
#     where_to = callback.data.split(":")[1]
#     await state.update_data(where_to=where_to)
    
#     await callback.message.edit_text(
#         "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
#         ])
#     )
#     await state.set_state(PromoStates.waiting_count)

# @admin.message(PromoStates.waiting_count)
# async def promo_get_count(message: types.Message, state: FSMContext):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π"""
#     try:
#         count = int(message.text)
#         if count <= 0:
#             raise ValueError
            
#         await state.update_data(count=count)
        
#         await message.answer(
#             "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö:",
#             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#                 [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
#             ])
#         )
#         await state.set_state(PromoStates.waiting_days)
#     except ValueError:
#         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")

# @admin.message(PromoStates.waiting_days)
# async def promo_get_days(message: types.Message, state: FSMContext):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
#     try:
#         days = int(message.text)
#         if days <= 0:
#             raise ValueError
            
#         data = await state.get_data()
        
#         # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
#         await Promo.create(
#             creator_id=data['creator_id'],
#             name=data['name'],
#             amount=data['amount'],
#             where_to=data['where_to'],
#             count=data['count'],
#             days=days
#         )
        
#         await message.answer(
#             f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
#             f"üî¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{data['name']}</code>\n"
#             f"üí∞ –°—É–º–º–∞: {data['amount']}\n"
#             f"üìå –¢–∏–ø: {data['where_to']}\n"
#             f"üî¢ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {data['count']}\n"
#             f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π",
#             reply_markup=admin_kb()
#         )
#         await state.clear()
#     except ValueError:
#         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")


# class edit_sell_currency(StatesGroup):
#     amount = State()


# @admin.callback_query(F.data.startswith("editSellCurrency"))
# async def _(callback: types.CallbackQuery, state: FSMContext):
#     await state.set_state(edit_sell_currency.amount)
#     currency = await DB.get_stars_sell_currency()
#     await callback.message.edit_text(f'–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ –∑–≤—ë–∑–¥\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {currency[0]}')

# @admin.message(edit_sell_currency.amount)
# async def edit_currency_handler(message: types.Message, state: FSMContext):
#     try:
#         # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ float
#         new_currency_value = float(message.text)
        
#         # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
#         await DB.update_buy_sell_currency(new_currency_value)
        
#         await message.answer('‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')
#     except ValueError:
#         await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
#     except Exception as e:
#         await message.answer(f'‚ùå –û—à–∏–±–∫–∞: {e}')
#     finally:
#         await state.clear()