from untils.Imports import *

casino = Router()

task_cache = {}
task_cache_chat = {}


# CHECK_CHAT_ID = -4792065005 # ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π
# DB_CHAT_ID = -4683486408
# INFO_ID = -4784146602
# TASKS_CHAT_ID = -1002291978719



# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
GAME_COEFFICIENTS = {
    'dice': {
        'even': 1.5,      # –ß—ë—Ç–Ω–æ–µ
        'odd': 1.5,       # –ù–µ—á—ë—Ç–Ω–æ–µ
        'greater': 1.5,    # –ë–æ–ª—å—à–µ
        'less': 1.5,       # –ú–µ–Ω—å—à–µ
        'exact': 3      # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    },
    'basketball': 1.5,    # –ë–∞—Å–∫–µ—Ç–±–æ–ª
    'football': 1.5,      # –§—É—Ç–±–æ–ª
    'darts': {          # –î–∞—Ä—Ç—Å
        'bullseye': 3,   # –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä
        'outer': 0     # –ü–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ –∫—Ä–∞—è–º
    }, 
    'casino': {         # –ö–∞–∑–∏–Ω–æ
        'three_7': 1,   # –¢—Ä–∏ —Å–µ–º–µ—Ä–∫–∏
        'three_any': 3, # –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö (–Ω–µ 7)
        'two': 0       # –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
    }
} 

class GameStates(StatesGroup):
    waiting_for_bet = State()
    waiting_for_exact_number = State()
    waiting_for_custom_bet = State()
    request_message_id=State()

@casino.callback_query(F.data == "game")
async def show_games_menu(callback: types.CallbackQuery):
    try:
        a = await DB.get_user_balance_game(callback.from_user.id)
    except:
        await DB.add_user_on_game(callback.from_user.id, callback.from_user.username)
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üí∏ –ë–∞–ª–∞–Ω—Å", callback_data="balance_game"),
        InlineKeyboardButton(text="üé≤ –ö—É–±–∏–∫–∏", callback_data="game_dice"),
        InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="game_basketball"),
        # InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="game_football"),
        InlineKeyboardButton(text="üéØ –î–∞—Ä—Ç—Å", callback_data="game_darts"),
        InlineKeyboardButton(text="üé∞ –ö–∞–∑–∏–Ω–æ", callback_data="game_casino"),
        InlineKeyboardButton(text="üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="gameStatics"),
        # InlineKeyboardButton(text="‚ÑπÔ∏è –ò–ù–§–û", callback_data="gameInfo"),
        InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_menu") 
    )
    builder.adjust(1, 2, 2, 1, repeat=True)
    
    await callback.message.edit_text(
        "üéÆ <b>–ò–≥—Ä–æ–≤–æ–π –∑–∞–ª</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å:",
        reply_markup=builder.as_markup()
    )


# @casino.callback_query(F.data == "game")
# async def _(callback: types.CallbackQuery):
#     await callback.message.edit_text('''
      
#                                      ''')

@casino.callback_query(F.data == 'gameStatics')
async def show_game_statistics(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="game"))

    try:
        stats = await DB.get_game_statics()
        stats_mico = await DB.get_game_financial_stats(currency='mico')
        stats_stars = await DB.get_game_financial_stats(currency='stars')
        
        if not stats or len(stats) < 2:
            await callback.message.answer(
                "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=kb.as_markup()
            )
            return

        total_stats = stats[0]  # –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        today_stats = stats[1]  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            "üéÆ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä</b>\n\n"
            "üìä <b>–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b>\n"
            f"‚ñ™Ô∏è –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {total_stats['game_wins'] + total_stats['game_losses']}\n"
            f"‚ñ™Ô∏è –ü–æ–±–µ–¥: {total_stats['game_wins']}\n"
            f"‚ñ™Ô∏è –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {total_stats['game_losses']}\n"
            f"‚ñ™Ô∏è –°—ã–≥—Ä–∞–Ω–æ –≤ –∫–æ—Å—Ç–∏: {total_stats['dice_played']}\n"
            f"‚ñ™Ô∏è –°—ã–≥—Ä–∞–Ω–æ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª: {total_stats['basketball_played']}\n"
#            f"‚ñ™Ô∏è –°—ã–≥—Ä–∞–Ω–æ –≤ —Ñ—É—Ç–±–æ–ª: {total_stats['football_played']}\n"
            f"‚ñ™Ô∏è –°—ã–≥—Ä–∞–Ω–æ –≤ –¥–∞—Ä—Ç—Å: {total_stats['darts_played']}\n"
            f"‚ñ™Ô∏è –°—ã–≥—Ä–∞–Ω–æ –≤ –∫–∞–∑–∏–Ω–æ: {total_stats['casino_played']}\n"
            f"‚ñ™Ô∏è –í—ã–≤–µ–¥–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {total_stats['withdraw_from_game']} ‚≠ê\n\n"
            
            "üìÖ <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            f"‚ñ™Ô∏è –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {today_stats['game_wins'] + today_stats['game_losses']}\n"
            f"‚ñ™Ô∏è –ü–æ–±–µ–¥: {today_stats['game_wins']}\n"
            f"‚ñ™Ô∏è –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {today_stats['game_losses']}\n"
            f"‚ñ™Ô∏è –°—ã–≥—Ä–∞–Ω–æ –≤ –∫–æ—Å—Ç–∏: {today_stats['dice_played']}\n"
            f"‚ñ™Ô∏è –°—ã–≥—Ä–∞–Ω–æ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª: {today_stats['basketball_played']}\n"
#            f"‚ñ™Ô∏è –°—ã–≥—Ä–∞–Ω–æ –≤ —Ñ—É—Ç–±–æ–ª: {today_stats['football_played']}\n"
            f"‚ñ™Ô∏è –°—ã–≥—Ä–∞–Ω–æ –≤ –¥–∞—Ä—Ç—Å: {today_stats['darts_played']}\n"
            f"‚ñ™Ô∏è –°—ã–≥—Ä–∞–Ω–æ –≤ –∫–∞–∑–∏–Ω–æ: {today_stats['casino_played']}\n"
            f"‚ñ™Ô∏è –í—ã–≤–µ–¥–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {today_stats['withdraw_from_game']} ‚≠ê\n\n"
        )
        if callback.from_user.id in ADMINS_ID:
            message_text += (
            "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (MICO):</b>\n"
            f"‚ñ™Ô∏è –í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats_mico['total']['bet']:.2f}\n"
            f"‚ñ™Ô∏è –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {stats_mico['total']['win']:.2f}\n"
            f"‚ñ™Ô∏è –í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ: {stats_mico['total']['loss']:.2f}\n"
            f"‚ñ™Ô∏è –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {stats_mico['total']['profit']:.2f}\n\n"
            
            "üåü <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (STARS):</b>\n"
            f"‚ñ™Ô∏è –í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats_stars['total']['bet']:.2f}\n"
            f"‚ñ™Ô∏è –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {stats_stars['total']['win']:.2f}\n"
            f"‚ñ™Ô∏è –í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ: {stats_stars['total']['loss']:.2f}\n"
            f"‚ñ™Ô∏è –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {stats_stars['total']['profit']:.2f}"
        )

        await callback.message.edit_text(
            message_text,
            reply_markup=kb.as_markup(),
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"Error showing game statistics: {e}", exc_info=True)
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=kb.as_markup()
        )

@casino.callback_query(F.data.startswith("game_") & ~F.data.startswith("game_dice"))
async def start_game(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã (–æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª–∞, —Ñ—É—Ç–±–æ–ª–∞, –¥–∞—Ä—Ç—Å, –∫–∞–∑–∏–Ω–æ)"""
    try:

        game_type = callback.data.split('_')[1]
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        current_currency = await DB.get_user_currency(user_id)
        currency_symbol = "ü™ô" if current_currency == "mico" else "‚≠ê"
        
        game_names = {
            'basketball': "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª",
            'football': "‚öΩ –§—É—Ç–±–æ–ª",
            'darts': "üéØ –î–∞—Ä—Ç—Å",
            'casino': "üé∞ –ö–∞–∑–∏–Ω–æ"
        }
        
        builder = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ (—Ç–µ–ø–µ—Ä—å —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —É–∫–∞–∑–∞–Ω–∏—è —Å–≤–æ–µ–π —Å—Ç–∞–≤–∫–∏)
        builder.row(
            InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_bet_{game_type}"),
            InlineKeyboardButton(text=f"{current_bet} {currency_symbol}", callback_data=f"set_custom_bet_{game_type}"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"increase_bet_{game_type}")
        )
        
        # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç—ã
        builder.row(InlineKeyboardButton(text=f"–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É ({currency_symbol})", callback_data=f"change_currency_{game_type}"))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
        builder.row(InlineKeyboardButton(text="üéØ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"play_{game_type}"))
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game"))
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–≥—Ä—ã
            if game_type == 'darts':
                coefficients_text = (
                    f"üéØ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–∞—Ä—Ç—Å:\n"
                    f"‚ñ™ –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä (üéØ): x{GAME_COEFFICIENTS['darts']['bullseye']}\n"
                    f"‚ñ™ –ü–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ –∫—Ä–∞—è–º: x{GAME_COEFFICIENTS['darts']['outer']}"
                )
            elif game_type == 'casino':
                coefficients_text = (
                    f"üé∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–∞–∑–∏–Ω–æ:\n"
                    f"‚ñ™ –¢—Ä–∏ 7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£: x{GAME_COEFFICIENTS['casino']['three_7']}\n"
                    f"‚ñ™ –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö: x{GAME_COEFFICIENTS['casino']['three_any']}\n"
                )
            else:
                # –î–ª—è –∏–≥—Ä —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ (—Ñ—É—Ç–±–æ–ª, –±–∞—Å–∫–µ—Ç–±–æ–ª –∏ —Ç.–¥.)
                coefficients_text = f"‚ñ™ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{GAME_COEFFICIENTS[game_type]}"

            await callback.message.edit_text(
                f"{game_names[game_type]} <b>–ò–≥—Ä–∞</b>\n\n"
                f"‚ñ™Ô∏è –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: <b>{current_bet} {currency_symbol}</b>\n\n"
                f"{coefficients_text}\n\n"
                "–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"Error displaying game info: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ")

        except Exception as e:
            print(f"Error editing message: {e}")
            await callback.answer()
    except Exception as e:
        print(f"Error in start_game: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç—ã
@casino.callback_query(F.data.startswith("change_currency_"))
async def change_currency_handler(callback: types.CallbackQuery, bot: Bot):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è —Å—Ç–∞–≤–æ–∫"""
    try:
        game_type = callback.data.split('_')[2]
        user_id = callback.from_user.id
        current_currency = await DB.get_user_currency(user_id)
        
        # –ú–µ–Ω—è–µ–º –≤–∞–ª—é—Ç—É –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é
        new_currency = 'stars' if current_currency == 'mico' else 'mico'
        await DB.update_user_currency(user_id, new_currency)
        
        # –°–æ–∑–¥–∞–µ–º fake callback –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é
        class FakeCallback:
            def __init__(self, from_user, message):
                self.from_user = from_user 
                self.message = message
        
        fake_callback = FakeCallback(callback.from_user, callback.message)
        fake_callback.data = f"game_{game_type}"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∏–≥—Ä—ã
        if game_type == 'dice':
            await start_dice_game(fake_callback)
        else:
            await start_game(fake_callback)
            
        await callback.answer(f"–í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'Stars ‚≠ê' if new_currency == 'stars' else '$MICO ü™ô'}")
    except Exception as e:
        logger.error(f"Error in change_currency_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä
@casino.callback_query(F.data.startswith("increase_bet_"))
async def increase_bet_handler(callback: types.CallbackQuery):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ 10% –¥–ª—è –ª—é–±–æ–π –∏–≥—Ä—ã"""
    try:
        game_type = callback.data.split('_')[2]
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ 10% –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
        new_bet = round(current_bet * 1.1, 2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑–µ
        await DB.update_user_bet(user_id, new_bet)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å 
        if game_type == 'dice':
            await start_dice_game(callback)
        else:
            await start_game(callback) 
        await callback.answer(f"+10%")

    except Exception as e:
        logger.error(f"Error in increase_bet_handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@casino.callback_query(F.data.startswith("decrease_bet_"))
async def decrease_bet_handler(callback: types.CallbackQuery):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ 10% –¥–ª—è –ª—é–±–æ–π –∏–≥—Ä—ã"""
    try:
        game_type = callback.data.split('_')[2]
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ 10% –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
        new_bet = round(current_bet * 0.9, 2)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 0.01
        new_bet = max(0.01, new_bet)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑–µ
        await DB.update_user_bet(user_id, new_bet)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if game_type == 'dice':
            await start_dice_game(callback)
        else:
            await start_game(callback)
        await callback.answer(f"-10%")

    except Exception as e:
        logger.error(f"Error in decrease_bet_handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä
@casino.callback_query(F.data.startswith("set_custom_bet_"))
async def ask_for_custom_bet(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –ª—é–±–æ–π –∏–≥—Ä—ã"""
    try:
        game_type = callback.data.split('_')[3]
        await state.update_data(game_type=game_type,
                                request_message_id=callback.message.message_id)
        
        await callback.message.edit_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 1):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"game_{game_type}")]
            ])
        )
        await state.set_state(GameStates.waiting_for_custom_bet)
    except Exception as e:
        print(f"Error in ask_for_custom_bet: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@casino.message(GameStates.waiting_for_custom_bet)
async def set_custom_bet(message: types.Message, state: FSMContext, bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞"""
    try:
        user_id = message.from_user.id
        user_data = await state.get_data()
        game_type = user_data.get('game_type')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –≤–∞–ª—é—Ç—É
        current_currency = await DB.get_user_currency(user_id)
        balance = await DB.get_user_balance_for_game(user_id)
        currency_symbol = "ü™ô" if current_currency == "mico" else "‚≠ê"

        try:
            new_bet = int(message.text)
            if new_bet < 1:
                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 1!")
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            if new_bet > balance:
                await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} {currency_symbol}")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è)
            await DB.update_user_bet(user_id, new_bet)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º —Å—Ç–∞–≤–∫–∏
            try:
                chat_id = message.chat.id
                request_message_id = user_data.get('request_message_id')
                await bot.delete_message(chat_id, message.message_id)  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if request_message_id:
                    await bot.delete_message(chat_id, request_message_id)  # –ù–∞—à –∑–∞–ø—Ä–æ—Å
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å", 
                    callback_data=f"game_{game_type}"
                )]
            ])
            
            await message.answer(
                f"‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_bet} {currency_symbol}",
                reply_markup=markup
            )
            
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
            return
            
    except Exception as e:
        logger.error(f"Error in set_custom_bet: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    finally:
        await state.clear()



# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –≤ —Ñ—É—Ç–±–æ–ª
@casino.callback_query(F.data == "play_football")
async def play_football_game(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –≤ —Ñ—É—Ç–±–æ–ª —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    try:
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        balance = await DB.get_user_balance_for_game(user_id)
        currency = await DB.get_user_currency(user_id)
        currency_symbol = "ü™ô" if currency == "mico" else "‚≠ê"
        
        if current_bet > balance:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_football"))
            
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} {currency_symbol}\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet:.2f} {currency_symbol}",
                reply_markup=builder.as_markup()
            )
            return
        
        football_message = await callback.message.answer_dice(emoji=DiceEmoji.FOOTBALL)
        football_result = football_message.dice.value
        
        is_goal = football_result in [3, 4, 5]
        coefficient = GAME_COEFFICIENTS['football']

        await DB.increment_statistics(1, 'football_played')
        await DB.increment_statistics(2, 'football_played')
        
        if is_goal:
            win_amount = current_bet * coefficient
            result_text = f"‚öΩ <b>–ì–û–õ!</b> –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f} {currency_symbol}!"
            result_db = 'win'
            await DB.increment_statistics(1, 'game_wins')
            await DB.increment_statistics(2, 'game_wins')
        else:
            win_amount = -current_bet
            result_text = f"‚ùå –ü—Ä–æ–º–∞—Ö! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {current_bet:.2f} {currency_symbol}."
            result_db = 'loss'
            await DB.increment_statistics(1, 'game_losses')
            await DB.increment_statistics(2, 'game_losses')

        await update_game_stats(user_id, callback.from_user.username, current_bet, win_amount, result_db, 'football')
        new_balance = await DB.get_user_balance_for_game(user_id)
        
        result_message = (
            f"‚öΩ <b>–§—É—Ç–±–æ–ª - —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>\n\n"
            f"‚ñ™ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{current_bet:.2f} {currency_symbol}</b>\n"
            f"‚ñ™ –†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{'–ì–æ–ª!' if is_goal else '–ü—Ä–æ–º–∞—Ö'}</b>\n"
            f"‚ñ™ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>x{coefficient if is_goal else 0}</b>\n\n"
            f"{result_text}\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance:.2f} {currency_symbol}</b>"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_football"))
        builder.add(InlineKeyboardButton(text="üéÆ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã", callback_data="game"))
        
        await asyncio.sleep(3)
        await callback.message.answer(result_message, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"Error in play_football_game: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@casino.callback_query(F.data == "play_casino")
async def play_casino_game(callback: types.CallbackQuery, bot: Bot):
    try:
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        balance = await DB.get_user_balance_for_game(user_id)
        currency = await DB.get_user_currency(user_id)
        currency_symbol = "ü™ô" if currency == "mico" else "‚≠ê"
        
        if current_bet > balance:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_casino"))
            
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} {currency_symbol}\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet:.2f} {currency_symbol}",
                reply_markup=builder.as_markup()
            )
            return
        
        await DB.increment_statistics(1, 'casino_played')
        await DB.increment_statistics(2, 'casino_played')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–π
        coefficients_text = (
            "üé∞ <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–∞–∑–∏–Ω–æ:</b>\n"
            f"‚ñ™ –¢—Ä–∏ 7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£: x{GAME_COEFFICIENTS['casino']['three_7']}\n"
            f"‚ñ™ –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö: x{GAME_COEFFICIENTS['casino']['three_any']}\n"
        )
        
        #await callback.message.answer(coefficients_text)
        
        slot_message = await callback.message.answer_dice(emoji=DiceEmoji.SLOT_MACHINE)
        slot_result = slot_message.dice.value
        
        combo = get_combo_text(slot_result)
        
        if combo.count("—Å–µ–º—å") == 3:
            coefficient = GAME_COEFFICIENTS['casino']['three_7']
            result_type = "–î–ñ–ï–ö–ü–û–¢! –¢—Ä–∏ —Å–µ–º–µ—Ä–∫–∏!"
            result_db = 'big_win'
            await DB.increment_statistics(1, 'game_wins')
            await DB.increment_statistics(2, 'game_wins')
        elif len(set(combo)) == 1:
            coefficient = GAME_COEFFICIENTS['casino']['three_any']
            result_type = f"–¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ ({combo[0]})!"
            result_db = 'win'
            await DB.increment_statistics(1, 'game_wins')
            await DB.increment_statistics(2, 'game_wins')

        elif len(set(combo)) == 2:
            coefficient = GAME_COEFFICIENTS['casino']['two']
            result_type = f"–î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ ({max(set(combo), key=combo.count)})"
            result_db = 'loss'
            await DB.increment_statistics(1, 'game_losses')
            await DB.increment_statistics(2, 'game_losses')

        else:
            coefficient = 0
            result_type = "–ù–µ—É–¥–∞—á–∞"
            result_db = 'loss'
            await DB.increment_statistics(1, 'game_losses')
            await DB.increment_statistics(2, 'game_losses')


        win_amount = round(current_bet * coefficient - current_bet, 2) if coefficient > 0 else -current_bet
        
        if coefficient > 0:
            result_text = f"üé∞ <b>{result_type}</b> –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f} {currency_symbol}!"
        else:
            result_text = f"‚ùå {result_type} –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {current_bet:.2f} {currency_symbol}."
        
        await update_game_stats(user_id, callback.from_user.username, current_bet, win_amount, result_db, 'casino')
        new_balance = await DB.get_user_balance_for_game(user_id)
        
        result_message = (
            f"üé∞ <b>–ö–∞–∑–∏–Ω–æ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>\n\n"
            f"‚ñ™ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{current_bet:.2f} {currency_symbol}</b>\n"
            f"‚ñ™ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {' | '.join(combo)}\n"
            f"‚ñ™ {result_type}\n"
            f"‚ñ™ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>x{coefficient if coefficient > 0 else 0}</b>\n\n"
            f"{result_text}\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance:.2f} {currency_symbol}</b>"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_casino"))
        builder.add(InlineKeyboardButton(text="üéÆ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã", callback_data="game"))
        
        await asyncio.sleep(2)
        await callback.message.answer(result_message, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"Error in play_casino_game: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@casino.callback_query(F.data == "play_darts")
async def play_darts_game(callback: types.CallbackQuery, bot: Bot):
    try:
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        balance = await DB.get_user_balance_for_game(user_id)
        currency = await DB.get_user_currency(user_id)
        currency_symbol = "ü™ô" if currency == "mico" else "‚≠ê"
        
        if current_bet > balance:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_darts"))
            
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} {currency_symbol}\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet:.2f} {currency_symbol}",
                reply_markup=builder.as_markup()
            )
            return
        
        await DB.increment_statistics(1, 'darts_played')
        await DB.increment_statistics(2, 'darts_played')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–π
        coefficients_text = (
            "üéØ <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–∞—Ä—Ç—Å:</b>\n"
            f"‚ñ™ –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä (üéØ): x{GAME_COEFFICIENTS['darts']['bullseye']}\n"
        )
        
        #await callback.message.answer(coefficients_text)
        
        darts_message = await callback.message.answer_dice(emoji=DiceEmoji.DART)
        darts_result = darts_message.dice.value
        
        if darts_result == 6:
            coefficient = GAME_COEFFICIENTS['darts']['bullseye']
            result_type = "–ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä!"
            result_db = 'win'
            await DB.increment_statistics(1, 'game_wins')
            await DB.increment_statistics(2, 'game_wins')
        else:
            coefficient = 0
            result_type = "–ü—Ä–æ–º–∞—Ö!"
            result_db = 'loss'
            await DB.increment_statistics(1, 'game_losses')
            await DB.increment_statistics(2, 'game_losses')
        
        win_amount = round(current_bet * coefficient - current_bet, 2) if coefficient > 0 else -current_bet
        
        if coefficient > 0:
            result_text = f"üéØ <b>{result_type}</b> –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f} {currency_symbol}!"
        else:
            result_text = f"‚ùå {result_type} –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {current_bet:.2f} {currency_symbol}."
        
        await update_game_stats(user_id, callback.from_user.username, current_bet, win_amount, result_db, 'darts')
        new_balance = await DB.get_user_balance_for_game(user_id)
        
        result_message = (
            f"üéØ <b>–î–∞—Ä—Ç—Å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>\n\n"
            f"‚ñ™ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{current_bet:.2f} {currency_symbol}</b>\n"
            f"‚ñ™ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: <b>{darts_result}</b>\n"
            f"‚ñ™ {result_type}\n"
            f"‚ñ™ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>x{coefficient if int(coefficient) > 0 else 0}</b>\n\n"
            f"{result_text}\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance:.2f} {currency_symbol}</b>"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_darts"))
        builder.add(InlineKeyboardButton(text="üéÆ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã", callback_data="game"))
        
        await asyncio.sleep(2)
        await callback.message.answer(result_message, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"Error in play_darts_game: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def get_combo_text(dice_value: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ, —á—Ç–æ –±—ã–ª–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–∞–π—Å–µ-–∫–∞–∑–∏–Ω–æ
    :param dice_value: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–π—Å–∞ (—á–∏—Å–ª–æ)
    :return: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –≤—ã–ø–∞–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞

    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—â—ë —Ä–∞–∑ —Å–ø–∞—Å–∏–±–æ t.me/svinerus):
        return [casino[(dice_value - 1) // i % 4]for i in (1, 4, 16)]
    """
    #           0       1         2        3
    values = ["BAR", "–≤–∏–Ω–æ–≥—Ä–∞–¥", "–ª–∏–º–æ–Ω", "—Å–µ–º—å"]

    dice_value -= 1
    result = []
    for _ in range(3):
        result.append(values[dice_value % 4])
        dice_value //= 4
    return result

@casino.callback_query(F.data == "play_basketball")
async def play_basketball_game(callback: types.CallbackQuery, bot: Bot):
    try:
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        balance = await DB.get_user_balance_for_game(user_id)
        currency = await DB.get_user_currency(user_id)
        currency_symbol = "ü™ô" if currency == "mico" else "‚≠ê"
        
        if current_bet > balance:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_basketball"))
            
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} {currency_symbol}\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet:.2f} {currency_symbol}",
                reply_markup=builder.as_markup()
            )
            return
        
        await DB.increment_statistics(1, 'basketball_played')
        await DB.increment_statistics(2, 'basketball_played')
        basketball_message = await callback.message.answer_dice(emoji=DiceEmoji.BASKETBALL)
        basketball_result = basketball_message.dice.value
        
        is_basket = basketball_result in [4, 5]
        coefficient = GAME_COEFFICIENTS['basketball']
        
        if is_basket:
            win_amount = current_bet * coefficient
            result_text = f"üèÄ <b>–ü–û–ü–ê–î–ê–ù–ò–ï!</b> –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f} {currency_symbol}!"
            result_db = 'win'
            await DB.increment_statistics(1, 'game_wins')
            await DB.increment_statistics(2, 'game_wins')
        else:
            win_amount = -current_bet
            result_text = f"‚ùå –ü—Ä–æ–º–∞—Ö! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {current_bet:.2f} {currency_symbol}."
            result_db = 'loss'
            await DB.increment_statistics(1, 'game_losses')
            await DB.increment_statistics(2, 'game_losses')
        
        await update_game_stats(user_id, callback.from_user.username, current_bet, win_amount, result_db, 'basketball')
        new_balance = await DB.get_user_balance_for_game(user_id)
        
        result_message = (
            f"üèÄ <b>–ë–∞—Å–∫–µ—Ç–±–æ–ª - —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>\n\n"
            f"‚ñ™ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{current_bet:.2f} {currency_symbol}</b>\n"
            f"‚ñ™ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: <b>{'–ü–æ–ø–∞–¥–∞–Ω–∏–µ' if is_basket else '–ü—Ä–æ–º–∞—Ö'}</b>\n"
            f"‚ñ™ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>x{coefficient if is_basket else 0}</b>\n\n"
            f"{result_text}\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance:.2f} {currency_symbol}</b>"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_basketball"))
        builder.add(InlineKeyboardButton(text="üéÆ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã", callback_data="game"))
        
        await asyncio.sleep(2)
        await callback.message.answer(result_message, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"Error in play_basketball_game: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


async def update_game_stats(user_id: int, username: str, bet: float, win_amount: float, result_type: str, game_mode: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    currency = await DB.get_user_currency(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
    await DB.update_user_balance_for_game(user_id, win_amount)

    currency = await DB.get_user_currency(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await DB.update_game_stats(user_id, stat_type='bet')
    await DB.update_game_stats(user_id, stat_type=result_type)
    await DB.add_game_history(
        user_id=user_id,
        amount=bet,
        result=result_type,
        game_mode=game_mode,
        currency=currency
    )
    
    await DB.update_game_mode_stats(
        user_id=user_id,
        game_mode=game_mode,
        result=result_type
    )


@casino.callback_query(F.data == "game_dice")
async def start_dice_game(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏ –∏ –≤–∞–ª—é—Ç—ã"""
    try:
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        current_currency = await DB.get_user_currency(user_id)
        currency_symbol = "ü™ô" if current_currency == "mico" else "‚≠ê"
        
        builder = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
        builder.row(
            InlineKeyboardButton(text="‚ûñ", callback_data="decrease_bet_dice"),
            InlineKeyboardButton(text=f"{current_bet} {currency_symbol}", callback_data="set_custom_bet_dice"),
            InlineKeyboardButton(text="‚ûï", callback_data="increase_bet_dice")
        )
        
        # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç—ã
        builder.row(InlineKeyboardButton(text=f"–°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É ({currency_symbol})", callback_data="change_currency_dice"))
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏
        builder.row(
            InlineKeyboardButton(text="2Ô∏è‚É£4Ô∏è‚É£6Ô∏è‚É£ –ß—ë—Ç–Ω–æ–µ (x2)", callback_data="dice_even"),
            InlineKeyboardButton(text="1Ô∏è‚É£3Ô∏è‚É£5Ô∏è‚É£ –ù–µ—á—ë—Ç–Ω–æ–µ (x2)", callback_data="dice_odd")
        )
        builder.row(
            InlineKeyboardButton(text="1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£ –ú–µ–Ω—å—à–µ (x2)", callback_data="dice_less"),
            InlineKeyboardButton(text="4Ô∏è‚É£5Ô∏è‚É£6Ô∏è‚É£ –ë–æ–ª—å—à–µ (x2)", callback_data="dice_greater")
        )
        builder.row(
            InlineKeyboardButton(text="üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ (x6)", callback_data="dice_exact")
        )
        builder.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game")
        )
        
        try:
            await callback.message.edit_text(
                f"üé≤ <b>–ò–≥—Ä–∞ –≤ –∫—É–±–∏–∫–∏</b>\n\n"
                f"‚ñ™ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: <b>{current_bet} {currency_symbol}</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            print(f"Error editing message: {e}")
            await callback.answer()
    except Exception as e:
        print(f"Error in start_dice_game: {e}")


@casino.callback_query(F.data == "change_currency_dice")
async def change_currency_dice_handler(callback: types.CallbackQuery, bot: Bot):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫–∏"""
    try:
        user_id = callback.from_user.id
        current_currency = await DB.get_user_currency(user_id)
        
        # –ú–µ–Ω—è–µ–º –≤–∞–ª—é—Ç—É –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é
        new_currency = 'stars' if current_currency == 'mico' else 'mico'
        await DB.update_user_currency(user_id, new_currency)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∏–≥—Ä—ã
        await start_dice_game(callback)
            
        await callback.answer(f"–í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'Stars ‚≠ê' if new_currency == 'stars' else '$MICO ü™ô'}")
    except Exception as e:
        logger.error(f"Error in change_currency_dice_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@casino.callback_query(F.data == "increase_bet_dice")
async def increase_bet_handler(callback: types.CallbackQuery):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ 10% –¥–ª—è –∫—É–±–∏–∫–æ–≤"""
    try:
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ 10% –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
        new_bet = round(current_bet * 1.1, 2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑–µ
        await DB.update_user_bet(user_id, new_bet)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await start_dice_game(callback)
        await callback.answer(f"+10%")

    except Exception as e:
        logger.error(f"Error in increase_bet_handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@casino.callback_query(F.data == "decrease_bet_dice")
async def decrease_bet_handler(callback: types.CallbackQuery):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ 10% –¥–ª—è –∫—É–±–∏–∫–æ–≤"""
    try:
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ 10% –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
        new_bet = round(current_bet * 0.9, 2)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 0.01
        new_bet = max(0.01, new_bet)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑–µ
        await DB.update_user_bet(user_id, new_bet)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await start_dice_game(callback)
        await callback.answer(f"-10%")

    except Exception as e:
        logger.error(f"Error in decrease_bet_handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@casino.callback_query(F.data == "set_custom_bet_dice")
async def ask_for_custom_bet(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫—É–±–∏–∫–æ–≤"""
    try:
        await state.set_state(GameStates.waiting_for_custom_bet)
        await state.update_data(game_type='dice')
        
        await callback.message.edit_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 1):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_dice")]
            ])
        )
    except Exception as e:
        print(f"Error in ask_for_custom_bet: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@casino.callback_query(F.data.startswith("dice_num_"))
async def process_exact_number(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –∏–≥—Ä–µ –≤ –∫—É–±–∏–∫–∏"""
    try:
        exact_number = int(callback.data.split('_')[2])
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        balance = await DB.get_user_balance_for_game(user_id)
        currency = await DB.get_user_currency(user_id)
        currency_symbol = "ü™ô" if currency == "mico" else "‚≠ê"
        
        await state.update_data(exact_number=exact_number)
        
        if current_bet > balance:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_dice"))
            
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} {currency_symbol}\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet:.2f} {currency_symbol}",
                reply_markup=builder.as_markup()
            )
            return
        
        await DB.increment_statistics(1, 'dice_played')
        await DB.increment_statistics(2, 'dice_played')
        
        dice_message = await callback.message.answer_dice(emoji=DiceEmoji.DICE)
        dice_roll = dice_message.dice.value
        
        win = dice_roll == exact_number
        coefficient = GAME_COEFFICIENTS['dice']['exact']
        
        if win:
            win_amount = current_bet * coefficient
            result_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f} {currency_symbol}!"
            result_db = 'win'
            await DB.increment_statistics(1, 'game_wins')
            await DB.increment_statistics(2, 'game_wins')
        else:
            win_amount = -current_bet
            result_text = f"üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–ø–∞–ª–æ {dice_roll}, –∞ –Ω–µ {exact_number}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {current_bet:.2f} {currency_symbol}."
            result_db = 'loss'
            await DB.increment_statistics(1, 'game_losses')
            await DB.increment_statistics(2, 'game_losses')
        
        await update_game_stats(user_id, callback.from_user.username, current_bet, win_amount, result_db, 'dice')
        new_balance = await DB.get_user_balance_for_game(user_id)
        
        result_message = (
            f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫–∏</b>\n\n"
            f"‚ñ™ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{current_bet:.2f} {currency_symbol}</b>\n"
            f"‚ñ™ –¢–∏–ø —Å—Ç–∞–≤–∫–∏: <b>–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ {exact_number}</b>\n"
            f"‚ñ™ –í—ã–ø–∞–ª–æ: <b>{dice_roll}</b>\n\n"
            f"{result_text}\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance:.2f} {currency_symbol}</b>\n\n"
            f"üé∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üé≤ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="dice_exact"))
        builder.add(InlineKeyboardButton(text="üéÆ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã", callback_data="game"))
        builder.adjust(1)
        
        await asyncio.sleep(2)
        await callback.message.answer(result_message, reply_markup=builder.as_markup())
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in process_exact_number: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@casino.callback_query(F.data.startswith("dice_") & ~F.data.startswith("dice_num_"))
async def start_dice_game_immediately(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        bet_type = callback.data.split('_')[1]
        user_id = callback.from_user.id
        current_bet = await DB.get_user_bet(user_id)
        balance = await DB.get_user_balance_for_game(user_id)
        currency = await DB.get_user_currency(user_id)
        currency_symbol = "ü™ô" if currency == "mico" else "‚≠ê"
        
        if bet_type == 'exact':
            builder = InlineKeyboardBuilder()
            for num in range(1, 7):
                builder.add(InlineKeyboardButton(text=str(num), callback_data=f"dice_num_{num}"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_dice"))
            builder.adjust(6, 1, repeat=True)
            
            await state.set_state(GameStates.waiting_for_exact_number)
            await callback.message.edit_text(
                "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:",
                reply_markup=builder.as_markup()
            )
            return
        
        await state.update_data(bet_type=bet_type)
        
        if current_bet > balance:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_dice"))
            
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} {currency_symbol}\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet:.2f} {currency_symbol}",
                reply_markup=builder.as_markup()
            )
            return
        
        await DB.increment_statistics(1, 'dice_played')
        await DB.increment_statistics(2, 'dice_played')
        
        dice_message = await callback.message.answer_dice(emoji=DiceEmoji.DICE)
        dice_roll = dice_message.dice.value
        
        win = False
        coefficient = GAME_COEFFICIENTS['dice'][bet_type]
        
        if bet_type == 'even':
            win = dice_roll % 2 == 0
        elif bet_type == 'odd':
            win = dice_roll % 2 != 0
        elif bet_type == 'greater':
            win = dice_roll in [4, 5, 6]  # –ü–æ–±–µ–¥–∞ –ø—Ä–∏ 4,5,6
        elif bet_type == 'less':
            win = dice_roll in [1, 2, 3]  # –ü–æ–±–µ–¥–∞ –ø—Ä–∏ 1,2,3
        
        if win:
            win_amount = current_bet * coefficient
            result_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f} {currency_symbol}!"
            result_db = 'win'
            await DB.increment_statistics(1, 'game_wins')
            await DB.increment_statistics(2, 'game_wins')
        else:
            win_amount = -current_bet
            result_text = f"üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {current_bet:.2f} {currency_symbol}."
            result_db = 'loss'
            await DB.increment_statistics(1, 'game_losses')
            await DB.increment_statistics(2, 'game_losses')
        
        await update_game_stats(user_id, callback.from_user.username, current_bet, win_amount, result_db, 'dice')
        new_balance = await DB.get_user_balance_for_game(user_id)
        
        bet_type_names = {
            'even': '—á—ë—Ç–Ω–æ–µ',
            'odd': '–Ω–µ—á—ë—Ç–Ω–æ–µ',
            'greater': '–±–æ–ª—å—à–µ (4-6)',
            'less': '–º–µ–Ω—å—à–µ (1-3)'
        }
        
        result_message = (
            f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫–∏</b>\n\n"
            f"‚ñ™ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{current_bet:.2f} {currency_symbol}</b>\n"
            f"‚ñ™ –¢–∏–ø —Å—Ç–∞–≤–∫–∏: <b>{bet_type_names[bet_type]}</b>\n"
            f"‚ñ™ –í—ã–ø–∞–ª–æ: <b>{dice_roll}</b>\n\n"
            f"{result_text}\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance:.2f} {currency_symbol}</b>\n\n"
            f"üé∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üé≤ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"dice_{bet_type}"))
        builder.add(InlineKeyboardButton(text="üéÆ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã", callback_data="game"))
        builder.adjust(1)

        await asyncio.sleep(2)
        await callback.message.answer(result_message, reply_markup=builder.as_markup())
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in start_dice_game_immediately: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@casino.message(GameStates.waiting_for_bet)
async def process_bet(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫—É–±–∏–∫–∞–º–∏ Telegram"""
    user_id = message.from_user.id
    current_bet = await DB.get_user_bet(user_id)
    
    user_data = await state.get_data()
    bet_type = user_data.get('bet_type')
    exact_number = user_data.get('exact_number')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await DB.select_user(user_id)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if current_bet > DB.get_user_balance_game(user_id):
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up"))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_dice"))
        
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {DB.get_user_balance_game(user_id):.2f}\n"
            f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {current_bet:.2f}",
            reply_markup=builder.as_markup()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É–±–∏–∫ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    dice_message = await message.answer_dice(emoji=DiceEmoji.DICE)
    dice_roll = dice_message.dice.value
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    win = False
    coefficient = GAME_COEFFICIENTS['dice'][bet_type]
    
    if bet_type == 'even':
        win = dice_roll % 2 == 0
    elif bet_type == 'odd':
        win = dice_roll % 2 != 0
    elif bet_type == 'greater':
        win = dice_roll > 4
    elif bet_type == 'less':
        win = dice_roll < 4
    elif bet_type == 'exact':
        win = dice_roll == exact_number

    await DB.increment_statistics(1, 'dice_played')
    await DB.increment_statistics(2, 'dice_played')
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
    if win:
        win_amount = current_bet * coefficient
        result_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f}!"
        result_db = 'win'
        await DB.increment_statistics(1, 'game_wins')
        await DB.increment_statistics(2, 'game_wins')
    else:
        win_amount = -current_bet
        result_text = f"üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {current_bet:.2f}."
        result_db = 'loss'
        await DB.increment_statistics(1, 'game_losses')
        await DB.increment_statistics(2, 'game_losses')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await DB.add_game_balance( # –ø—Ä–æ–±–ª–µ–º–∞
        user_id=user_id,
        username=message.from_user.username,
        bal_change=win_amount
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞–≤–æ–∫
    await DB.update_game_stats(
        user_id=user_id,
        stat_type='bet'
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–∏–≥—Ä—ã—à–µ–π/–ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
    await DB.update_game_stats(
        user_id=user_id,
        stat_type=result_db
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
    await DB.add_game_history(
        user_id=user_id,
        amount=current_bet,
        result=result_db,
        game_mode='dice'
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∂–∏–º–∞–º –∏–≥—Ä—ã
    await DB.update_game_mode_stats(
        user_id=user_id,
        game_mode='dice',
        result=result_db
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    updated_user = await DB.select_user(user_id)
    new_balance = updated_user['balance']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    bet_type_names = {
        'even': '—á—ë—Ç–Ω–æ–µ',
        'odd': '–Ω–µ—á—ë—Ç–Ω–æ–µ',
        'greater': '–±–æ–ª—å—à–µ 4',
        'less': '–º–µ–Ω—å—à–µ 4',
        'exact': f'—á–∏—Å–ª–æ {exact_number}'
    }
    
    result_message = (
        f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫–∏</b>\n\n"
        f"‚ñ™ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>{current_bet:.2f}</b>\n"
        f"‚ñ™ –¢–∏–ø —Å—Ç–∞–≤–∫–∏: <b>{bet_type_names[bet_type]}</b>\n"
        f"‚ñ™ –í—ã–ø–∞–ª–æ: <b>{dice_roll}</b>\n\n"
        f"{result_text}\n\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance:.2f}</b>\n\n"
        f"üé∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üé≤ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"dice_{bet_type}"))
    builder.add(InlineKeyboardButton(text="üéÆ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã", callback_data="game"))
    builder.adjust(1)


    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É–±–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 2 —Å–µ–∫—É–Ω–¥—ã)
    await asyncio.sleep(2)
    await message.answer(result_message, reply_markup=builder.as_markup())
    await state.clear()


# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –Ω–æ–≤—ã–π State –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class BalanceStates(StatesGroup):
    waiting_for_deposit_amount = State()
    waiting_for_withdraw_amount = State()
    waiting_for_stars_amount = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
@casino.callback_query(F.data == "balance_game")
async def game_balance_handler(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º –≤ –∏–≥—Ä–µ"""
    user_id = callback.from_user.id
    game_balance = await DB.get_user_balance_game(user_id)
    stars_balance = await DB.get_user_balance_stars_game(user_id)
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="dep_game"),
        InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw_game")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game"))
    
    await callback.message.edit_text(
        f"üéÆ <b>–ò–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å</b>\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å $MICO: <b>{game_balance:.2f}</b>\n\n" 
        f"‚≠ê –ë–∞–ª–∞–Ω—Å Stars: <b>{stars_balance:.2f}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

# –ú–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@casino.callback_query(F.data == "dep_game")
async def deposit_menu_handler(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚≠ê Stars", callback_data="dep_stars"),
        InlineKeyboardButton(text="ü™ô $MICO", callback_data="dep_mico")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="balance_game"))
    
    await callback.message.edit_text(
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

# –ú–µ–Ω—é –≤—ã–≤–æ–¥–∞
@casino.callback_query(F.data == "withdraw_game")
async def withdraw_menu_handler(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="ü™ô $MICO", callback_data="withdraw_mico"),
        InlineKeyboardButton(text="‚≠êÔ∏è Stars", callback_data="withdraw_stars"),
    ) 
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="balance_game"))
    
    await callback.message.edit_text(
        "üí∏ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:",
        reply_markup=builder.as_markup()
    )

class withdraw_stars(StatesGroup):
    amount = State()

@casino.callback_query(F.data == "withdraw_stars")
async def withdraw_stars_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(withdraw_stars.amount)
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='balance_game'))
    stars = await DB.get_stars(callback.from_user.id)
    await callback.message.edit_text(
        '‚ùì –°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?\n'
        '‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 50 –∑–≤—ë–∑–¥\n'
        f'‚≠êÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å: {stars} Stars\n'
        '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏',
        reply_markup=kb.as_markup()
    )

@casino.message(withdraw_stars.amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext, bot: Bot):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        amount = float(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 50:
            kb = InlineKeyboardBuilder()
            kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='profile'))
            await message.answer(
                '‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 50 ‚≠ê',
                reply_markup=kb.as_markup()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        current_balance = await DB.get_stars(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if amount > current_balance:
            kb = InlineKeyboardBuilder()
            kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='profile'))
            await message.answer(
                f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ ‚ùå\n'
                f'–í–∞—à –±–∞–ª–∞–Ω—Å: {current_balance} ‚≠ê\n'
                f'–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {amount} ‚≠ê',
                reply_markup=kb.as_markup()
            )
            return
        
        await DB.increment_statistics_withdraw_from_game(1, amount)
        await DB.increment_statistics_withdraw_from_game(2, amount)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ —á–∞—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
        await bot.send_message(
            WITHDRAW_CHAT,
            text=f'''
üöÄ –ó–ê–Ø–í–ö–ê –ù–ê –í–´–í–û–î –ó–í–Å–ó–î
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}
üî¢ ID: {message.from_user.id}
üí∞ –°—É–º–º–∞: {amount} ‚≠ê
            '''
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞)
        new_balance = current_balance - amount
        await DB.add_star(user_id, -amount)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='profile'))
        await message.answer(
            f'‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} ‚≠ê —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n'
            f'üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚≠ê \n'
            'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
            reply_markup=kb.as_markup()
        )
        
    except ValueError:
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='withdraw_game'))
        await message.answer(
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 100) ‚ùå',
            reply_markup=kb.as_markup()
        )
    finally:
        await state.clear()


# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Stars
@casino.callback_query(F.data == "dep_stars")
async def deposit_stars_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stars"""
    await callback.message.edit_text(
        "<b>–í—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ Telegram Stars –Ω–∞ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É –ø–æ –∫—É—Ä—Å—É:</b>\n\n"
        "1‚≠ê = 1\n\n"
        "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dep_game")]
        ])
    )
    await state.set_state(BalanceStates.waiting_for_stars_amount)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã Stars
@casino.message(BalanceStates.waiting_for_stars_amount)
async def process_stars_amount(message: types.Message, state: FSMContext, bot: Bot):
    try:
        stars_amount = int(message.text)
        if stars_amount <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã Stars (1 –∑–≤–µ–∑–¥–∞ = 1 –º–æ–Ω–µ—Ç–∞)
        prices = [LabeledPrice(label=f"{stars_amount} Stars", amount=stars_amount)]  # –í –∫–æ–ø–µ–π–∫–∞—Ö
        
        await bot.send_invoice(
            chat_id=message.chat.id,
            title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {stars_amount} –º–æ–Ω–µ—Ç",
            description=f"–û–±–º–µ–Ω {stars_amount} Stars –Ω–∞ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É",
            payload=f"user_{message.from_user.id}_stars_{stars_amount}",
            provider_token="",  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            currency="XTR",
            prices=prices,
            start_parameter="stars_deposit"
        )

        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"Error in process_stars_amount: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MICO
@casino.callback_query(F.data == "dep_mico")
async def deposit_mico_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ MICO"""
    user_id = callback.from_user.id
    mico_balance = await DB.get_user_balance(user_id)
    
    await callback.message.edit_text(
        f"ü™ô <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"‚ñ™ –í–∞—à –±–∞–ª–∞–Ω—Å $MICO: <b>{mico_balance:.2f}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dep_game")]
        ])
    )
    await state.set_state(BalanceStates.waiting_for_deposit_amount)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã MICO –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@casino.message(BalanceStates.waiting_for_deposit_amount)
async def process_mico_deposit(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        amount = float(message.text)
        
        if amount <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            return
            
        mico_balance = await DB.get_user_balance(user_id)
        
        if amount > mico_balance:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {mico_balance:.2f} $MICO")
            return
            
        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ
        await DB.add_balance(user_id, -amount)
        await DB.update_user_balance_game(user_id, amount)
        
        new_balance = await DB.get_user_balance_game(user_id)
        
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='game'))
            
        await message.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ <b>{amount:.2f}</b> $MICO –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å!\n\n"
            f"üí∞ –ù–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{new_balance:.2f}</b>",
            reply_markup=kb.as_markup()
        )
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"Error in process_mico_deposit: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ MICO
@casino.callback_query(F.data == "withdraw_mico")
async def withdraw_mico_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —á–µ—Ä–µ–∑ MICO"""
    user_id = callback.from_user.id
    game_balance = await DB.get_user_balance_game(user_id)
    
    await callback.message.edit_text(
        f"üí∏ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –∏–≥—Ä—ã</b>\n\n"
        f"‚ñ™ –í–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{game_balance:.2f}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ $MICO:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="withdraw_game")]
        ])
    )
    await state.set_state(BalanceStates.waiting_for_withdraw_amount)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã MICO –¥–ª—è –≤—ã–≤–æ–¥–∞
@casino.message(BalanceStates.waiting_for_withdraw_amount)
async def process_mico_withdraw(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        amount = float(message.text)
        
        if amount <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            return
            
        game_balance = await DB.get_user_balance_game(user_id)
        
        if amount > game_balance:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å: {game_balance:.2f}")
            return
            
        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
        await DB.update_user_balance_game(user_id, -amount)
        await DB.add_balance(user_id, amount)
        
        new_balance = await DB.get_user_balance(user_id)
        

        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='game'))
            

        await message.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–æ <b>{amount:.2f}</b> $MICO —Å –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞!\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å $MICO: <b>{new_balance:.2f}</b>",
            reply_markup=kb.as_markup()
        )
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"Error in process_mico_withdraw: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")